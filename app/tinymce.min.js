!function(factory) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], factory);
  } else {
    if ("object" == typeof module && module.exports) {
      /**
       * @param {?} PromiseArray
       * @param {number} $
       * @return {?}
       */
      module.exports = function(PromiseArray, $) {
        return void 0 === $ && ($ = "undefined" != typeof window ? require("jquery") : require("jquery")(PromiseArray)), factory($);
      };
    } else {
      factory(window.jQuery);
    }
  }
}(function($) {
  /**
   * @param {Node} element
   * @param {boolean} options
   * @return {undefined}
   */
  var start = function(element, options) {
    /** @type {number} */
    this.id = ++$.FE.ID;
    this.opts = $.extend(true, {}, $.extend({}, start.DEFAULTS, "object" == typeof options && options));
    /** @type {string} */
    var primaryKey = JSON.stringify(this.opts);
    $.FE.OPTS_MAPPING[primaryKey] = $.FE.OPTS_MAPPING[primaryKey] || this.id;
    this.sid = $.FE.OPTS_MAPPING[primaryKey];
    $.FE.SHARED[this.sid] = $.FE.SHARED[this.sid] || {};
    this.shared = $.FE.SHARED[this.sid];
    this.shared.count = (this.shared.count || 0) + 1;
    this.$oel = $(element);
    this.$oel.data("froala.editor", this);
    this.o_doc = element.ownerDocument;
    this.o_win = "defaultView" in this.o_doc ? this.o_doc.defaultView : this.o_doc.parentWindow;
    var oldScrollTop = $(this.o_win).scrollTop();
    this.$oel.on("froala.doInit", $.proxy(function() {
      this.$oel.off("froala.doInit");
      this.doc = this.$el.get(0).ownerDocument;
      this.win = "defaultView" in this.doc ? this.doc.defaultView : this.doc.parentWindow;
      this.$doc = $(this.doc);
      this.$win = $(this.win);
      if (!this.opts.pluginsEnabled) {
        /** @type {Array.<string>} */
        this.opts.pluginsEnabled = Object.keys($.FE.PLUGINS);
      }
      if (this.opts.initOnClick) {
        this.load($.FE.MODULES);
        this.$el.on("touchstart.init", function() {
          $(this).data("touched", true);
        });
        this.$el.on("touchmove.init", function() {
          $(this).removeData("touched");
        });
        this.$el.on("mousedown.init touchend.init dragenter.init focus.init", $.proxy(function(e) {
          if ("touchend" == e.type && !this.$el.data("touched")) {
            return true;
          }
          if (1 === e.which || !e.which) {
            this.$el.off("mousedown.init touchstart.init touchmove.init touchend.init dragenter.init focus.init");
            this.load($.FE.MODULES);
            this.load($.FE.PLUGINS);
            var el = e.originalEvent && e.originalEvent.originalTarget;
            if (el) {
              if ("IMG" == el.tagName) {
                $(el).trigger("mousedown");
              }
            }
            if (void 0 === this.ul) {
              this.destroy();
            }
            if ("touchend" == e.type) {
              if (this.image) {
                if (e.originalEvent) {
                  if (e.originalEvent.target) {
                    if ($(e.originalEvent.target).is("img")) {
                      setTimeout($.proxy(function() {
                        this.image.edit($(e.originalEvent.target));
                      }, this), 100);
                    }
                  }
                }
              }
            }
            /** @type {boolean} */
            this.ready = true;
            this.events.trigger("initialized");
          }
        }, this));
        this.events.trigger("initializationDelayed");
      } else {
        this.load($.FE.MODULES);
        this.load($.FE.PLUGINS);
        $(this.o_win).scrollTop(oldScrollTop);
        if (void 0 === this.ul) {
          this.destroy();
        }
        /** @type {boolean} */
        this.ready = true;
        this.events.trigger("initialized");
      }
    }, this));
    this._init();
  };
  start.DEFAULTS = {
    initOnClick : false,
    pluginsEnabled : null
  };
  start.MODULES = {};
  start.PLUGINS = {};
  /** @type {string} */
  start.VERSION = "2.7.2";
  /** @type {Array} */
  start.INSTANCES = [];
  start.OPTS_MAPPING = {};
  start.SHARED = {};
  /** @type {number} */
  start.ID = 0;
  /**
   * @return {undefined}
   */
  start.prototype._init = function() {
    var nodeName = this.$oel.prop("tagName");
    this.$oel.closest("label").length;
    var CLICK = $.proxy(function() {
      if ("TEXTAREA" != nodeName) {
        this._original_html = this._original_html || this.$oel.html();
      }
      this.$box = this.$box || this.$oel;
      if (this.opts.fullPage) {
        /** @type {boolean} */
        this.opts.iframe = true;
      }
      if (this.opts.iframe) {
        this.$iframe = $('<iframe src="about:blank" frameBorder="0">');
        this.$wp = $("<div></div>");
        this.$box.html(this.$wp);
        this.$wp.append(this.$iframe);
        this.$iframe.get(0).contentWindow.document.open();
        this.$iframe.get(0).contentWindow.document.write("<!DOCTYPE html>");
        this.$iframe.get(0).contentWindow.document.write("<html><head></head><body></body></html>");
        this.$iframe.get(0).contentWindow.document.close();
        this.$el = this.$iframe.contents().find("body");
        this.el = this.$el.get(0);
        this.$head = this.$iframe.contents().find("head");
        this.$html = this.$iframe.contents().find("html");
        this.iframe_document = this.$iframe.get(0).contentWindow.document;
        this.$oel.trigger("froala.doInit");
      } else {
        this.$el = $("<div></div>");
        this.el = this.$el.get(0);
        this.$wp = $("<div></div>").append(this.$el);
        this.$box.html(this.$wp);
        this.$oel.trigger("froala.doInit");
      }
    }, this);
    var addAll = $.proxy(function() {
      this.$box = $("<div>");
      this.$oel.before(this.$box).hide();
      this._original_html = this.$oel.val();
      this.$oel.parents("form").on("submit." + this.id, $.proxy(function() {
        this.events.trigger("form.submit");
      }, this));
      this.$oel.parents("form").on("reset." + this.id, $.proxy(function() {
        this.events.trigger("form.reset");
      }, this));
      CLICK();
    }, this);
    var requestAnimationFrame = $.proxy(function() {
      this.$el = this.$oel;
      this.el = this.$el.get(0);
      this.$el.attr("contenteditable", true).css("outline", "none").css("display", "inline-block");
      /** @type {boolean} */
      this.opts.multiLine = false;
      /** @type {boolean} */
      this.opts.toolbarInline = false;
      this.$oel.trigger("froala.doInit");
    }, this);
    var to_string = $.proxy(function() {
      this.$el = this.$oel;
      this.el = this.$el.get(0);
      /** @type {boolean} */
      this.opts.toolbarInline = false;
      this.$oel.trigger("froala.doInit");
    }, this);
    var attach = $.proxy(function() {
      this.$el = this.$oel;
      this.el = this.$el.get(0);
      /** @type {boolean} */
      this.opts.toolbarInline = false;
      this.$oel.on("click.popup", function(types) {
        types.preventDefault();
      });
      this.$oel.trigger("froala.doInit");
    }, this);
    if (this.opts.editInPopup) {
      attach();
    } else {
      if ("TEXTAREA" == nodeName) {
        addAll();
      } else {
        if ("A" == nodeName) {
          requestAnimationFrame();
        } else {
          if ("IMG" == nodeName) {
            to_string();
          } else {
            if ("BUTTON" == nodeName || "INPUT" == nodeName) {
              /** @type {boolean} */
              this.opts.editInPopup = true;
              /** @type {boolean} */
              this.opts.toolbarInline = false;
              attach();
            } else {
              CLICK();
            }
          }
        }
      }
    }
  };
  /**
   * @param {Object} files
   * @return {?}
   */
  start.prototype.load = function(files) {
    var fileName;
    for (fileName in files) {
      if (files.hasOwnProperty(fileName)) {
        if (this[fileName]) {
          continue;
        }
        if ($.FE.PLUGINS[fileName] && this.opts.pluginsEnabled.indexOf(fileName) < 0) {
          continue;
        }
        if (this[fileName] = new files[fileName](this), this[fileName]._init && (this[fileName]._init(), this.opts.initOnClick && "core" == fileName)) {
          return false;
        }
      }
    }
  };
  /**
   * @return {undefined}
   */
  start.prototype.destroy = function() {
    this.shared.count--;
    this.events.$off();
    var udataCur = this.html.get();
    if (this.events.trigger("destroy", [], true), this.events.trigger("shared.destroy", void 0, true), 0 === this.shared.count) {
      var sel;
      for (sel in this.shared) {
        if (this.shared.hasOwnProperty(sel)) {
          this.shared[sel];
          /** @type {null} */
          $.FE.SHARED[this.sid][sel] = null;
        }
      }
      $.FE.SHARED[this.sid] = {};
    }
    this.$oel.parents("form").off("." + this.id);
    this.$oel.off("click.popup");
    this.$oel.removeData("froala.editor");
    this.$oel.off("froalaEditor");
    this.core.destroy(udataCur);
    $.FE.INSTANCES.splice($.FE.INSTANCES.indexOf(this), 1);
  };
  /**
   * @param {string} arg
   * @return {?}
   */
  $.fn.froalaEditor = function(arg) {
    /** @type {Array} */
    var args = [];
    /** @type {number} */
    var i = 0;
    for (;i < arguments.length;i++) {
      args.push(arguments[i]);
    }
    if ("string" == typeof arg) {
      /** @type {Array} */
      var out = [];
      return this.each(function() {
        var $spy = $(this);
        var nodes = $spy.data("froala.editor");
        if (nodes) {
          var node;
          var functionName;
          if (arg.indexOf(".") > 0 && nodes[arg.split(".")[0]] ? (nodes[arg.split(".")[0]] && (node = nodes[arg.split(".")[0]]), functionName = arg.split(".")[1]) : (node = nodes, functionName = arg.split(".")[0]), !node[functionName]) {
            return $.error("Method " + arg + " does not exist in Froala Editor.");
          }
          var copies = node[functionName].apply(nodes, args.slice(1));
          if (void 0 === copies) {
            out.push(this);
          } else {
            if (0 === out.length) {
              out.push(copies);
            }
          }
        }
      }), 1 == out.length ? out[0] : out;
    }
    if ("object" == typeof arg || !arg) {
      return this.each(function() {
        if (!$(this).data("froala.editor")) {
          new start(this, arg);
        }
      });
    }
  };
  /** @type {function (Node, boolean): undefined} */
  $.fn.froalaEditor.Constructor = start;
  /** @type {function (Node, boolean): undefined} */
  $.FroalaEditor = start;
  /** @type {function (Node, boolean): undefined} */
  $.FE = start;
  /** @type {number} */
  $.FE.XS = 0;
  /** @type {number} */
  $.FE.SM = 1;
  /** @type {number} */
  $.FE.MD = 2;
  /** @type {number} */
  $.FE.LG = 3;
  /** @type {string} */
  var c = "a-z\\u0080-\\u009f\\u00a1-\\uffff0-9";
  /** @type {string} */
  $.FE.LinkRegExCommon = "(([" + c + "])|([" + c + "](\\.|-|_))){1,}[" + c + "]{1,}";
  /** @type {string} */
  $.FE.LinkRegExEnd = "((:[0-9]{1,5})|)(((\\/|\\?|#)[a-z\\u00a1-\\uffff0-9@?\\|!^=%&amp;/~+#-_{}]*)|())";
  /** @type {string} */
  $.FE.LinkRegExTLD = "((" + $.FE.LinkRegExCommon + ")(\\.(com|net|org|edu|mil|gov|co|biz|info|me|dev)))";
  /** @type {string} */
  $.FE.LinkRegExHTTP = "((ftp|http|https):\\/\\/" + $.FE.LinkRegExCommon + ")";
  /** @type {string} */
  $.FE.LinkRegExAuth = "((ftp|http|https):\\/\\/[\\u0021-\\uffff]{1,}@" + $.FE.LinkRegExCommon + ")";
  /** @type {string} */
  $.FE.LinkRegExWWW = "(www\\." + $.FE.LinkRegExCommon + "\\.[a-z0-9-]{2,24})";
  /** @type {string} */
  $.FE.LinkRegEx = "(" + $.FE.LinkRegExTLD + "|" + $.FE.LinkRegExHTTP + "|" + $.FE.LinkRegExWWW + "|" + $.FE.LinkRegExAuth + ")" + $.FE.LinkRegExEnd;
  /** @type {Array} */
  $.FE.LinkProtocols = ["mailto", "tel", "sms", "notes", "data"];
  /** @type {RegExp} */
  $.FE.MAIL_REGEX = /.+@.+\..+/i;
  /**
   * @param {Object} data
   * @return {?}
   */
  $.FE.MODULES.helpers = function(data) {
    /**
     * @return {?}
     */
    function getIE() {
      var fn;
      var reName;
      /** @type {number} */
      var q = -1;
      return "Microsoft Internet Explorer" == navigator.appName ? (fn = navigator.userAgent, reName = new RegExp("MSIE ([0-9]{1,}[\\.0-9]{0,})"), null !== reName.exec(fn) && (q = parseFloat(RegExp.$1))) : "Netscape" == navigator.appName && (fn = navigator.userAgent, reName = new RegExp("Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})"), null !== reName.exec(fn) && (q = parseFloat(RegExp.$1))), q;
    }
    /**
     * @return {?}
     */
    function getBrowser() {
      var browser = {};
      var value = getIE();
      if (value > 0) {
        /** @type {boolean} */
        browser.msie = true;
      } else {
        /** @type {string} */
        var arg = navigator.userAgent.toLowerCase();
        /** @type {Array.<string>} */
        var segmentMatch = /(edge)[ \/]([\w.]+)/.exec(arg) || (/(chrome)[ \/]([\w.]+)/.exec(arg) || (/(webkit)[ \/]([\w.]+)/.exec(arg) || (/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(arg) || (/(msie) ([\w.]+)/.exec(arg) || (arg.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(arg) || [])))));
        var result = {
          browser : segmentMatch[1] || "",
          version : segmentMatch[2] || "0"
        };
        if (segmentMatch[1]) {
          /** @type {boolean} */
          browser[result.browser] = true;
        }
        if (browser.chrome) {
          /** @type {boolean} */
          browser.webkit = true;
        } else {
          if (browser.webkit) {
            /** @type {boolean} */
            browser.safari = true;
          }
        }
      }
      return browser.msie && (browser.version = value), browser;
    }
    /**
     * @return {?}
     */
    function tmpl() {
      return/(iPad|iPhone|iPod)/g.test(navigator.userAgent) && !test();
    }
    /**
     * @return {?}
     */
    function template() {
      return/(Android)/g.test(navigator.userAgent) && !test();
    }
    /**
     * @return {?}
     */
    function title() {
      return/(Blackberry)/g.test(navigator.userAgent);
    }
    /**
     * @return {?}
     */
    function test() {
      return/(Windows Phone)/gi.test(navigator.userAgent);
    }
    /**
     * @return {?}
     */
    function render() {
      return template() || (tmpl() || title());
    }
    /**
     * @return {?}
     */
    function requestAnimationFrame() {
      return window.requestAnimationFrame || (window.webkitRequestAnimationFrame || (window.mozRequestAnimationFrame || function(after) {
        window.setTimeout(after, 1E3 / 60);
      }));
    }
    /**
     * @param {?} b
     * @return {?}
     */
    function extend(b) {
      return parseInt(b, 10) || 0;
    }
    /**
     * @return {?}
     */
    function reposition() {
      var bg = $('<div class="fr-visibility-helper"></div>').appendTo("body:first");
      try {
        var oldconfig = extend(bg.css("margin-left"));
        return bg.remove(), oldconfig;
      } catch (d) {
        return $.FE.LG;
      }
    }
    /**
     * @return {?}
     */
    function isTouch() {
      return "ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch;
    }
    /**
     * @param {string} html
     * @return {?}
     */
    function compile(html) {
      return!!/^(https?:|ftps?:|)\/\//i.test(html) && (html = String(html).replace(/</g, "%3C").replace(/>/g, "%3E").replace(/"/g, "%22").replace(/ /g, "%20"), (new RegExp("^" + $.FE.LinkRegEx + "$", "gi")).test(html));
    }
    /**
     * @param {?} qualifier
     * @return {?}
     */
    function parseDate(qualifier) {
      return!/^(https?:|ftps?:|)\/\//i.test(qualifier) && $.FE.MAIL_REGEX.test(qualifier);
    }
    /**
     * @param {string} src
     * @return {?}
     */
    function parse(src) {
      if (/^([A-Za-z]:(\\){1,2}|[A-Za-z]:((\\){1,2}[^\\]+)+)(\\)?$/i.test(src)) {
        return src;
      }
      if (/^(https?:|ftps?:|)\/\//i.test(src)) {
        if (!compile(src) && !compile("http:" + src)) {
          return "";
        }
      } else {
        if ((new RegExp("^(" + $.FE.LinkProtocols.join("|") + "):\\/\\/", "i")).test(src)) {
          return src;
        }
        /** @type {string} */
        src = encodeURIComponent(src).replace(/%23/g, "#").replace(/%2F/g, "/").replace(/%25/g, "%").replace(/mailto%3A/gi, "mailto:").replace(/file%3A/gi, "file:").replace(/sms%3A/gi, "sms:").replace(/tel%3A/gi, "tel:").replace(/notes%3A/gi, "notes:").replace(/data%3Aimage/gi, "data:image").replace(/blob%3A/gi, "blob:").replace(/webkit-fake-url%3A/gi, "webkit-fake-url:").replace(/%3F/g, "?").replace(/%3D/g, "=").replace(/%26/g, "&").replace(/&amp;/g, "&").replace(/%2C/g, ",").replace(/%3B/g, ";").replace(/%2B/g,
        "+").replace(/%40/g, "@").replace(/%5B/g, "[").replace(/%5D/g, "]").replace(/%7B/g, "{").replace(/%7D/g, "}");
      }
      return src;
    }
    /**
     * @param {boolean} obj
     * @return {?}
     */
    function _isArray(obj) {
      return obj && (!obj.propertyIsEnumerable("length") && ("object" == typeof obj && "number" == typeof obj.length));
    }
    /**
     * @param {string} selector
     * @return {?}
     */
    function init(selector) {
      /**
       * @param {?} s
       * @return {?}
       */
      function hex(s) {
        return("0" + parseInt(s, 10).toString(16)).slice(-2);
      }
      try {
        return selector && "transparent" !== selector ? /^#[0-9A-F]{6}$/i.test(selector) ? selector : (selector = selector.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/), ("#" + hex(selector[1]) + hex(selector[2]) + hex(selector[3])).toUpperCase()) : "";
      } catch (c) {
        return null;
      }
    }
    /**
     * @param {string} text
     * @return {?}
     */
    function load(text) {
      /** @type {RegExp} */
      var cx = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
      text = text.replace(cx, function(dataAndEvents, r, g, b) {
        return r + r + g + g + b + b;
      });
      /** @type {(Array.<string>|null)} */
      var code = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(text);
      return code ? "rgb(" + parseInt(code[1], 16) + ", " + parseInt(code[2], 16) + ", " + parseInt(code[3], 16) + ")" : "";
    }
    /**
     * @param {Object} context
     * @return {?}
     */
    function bind(context) {
      var path = (context.css("text-align") || "").replace(/-(.*)-/g, "");
      if (["left", "right", "justify", "center"].indexOf(path) < 0) {
        if (!location) {
          var head = $('<div dir="' + ("rtl" == data.opts.direction ? "rtl" : "auto") + '" style="text-align: ' + data.$el.css("text-align") + '; position: fixed; left: -3000px;"><span id="s1">.</span><span id="s2">.</span></div>');
          $("body:first").append(head);
          var dx = head.find("#s1").get(0).getBoundingClientRect().left;
          var minX = head.find("#s2").get(0).getBoundingClientRect().left;
          head.remove();
          /** @type {string} */
          location = dx < minX ? "left" : "right";
        }
        /** @type {string} */
        path = location;
      }
      return path;
    }
    /**
     * @return {?}
     */
    function add() {
      return null == n && (n = navigator.platform.toUpperCase().indexOf("MAC") >= 0), n;
    }
    /**
     * @return {undefined}
     */
    function update() {
      /**
       * @param {?} listener
       * @param {string} name
       * @return {undefined}
       */
      function wrap(listener, name) {
        var fn = listener[name];
        /**
         * @param {string} name
         * @return {?}
         */
        listener[name] = function(name) {
          var ret;
          /** @type {boolean} */
          var f = false;
          /** @type {boolean} */
          var g = false;
          if (name && name.match(re)) {
            name = name.replace(re, "");
            if (!this.parentNode) {
              div.appendChild(this);
              /** @type {boolean} */
              g = true;
            }
            var elems = this.parentNode;
            return this.id || (this.id = "rootedQuerySelector_id_" + (new Date).getTime(), f = true), ret = fn.call(elems, "#" + this.id + " " + name), f && (this.id = ""), g && div.removeChild(this), ret;
          }
          return fn.call(this, name);
        };
      }
      var div = data.o_doc.createElement("div");
      try {
        div.querySelectorAll(":scope *");
      } catch (e) {
        /** @type {RegExp} */
        var re = /^\s*:scope/gi;
        wrap(Element.prototype, "querySelector");
        wrap(Element.prototype, "querySelectorAll");
        wrap(HTMLElement.prototype, "querySelector");
        wrap(HTMLElement.prototype, "querySelectorAll");
      }
    }
    /**
     * @return {?}
     */
    function offset() {
      return data.o_win.pageYOffset ? data.o_win.pageYOffset : data.o_doc.documentElement && data.o_doc.documentElement.scrollTop ? data.o_doc.documentElement.scrollTop : data.o_doc.body.scrollTop ? data.o_doc.body.scrollTop : 0;
    }
    /**
     * @return {?}
     */
    function storeMouse() {
      return data.o_win.pageXOffset ? data.o_win.pageXOffset : data.o_doc.documentElement && data.o_doc.documentElement.scrollLeft ? data.o_doc.documentElement.scrollLeft : data.o_doc.body.scrollLeft ? data.o_doc.body.scrollLeft : 0;
    }
    /**
     * @return {undefined}
     */
    function check() {
      if (!Element.prototype.matches) {
        /** @type {function (this:Element, string): boolean} */
        Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
      }
      if (!Element.prototype.closest) {
        /**
         * @param {string} node
         * @return {?}
         */
        Element.prototype.closest = function(node) {
          /** @type {Element} */
          var failuresLink = this;
          /** @type {Element} */
          var el = this;
          if (!document.documentElement.contains(failuresLink)) {
            return null;
          }
          do {
            if (el.matches(node)) {
              return el;
            }
            /** @type {(Element|null)} */
            el = el.parentElement;
          } while (null !== el);
          return null;
        };
      }
    }
    /**
     * @param {Element} el
     * @return {?}
     */
    function _getDimensions(el) {
      var paddingBox = el.getBoundingClientRect();
      return paddingBox.top >= 0 && paddingBox.bottom <= (window.innerHeight || document.documentElement.clientHeight) || paddingBox.top <= 0 && paddingBox.bottom >= (window.innerHeight || document.documentElement.clientHeight);
    }
    /**
     * @return {undefined}
     */
    function set() {
      data.browser = getBrowser();
      update();
      check();
    }
    var location;
    /** @type {null} */
    var n = null;
    return{
      /** @type {function (): undefined} */
      _init : set,
      /** @type {function (): ?} */
      isIOS : tmpl,
      /** @type {function (): ?} */
      isMac : add,
      /** @type {function (): ?} */
      isAndroid : template,
      /** @type {function (): ?} */
      isBlackberry : title,
      /** @type {function (): ?} */
      isWindowsPhone : test,
      /** @type {function (): ?} */
      isMobile : render,
      /** @type {function (?): ?} */
      isEmail : parseDate,
      /** @type {function (): ?} */
      requestAnimationFrame : requestAnimationFrame,
      /** @type {function (?): ?} */
      getPX : extend,
      /** @type {function (): ?} */
      screenSize : reposition,
      /** @type {function (): ?} */
      isTouch : isTouch,
      /** @type {function (string): ?} */
      sanitizeURL : parse,
      /** @type {function (boolean): ?} */
      isArray : _isArray,
      /** @type {function (string): ?} */
      RGBToHex : init,
      /** @type {function (string): ?} */
      HEXtoRGB : load,
      /** @type {function (string): ?} */
      isURL : compile,
      /** @type {function (Object): ?} */
      getAlignment : bind,
      /** @type {function (): ?} */
      scrollTop : offset,
      /** @type {function (): ?} */
      scrollLeft : storeMouse,
      /** @type {function (Element): ?} */
      isInViewPort : _getDimensions
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.events = function(self) {
    /**
     * @param {?} one
     * @param {string} listener
     * @param {Function} name
     * @return {undefined}
     */
    function on(one, listener, name) {
      bind(one, listener, name);
    }
    /**
     * @return {undefined}
     */
    function loadScript() {
      on(self.$el, "cut copy paste beforepaste", function(event) {
        trigger(event.type, [event]);
      });
    }
    /**
     * @return {undefined}
     */
    function setup() {
      on(self.$el, "click mouseup mousedown touchstart touchend dragenter dragover dragleave dragend drop dragstart", function(event) {
        trigger(event.type, [event]);
      });
      init("mousedown", function() {
        /** @type {number} */
        var i = 0;
        for (;i < $.FE.INSTANCES.length;i++) {
          if ($.FE.INSTANCES[i] != self) {
            if ($.FE.INSTANCES[i].popups) {
              if ($.FE.INSTANCES[i].popups.areVisible()) {
                $.FE.INSTANCES[i].$el.find(".fr-marker").remove();
              }
            }
          }
        }
      });
    }
    /**
     * @return {undefined}
     */
    function go() {
      on(self.$el, "keydown keypress keyup input", function(event) {
        trigger(event.type, [event]);
      });
    }
    /**
     * @return {undefined}
     */
    function onSuccess() {
      on(self.$win, self._mousedown, function(dataAndEvents) {
        trigger("window.mousedown", [dataAndEvents]);
        call();
      });
      on(self.$win, self._mouseup, function(dataAndEvents) {
        trigger("window.mouseup", [dataAndEvents]);
      });
      on(self.$win, "cut copy keydown keyup touchmove touchend", function(object) {
        trigger("window." + object.type, [object]);
      });
    }
    /**
     * @return {undefined}
     */
    function push() {
      on(self.$doc, "dragend drop", function(object) {
        trigger("document." + object.type, [object]);
      });
    }
    /**
     * @param {boolean} recurring
     * @return {?}
     */
    function initialize(recurring) {
      if (void 0 === recurring && (recurring = true), !self.$wp) {
        return false;
      }
      if (self.helpers.isIOS() && self.$win.get(0).focus(), !self.core.hasFocus() && recurring) {
        var w = self.$win.scrollTop();
        return self.browser.msie && (self.$box && self.$box.css("position", "fixed")), self.browser.msie && (self.$wp && self.$wp.css("overflow", "visible")), parent(), self.$el.focus(), call(), self.browser.msie && (self.$box && self.$box.css("position", "")), self.browser.msie && (self.$wp && self.$wp.css("overflow", "auto")), w != self.$win.scrollTop() && self.$win.scrollTop(w), false;
      }
      if (!self.core.hasFocus() || self.$el.find(".fr-marker").length > 0) {
        return false;
      }
      if (self.selection.info(self.el).atStart && (self.selection.isCollapsed() && null != self.html.defaultTag())) {
        var node = self.markers.insert();
        if (node && !self.node.blockParent(node)) {
          $(node).remove();
          var thead = self.$el.find(self.html.blockTagsQuery()).get(0);
          if (thead) {
            $(thead).prepend($.FE.MARKERS);
            self.selection.restore();
          }
        } else {
          if (node) {
            $(node).remove();
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function render() {
      on(self.$el, "focus", function(event) {
        if (makeArray()) {
          initialize(false);
          if (false === C) {
            trigger(event.type, [event]);
          }
        }
      });
      on(self.$el, "blur", function(event) {
        if (makeArray()) {
          if (true === C) {
            trigger(event.type, [event]);
            call();
          }
        }
      });
      init("focus", function() {
        /** @type {boolean} */
        C = true;
      });
      init("blur", function() {
        /** @type {boolean} */
        C = false;
      });
    }
    /**
     * @return {undefined}
     */
    function constructor() {
      if (self.helpers.isMobile()) {
        /** @type {string} */
        self._mousedown = "touchstart";
        /** @type {string} */
        self._mouseup = "touchend";
        /** @type {string} */
        self._move = "touchmove";
        /** @type {string} */
        self._mousemove = "touchmove";
      } else {
        /** @type {string} */
        self._mousedown = "mousedown";
        /** @type {string} */
        self._mouseup = "mouseup";
        /** @type {string} */
        self._move = "";
        /** @type {string} */
        self._mousemove = "mousemove";
      }
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function start(e) {
      var $target = $(e.currentTarget);
      return self.edit.isDisabled() || self.node.hasClass($target.get(0), "fr-disabled") ? (e.preventDefault(), false) : "mousedown" === e.type && 1 !== e.which || (self.helpers.isMobile() || e.preventDefault(), (self.helpers.isAndroid() || self.helpers.isWindowsPhone()) && (0 === $target.parents(".fr-dropdown-menu").length && (e.preventDefault(), e.stopPropagation())), $target.addClass("fr-selected"), void self.events.trigger("commands.mousedown", [$target]));
    }
    /**
     * @param {Event} e
     * @param {Function} callback
     * @return {?}
     */
    function remove(e, callback) {
      var _self = $(e.currentTarget);
      if (self.edit.isDisabled() || self.node.hasClass(_self.get(0), "fr-disabled")) {
        return e.preventDefault(), false;
      }
      if ("mouseup" === e.type && 1 !== e.which) {
        return true;
      }
      if (!self.node.hasClass(_self.get(0), "fr-selected")) {
        return true;
      }
      if ("touchmove" != e.type) {
        if (e.stopPropagation(), e.stopImmediatePropagation(), e.preventDefault(), !self.node.hasClass(_self.get(0), "fr-selected")) {
          return self.button.getButtons(".fr-selected", true).removeClass("fr-selected"), false;
        }
        if (self.button.getButtons(".fr-selected", true).removeClass("fr-selected"), _self.data("dragging") || _self.attr("disabled")) {
          return _self.removeData("dragging"), false;
        }
        var sleep = _self.data("timeout");
        if (sleep) {
          clearTimeout(sleep);
          _self.removeData("timeout");
        }
        callback.apply(self, [e]);
      } else {
        if (!_self.data("timeout")) {
          _self.data("timeout", setTimeout(function() {
            _self.data("dragging", true);
          }, 100));
        }
      }
    }
    /**
     * @return {undefined}
     */
    function call() {
      /** @type {boolean} */
      ret = true;
    }
    /**
     * @return {undefined}
     */
    function parent() {
      /** @type {boolean} */
      ret = false;
    }
    /**
     * @return {?}
     */
    function makeArray() {
      return ret;
    }
    /**
     * @param {Object} element
     * @param {?} name
     * @param {Function} type
     * @return {undefined}
     */
    function create(element, name, type) {
      bind(element, self._mousedown, name, function(e) {
        if (!self.edit.isDisabled()) {
          start(e);
        }
      }, true);
      bind(element, self._mouseup + " " + self._move, name, function(ele) {
        if (!self.edit.isDisabled()) {
          remove(ele, type);
        }
      }, true);
      bind(element, "mousedown click mouseup", name, function(event) {
        if (!self.edit.isDisabled()) {
          event.stopPropagation();
        }
      }, true);
      init("window.mouseup", function() {
        if (!self.edit.isDisabled()) {
          element.find(name).removeClass("fr-selected");
          call();
        }
      });
    }
    /**
     * @param {string} name
     * @param {Function} fn
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function init(name, fn, deepDataAndEvents) {
      var codeSegments = name.split(" ");
      if (codeSegments.length > 1) {
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          init(codeSegments[i], fn, deepDataAndEvents);
        }
        return true;
      }
      if (void 0 === deepDataAndEvents) {
        /** @type {boolean} */
        deepDataAndEvents = false;
      }
      var queue;
      queue = 0 !== name.indexOf("shared.") ? methods[name] = methods[name] || [] : self.shared._events[name] = self.shared._events[name] || [];
      if (deepDataAndEvents) {
        queue.unshift(fn);
      } else {
        queue.push(fn);
      }
    }
    /**
     * @param {Object} fn
     * @param {string} type
     * @param {Function} name
     * @param {boolean} deepDataAndEvents
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    function bind(fn, type, name, deepDataAndEvents, dataAndEvents) {
      if ("function" == typeof name) {
        /** @type {boolean} */
        dataAndEvents = deepDataAndEvents;
        /** @type {Function} */
        deepDataAndEvents = name;
        /** @type {boolean} */
        name = false;
      }
      var queue = dataAndEvents ? self.shared.$_events : typePattern;
      var testNumber = dataAndEvents ? self.sid : self.id;
      if (name) {
        fn.on(type.split(" ").join(".ed" + testNumber + " ") + ".ed" + testNumber, name, deepDataAndEvents);
      } else {
        fn.on(type.split(" ").join(".ed" + testNumber + " ") + ".ed" + testNumber, deepDataAndEvents);
      }
      queue.push([fn, type.split(" ").join(".ed" + testNumber + " ") + ".ed" + testNumber]);
    }
    /**
     * @param {Array} args
     * @return {undefined}
     */
    function once(args) {
      /** @type {number} */
      var i = 0;
      for (;i < args.length;i++) {
        args[i][0].off(args[i][1]);
      }
    }
    /**
     * @return {undefined}
     */
    function completed() {
      once(typePattern);
      /** @type {Array} */
      typePattern = [];
      if (0 === self.shared.count) {
        once(self.shared.$_events);
        /** @type {Array} */
        self.shared.$_events = [];
      }
    }
    /**
     * @param {string} eventName
     * @param {Array} params
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function trigger(eventName, params, dataAndEvents) {
      if (!self.edit.isDisabled() || dataAndEvents) {
        var codeSegments;
        if (0 !== eventName.indexOf("shared.")) {
          codeSegments = methods[eventName];
        } else {
          if (self.shared.count > 0) {
            return false;
          }
          codeSegments = self.shared._events[eventName];
        }
        var handler;
        if (codeSegments) {
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            if (false === (handler = codeSegments[i].apply(self, params))) {
              return false;
            }
          }
        }
        return false !== (handler = self.$oel.triggerHandler("froalaEditor." + eventName, $.merge([self], params || []))) && handler;
      }
    }
    /**
     * @param {string} name
     * @param {Node} input
     * @param {boolean} allBindingsAccessor
     * @return {?}
     */
    function update(name, input, allBindingsAccessor) {
      if (!self.edit.isDisabled() || allBindingsAccessor) {
        var method;
        if (0 !== name.indexOf("shared.")) {
          method = methods[name];
        } else {
          if (self.shared.count > 0) {
            return false;
          }
          method = self.shared._events[name];
        }
        var text;
        if (method) {
          /** @type {number} */
          var j = 0;
          for (;j < method.length;j++) {
            if (void 0 !== (text = method[j].apply(self, [input]))) {
              input = text;
            }
          }
        }
        return text = self.$oel.triggerHandler("froalaEditor." + name, $.merge([self], [input])), void 0 !== text && (input = text), input;
      }
    }
    /**
     * @return {undefined}
     */
    function assertOwnProperty() {
      var property;
      for (property in methods) {
        if (methods.hasOwnProperty(property)) {
          delete methods[property];
        }
      }
    }
    /**
     * @return {undefined}
     */
    function url() {
      var eventName;
      for (eventName in self.shared._events) {
        if (self.shared._events.hasOwnProperty(eventName)) {
          delete self.shared._events[eventName];
        }
      }
    }
    /**
     * @return {undefined}
     */
    function onload() {
      self.shared.$_events = self.shared.$_events || [];
      self.shared._events = {};
      constructor();
      setup();
      onSuccess();
      push();
      go();
      render();
      call();
      loadScript();
      init("destroy", assertOwnProperty);
      init("shared.destroy", url);
    }
    var ret;
    var methods = {};
    /** @type {boolean} */
    var C = false;
    /** @type {Array} */
    var typePattern = [];
    return{
      /** @type {function (): undefined} */
      _init : onload,
      /** @type {function (string, Function, boolean): ?} */
      on : init,
      /** @type {function (string, Array, boolean): ?} */
      trigger : trigger,
      /** @type {function (Object, ?, Function): undefined} */
      bindClick : create,
      /** @type {function (): undefined} */
      disableBlur : parent,
      /** @type {function (): undefined} */
      enableBlur : call,
      /** @type {function (): ?} */
      blurActive : makeArray,
      /** @type {function (boolean): ?} */
      focus : initialize,
      /** @type {function (string, Node, boolean): ?} */
      chainTrigger : update,
      /** @type {function (Object, string, Function, boolean, boolean): undefined} */
      $on : bind,
      /** @type {function (): undefined} */
      $off : completed
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.node = function(self) {
    /**
     * @param {Node} dataAndEvents
     * @return {?}
     */
    function clone(dataAndEvents) {
      return dataAndEvents && "IFRAME" != dataAndEvents.tagName ? Array.prototype.slice.call(dataAndEvents.childNodes || []) : [];
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function fn(node) {
      return!!node && (node.nodeType == Node.ELEMENT_NODE && $.FE.BLOCK_TAGS.indexOf(node.tagName.toLowerCase()) >= 0);
    }
    /**
     * @param {Node} el
     * @return {?}
     */
    function Element(el) {
      return!!el && (el.nodeType == Node.ELEMENT_NODE && "a" == el.tagName.toLowerCase());
    }
    /**
     * @param {?} node
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function parse(node, dataAndEvents) {
      if (!node) {
        return true;
      }
      if (node.querySelector("table")) {
        return false;
      }
      var a = clone(node);
      if (1 == a.length) {
        if (fn(a[0])) {
          a = clone(a[0]);
        }
      }
      /** @type {boolean} */
      var h = false;
      /** @type {number} */
      var i = 0;
      for (;i < a.length;i++) {
        var li = a[i];
        if ((!dataAndEvents || !self.node.hasClass(li, "fr-marker")) && (li.nodeType != Node.TEXT_NODE || 0 !== li.textContent.length)) {
          if ("BR" != li.tagName && (li.textContent || "").replace(/\u200B/gi, "").replace(/\n/g, "").length > 0) {
            return false;
          }
          if (h) {
            return false;
          }
          if ("BR" == li.tagName) {
            /** @type {boolean} */
            h = true;
          }
        }
      }
      return!(node.querySelectorAll($.FE.VOID_ELEMENTS.join(",")).length - node.querySelectorAll("br").length) && (!node.querySelector(self.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)") && (!(node.querySelectorAll($.FE.BLOCK_TAGS.join(",")).length > 1) && !node.querySelector(self.opts.htmlDoNotWrapTags.join(":not(.fr-marker),") + ":not(.fr-marker)")));
    }
    /**
     * @param {Object} node
     * @return {?}
     */
    function load(node) {
      for (;node && (node.parentNode !== self.el && (!node.parentNode || !self.node.hasClass(node.parentNode, "fr-inner")));) {
        if (node = node.parentNode, fn(node)) {
          return node;
        }
      }
      return null;
    }
    /**
     * @param {Object} node
     * @param {Array} dom
     * @param {boolean} keepData
     * @return {?}
     */
    function remove(node, dom, keepData) {
      if (void 0 === dom && (dom = []), void 0 === keepData && (keepData = true), dom.push(self.el), dom.indexOf(node.parentNode) >= 0 || (node.parentNode && self.node.hasClass(node.parentNode, "fr-inner") || node.parentNode && ($.FE.SIMPLE_ENTER_TAGS.indexOf(node.parentNode.tagName) >= 0 && keepData))) {
        return null;
      }
      for (;dom.indexOf(node.parentNode) < 0 && (node.parentNode && (!self.node.hasClass(node.parentNode, "fr-inner") && (($.FE.SIMPLE_ENTER_TAGS.indexOf(node.parentNode.tagName) < 0 || !keepData) && (!fn(node) || (!fn(node.parentNode) || !keepData)))));) {
        node = node.parentNode;
      }
      return node;
    }
    /**
     * @param {Object} object
     * @return {?}
     */
    function toString(object) {
      var result = {};
      var ca = object.attributes;
      if (ca) {
        /** @type {number} */
        var i = 0;
        for (;i < ca.length;i++) {
          var c = ca[i];
          result[c.nodeName] = c.value;
        }
      }
      return result;
    }
    /**
     * @param {Object} s
     * @return {?}
     */
    function compare(s) {
      /** @type {string} */
      var optsData = "";
      var scrubbed = toString(s);
      var codeSegments = Object.keys(scrubbed).sort();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var name = codeSegments[i];
        var set = scrubbed[name];
        if (set.indexOf("'") < 0 && set.indexOf('"') >= 0) {
          optsData += " " + name + "='" + set + "'";
        } else {
          if (set.indexOf('"') >= 0 && set.indexOf("'") >= 0) {
            set = set.replace(/"/g, "&quot;");
            optsData += " " + name + '="' + set + '"';
          } else {
            optsData += " " + name + '="' + set + '"';
          }
        }
      }
      return optsData;
    }
    /**
     * @param {Element} node
     * @return {undefined}
     */
    function isEmpty(node) {
      var attrs = node.attributes;
      /** @type {number} */
      var i = attrs.length - 1;
      for (;i >= 0;i--) {
        var attr = attrs[i];
        node.removeAttribute(attr.nodeName);
      }
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function func(node) {
      return "<" + node.tagName.toLowerCase() + compare(node) + ">";
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function append(node) {
      return "</" + node.tagName.toLowerCase() + ">";
    }
    /**
     * @param {?} s
     * @param {Object} className
     * @return {?}
     */
    function set(s, className) {
      if (void 0 === className) {
        /** @type {boolean} */
        className = true;
      }
      var node = s.previousSibling;
      for (;node && (className && self.node.hasClass(node, "fr-marker"));) {
        node = node.previousSibling;
      }
      return!node || node.nodeType == Node.TEXT_NODE && ("" === node.textContent && set(node));
    }
    /**
     * @param {(Array|Element)} pos
     * @param {Object} className
     * @return {?}
     */
    function traverse(pos, className) {
      if (void 0 === className) {
        /** @type {boolean} */
        className = true;
      }
      var node = pos.nextSibling;
      for (;node && (className && self.node.hasClass(node, "fr-marker"));) {
        node = node.nextSibling;
      }
      return!node || node.nodeType == Node.TEXT_NODE && ("" === node.textContent && traverse(node));
    }
    /**
     * @param {Node} node
     * @return {?}
     */
    function parseNode(node) {
      return node && (node.nodeType == Node.ELEMENT_NODE && $.FE.VOID_ELEMENTS.indexOf((node.tagName || "").toLowerCase()) >= 0);
    }
    /**
     * @param {?} context
     * @return {?}
     */
    function init(context) {
      return!!context && ["UL", "OL"].indexOf(context.tagName) >= 0;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function getNodeIndex(node) {
      return node === self.el;
    }
    /**
     * @param {HTMLElement} node
     * @return {?}
     */
    function add(node) {
      return node && (node.nodeType == Node.ELEMENT_NODE && (node.getAttribute("class") && (node.getAttribute("class") || "").indexOf("fr-deletable") >= 0));
    }
    /**
     * @param {Element} elem
     * @return {?}
     */
    function restoreScript(elem) {
      return elem === self.doc.activeElement && ((!self.doc.hasFocus || self.doc.hasFocus()) && !!(getNodeIndex(elem) || (elem.type || (elem.href || ~elem.tabIndex))));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function isEditable(node) {
      return(!node.getAttribute || "false" != node.getAttribute("contenteditable")) && ["STYLE", "SCRIPT"].indexOf(node.tagName) < 0;
    }
    /**
     * @param {Object} element
     * @param {string} className
     * @return {?}
     */
    function hasClass(element, className) {
      return element instanceof $ && (element = element.get(0)), element && (element.classList && element.classList.contains(className));
    }
    /**
     * @param {Function} event
     * @return {?}
     */
    function select(event) {
      return self.browser.msie ? event : {
        /** @type {Function} */
        acceptNode : event
      };
    }
    return{
      /** @type {function (?): ?} */
      isBlock : fn,
      /** @type {function (?, boolean): ?} */
      isEmpty : parse,
      /** @type {function (Object): ?} */
      blockParent : load,
      /** @type {function (Object, Array, boolean): ?} */
      deepestParent : remove,
      /** @type {function (Object): ?} */
      rawAttributes : toString,
      /** @type {function (Object): ?} */
      attributes : compare,
      /** @type {function (Element): undefined} */
      clearAttributes : isEmpty,
      /** @type {function (?): ?} */
      openTagString : func,
      /** @type {function (?): ?} */
      closeTagString : append,
      /** @type {function (?, Object): ?} */
      isFirstSibling : set,
      /** @type {function ((Array|Element), Object): ?} */
      isLastSibling : traverse,
      /** @type {function (?): ?} */
      isList : init,
      /** @type {function (Node): ?} */
      isLink : Element,
      /** @type {function (?): ?} */
      isElement : getNodeIndex,
      /** @type {function (Node): ?} */
      contents : clone,
      /** @type {function (Node): ?} */
      isVoid : parseNode,
      /** @type {function (Element): ?} */
      hasFocus : restoreScript,
      /** @type {function (?): ?} */
      isEditable : isEditable,
      /** @type {function (HTMLElement): ?} */
      isDeletable : add,
      /** @type {function (Object, string): ?} */
      hasClass : hasClass,
      /** @type {function (Function): ?} */
      filter : select
    };
  };
  /** @type {string} */
  $.FE.INVISIBLE_SPACE = "&#8203;";
  /** @type {string} */
  $.FE.START_MARKER = '<span class="fr-marker" data-id="0" data-type="true" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>";
  /** @type {string} */
  $.FE.END_MARKER = '<span class="fr-marker" data-id="0" data-type="false" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>";
  /** @type {string} */
  $.FE.MARKERS = $.FE.START_MARKER + $.FE.END_MARKER;
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.markers = function(self) {
    /**
     * @param {Object} position
     * @param {string} state
     * @return {?}
     */
    function init(position, state) {
      return $('<span class="fr-marker" data-id="' + state + '" data-type="' + position + '" style="display: ' + (self.browser.safari ? "none" : "inline-block") + '; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>", self.doc)[0];
    }
    /**
     * @param {Object} obj
     * @param {boolean} value
     * @param {string} doc
     * @return {?}
     */
    function update(obj, value, doc) {
      var el;
      var nodes;
      var node;
      try {
        var range = obj.cloneRange();
        if (range.collapse(value), range.insertNode(init(value, doc)), true === value) {
          el = self.$el.find('span.fr-marker[data-type="true"][data-id="' + doc + '"]').get(0);
          node = el.nextSibling;
          for (;node && (node.nodeType === Node.TEXT_NODE && 0 === node.textContent.length);) {
            $(node).remove();
            node = el.nextSibling;
          }
        }
        if (true === value && !obj.collapsed) {
          for (;!self.node.isElement(el.parentNode) && !node;) {
            $(el.parentNode).after(el);
            node = el.nextSibling;
          }
          if (node && (node.nodeType === Node.ELEMENT_NODE && self.node.isBlock(node))) {
            /** @type {Array} */
            nodes = [node];
            do {
              node = nodes[0];
              nodes = self.node.contents(node);
            } while (nodes[0] && self.node.isBlock(nodes[0]));
            $(node).prepend($(el));
          }
        }
        if (false === value && !obj.collapsed) {
          if (el = self.$el.find('span.fr-marker[data-type="false"][data-id="' + doc + '"]').get(0), (node = el.previousSibling) && (node.nodeType === Node.ELEMENT_NODE && self.node.isBlock(node))) {
            /** @type {Array} */
            nodes = [node];
            do {
              node = nodes[nodes.length - 1];
              nodes = self.node.contents(node);
            } while (nodes[nodes.length - 1] && self.node.isBlock(nodes[nodes.length - 1]));
            $(node).append($(el));
          }
          if (el.parentNode) {
            if (["TD", "TH"].indexOf(el.parentNode.tagName) >= 0) {
              if (el.parentNode.previousSibling) {
                if (!el.previousSibling) {
                  $(el.parentNode.previousSibling).append(el);
                }
              }
            }
          }
        }
        var testElement = self.$el.find('span.fr-marker[data-type="' + value + '"][data-id="' + doc + '"]').get(0);
        return testElement && (testElement.style.display = "none"), testElement;
      } catch (l) {
        return null;
      }
    }
    /**
     * @return {?}
     */
    function parse() {
      if (!self.$wp) {
        return null;
      }
      try {
        var range = self.selection.ranges(0);
        var sel = range.commonAncestorContainer;
        if (sel != self.el && 0 === self.$el.find(sel).length) {
          return null;
        }
        var clone1 = range.cloneRange();
        var r2 = range.cloneRange();
        clone1.collapse(true);
        var child = $('<span class="fr-marker" style="display: none; line-height: 0;">' + $.FE.INVISIBLE_SPACE + "</span>", self.doc)[0];
        if (clone1.insertNode(child), child = self.$el.find("span.fr-marker").get(0)) {
          var node = child.nextSibling;
          for (;node && (node.nodeType === Node.TEXT_NODE && 0 === node.textContent.length);) {
            $(node).remove();
            node = self.$el.find("span.fr-marker").get(0).nextSibling;
          }
          return self.selection.clear(), self.selection.get().addRange(r2), child;
        }
        return null;
      } catch (i) {
      }
    }
    /**
     * @return {?}
     */
    function load() {
      if (!self.selection.isCollapsed()) {
        self.selection.remove();
      }
      var element = self.$el.find(".fr-marker").get(0);
      if (null == element && (element = parse()), null == element) {
        return null;
      }
      var node = self.node.deepestParent(element);
      if (node || (node = self.node.blockParent(element)) && ("LI" != node.tagName && (node = null)), node) {
        if (self.node.isBlock(node) && self.node.isEmpty(node)) {
          if ("LI" != node.tagName || (node.parentNode.firstElementChild != node || self.node.isEmpty(node.parentNode))) {
            $(node).replaceWith('<span class="fr-marker"></span>');
          } else {
            $(node).append('<span class="fr-marker"></span>');
          }
        } else {
          if (self.cursor.isAtStart(element, node)) {
            $(node).before('<span class="fr-marker"></span>');
            $(element).remove();
          } else {
            if (self.cursor.isAtEnd(element, node)) {
              $(node).after('<span class="fr-marker"></span>');
              $(element).remove();
            } else {
              var cur = element;
              /** @type {string} */
              var fullName = "";
              /** @type {string} */
              var version = "";
              do {
                cur = cur.parentNode;
                fullName += self.node.closeTagString(cur);
                version = self.node.openTagString(cur) + version;
              } while (cur != node);
              $(element).replaceWith('<span id="fr-break"></span>');
              var text = self.node.openTagString(node) + $(node).html() + self.node.closeTagString(node);
              text = text.replace(/<span id="fr-break"><\/span>/g, fullName + '<span class="fr-marker"></span>' + version);
              $(node).replaceWith(text);
            }
          }
        }
      }
      return self.$el.find(".fr-marker").get(0);
    }
    /**
     * @param {Object} e
     * @return {?}
     */
    function select(e) {
      var x = e.clientX;
      var y = e.clientY;
      removeClass();
      var ref;
      /** @type {null} */
      var range = null;
      if (void 0 !== self.doc.caretPositionFromPoint ? (ref = self.doc.caretPositionFromPoint(x, y), range = self.doc.createRange(), range.setStart(ref.offsetNode, ref.offset), range.setEnd(ref.offsetNode, ref.offset)) : void 0 !== self.doc.caretRangeFromPoint && (ref = self.doc.caretRangeFromPoint(x, y), range = self.doc.createRange(), range.setStart(ref.startContainer, ref.startOffset), range.setEnd(ref.startContainer, ref.startOffset)), null !== range && void 0 !== self.win.getSelection) {
        var selection = self.win.getSelection();
        selection.removeAllRanges();
        selection.addRange(range);
      } else {
        if (void 0 !== self.doc.body.createTextRange) {
          try {
            range = self.doc.body.createTextRange();
            range.moveToPoint(x, y);
            var rangeEnd = range.duplicate();
            rangeEnd.moveToPoint(x, y);
            range.setEndPoint("EndToEnd", rangeEnd);
            range.select();
          } catch (k) {
            return false;
          }
        }
      }
      parse();
    }
    /**
     * @return {undefined}
     */
    function removeClass() {
      self.$el.find(".fr-marker").remove();
    }
    return{
      /** @type {function (Object, boolean, string): ?} */
      place : update,
      /** @type {function (): ?} */
      insert : parse,
      /** @type {function (): ?} */
      split : load,
      /** @type {function (Object): ?} */
      insertAtPoint : select,
      /** @type {function (): undefined} */
      remove : removeClass
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.selection = function(self) {
    /**
     * @return {?}
     */
    function insert() {
      /** @type {string} */
      var text = "";
      return self.win.getSelection ? text = self.win.getSelection() : self.doc.getSelection ? text = self.doc.getSelection() : self.doc.selection && (text = self.doc.selection.createRange().text), text.toString();
    }
    /**
     * @return {?}
     */
    function get() {
      return self.win.getSelection ? self.win.getSelection() : self.doc.getSelection ? self.doc.getSelection() : self.doc.selection.createRange();
    }
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @return {?}
     */
    function check(mayParseLabeledStatementInstead) {
      var selection = get();
      /** @type {Array} */
      var colNames = [];
      if (selection && (selection.getRangeAt && selection.rangeCount)) {
        /** @type {Array} */
        colNames = [];
        /** @type {number} */
        var i = 0;
        for (;i < selection.rangeCount;i++) {
          colNames.push(selection.getRangeAt(i));
        }
      } else {
        /** @type {Array} */
        colNames = self.doc.createRange ? [self.doc.createRange()] : [];
      }
      return void 0 !== mayParseLabeledStatementInstead ? colNames[mayParseLabeledStatementInstead] : colNames;
    }
    /**
     * @return {undefined}
     */
    function render() {
      var selection = get();
      try {
        if (selection.removeAllRanges) {
          selection.removeAllRanges();
        } else {
          if (selection.empty) {
            selection.empty();
          } else {
            if (selection.clear) {
              selection.clear();
            }
          }
        }
      } catch (b) {
      }
    }
    /**
     * @return {?}
     */
    function walk() {
      var selection = get();
      try {
        if (selection.rangeCount) {
          var parent;
          var range = check(0);
          var node = range.startContainer;
          if (node.nodeType == Node.TEXT_NODE && (range.startOffset == (node.textContent || "").length && (node.nextSibling && (node = node.nextSibling))), node.nodeType == Node.ELEMENT_NODE) {
            /** @type {boolean} */
            var j = false;
            if (node.childNodes.length > 0 && node.childNodes[range.startOffset]) {
              parent = node.childNodes[range.startOffset];
              for (;parent && (parent.nodeType == Node.TEXT_NODE && 0 === parent.textContent.length);) {
                parent = parent.nextSibling;
              }
              if (parent && (parent.textContent.replace(/\u200B/g, "") === insert().replace(/\u200B/g, "") && (node = parent, j = true)), !j && (node.childNodes.length > 1 && (range.startOffset > 0 && node.childNodes[range.startOffset - 1]))) {
                parent = node.childNodes[range.startOffset - 1];
                for (;parent && (parent.nodeType == Node.TEXT_NODE && 0 === parent.textContent.length);) {
                  parent = parent.nextSibling;
                }
                if (parent) {
                  if (parent.textContent.replace(/\u200B/g, "") === insert().replace(/\u200B/g, "")) {
                    node = parent;
                    /** @type {boolean} */
                    j = true;
                  }
                }
              }
            } else {
              if (!range.collapsed) {
                if (node.nextSibling) {
                  if (node.nextSibling.nodeType == Node.ELEMENT_NODE) {
                    if (parent = node.nextSibling) {
                      if (parent.textContent.replace(/\u200B/g, "") === insert().replace(/\u200B/g, "")) {
                        node = parent;
                        /** @type {boolean} */
                        j = true;
                      }
                    }
                  }
                }
              }
            }
            if (!j) {
              if (node.childNodes.length > 0) {
                if ($(node.childNodes[0]).text().replace(/\u200B/g, "") === insert().replace(/\u200B/g, "")) {
                  if (["BR", "IMG", "HR"].indexOf(node.childNodes[0].tagName) < 0) {
                    node = node.childNodes[0];
                  }
                }
              }
            }
          }
          for (;node.nodeType != Node.ELEMENT_NODE && node.parentNode;) {
            node = node.parentNode;
          }
          var p = node;
          for (;p && "HTML" != p.tagName;) {
            if (p == self.el) {
              return node;
            }
            p = $(p).parent()[0];
          }
        }
      } catch (l) {
      }
      return self.el;
    }
    /**
     * @return {?}
     */
    function set() {
      var selection = get();
      try {
        if (selection.rangeCount) {
          var li;
          var obj = check(0);
          var node = obj.endContainer;
          if (node.nodeType == Node.ELEMENT_NODE) {
            /** @type {boolean} */
            var j = false;
            if (node.childNodes.length > 0 && (node.childNodes[obj.endOffset] && $(node.childNodes[obj.endOffset]).text() === insert())) {
              node = node.childNodes[obj.endOffset];
              /** @type {boolean} */
              j = true;
            } else {
              if (!obj.collapsed && (node.previousSibling && node.previousSibling.nodeType == Node.ELEMENT_NODE)) {
                if (li = node.previousSibling) {
                  if (li.textContent.replace(/\u200B/g, "") === insert().replace(/\u200B/g, "")) {
                    node = li;
                    /** @type {boolean} */
                    j = true;
                  }
                }
              } else {
                if (!obj.collapsed) {
                  if (node.childNodes.length > 0) {
                    if (node.childNodes[obj.endOffset]) {
                      li = node.childNodes[obj.endOffset].previousSibling;
                      if (li.nodeType == Node.ELEMENT_NODE) {
                        if (li) {
                          if (li.textContent.replace(/\u200B/g, "") === insert().replace(/\u200B/g, "")) {
                            node = li;
                            /** @type {boolean} */
                            j = true;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (!j) {
              if (node.childNodes.length > 0) {
                if ($(node.childNodes[node.childNodes.length - 1]).text() === insert()) {
                  if (["BR", "IMG", "HR"].indexOf(node.childNodes[node.childNodes.length - 1].tagName) < 0) {
                    node = node.childNodes[node.childNodes.length - 1];
                  }
                }
              }
            }
          }
          if (node.nodeType == Node.TEXT_NODE) {
            if (0 === obj.endOffset) {
              if (node.previousSibling) {
                if (node.previousSibling.nodeType == Node.ELEMENT_NODE) {
                  node = node.previousSibling;
                }
              }
            }
          }
          for (;node.nodeType != Node.ELEMENT_NODE && node.parentNode;) {
            node = node.parentNode;
          }
          var p = node;
          for (;p && "HTML" != p.tagName;) {
            if (p == self.el) {
              return node;
            }
            p = $(p).parent()[0];
          }
        }
      } catch (l) {
      }
      return self.el;
    }
    /**
     * @param {?} any
     * @param {?} offset
     * @return {?}
     */
    function innerNode(any, offset) {
      var node = any;
      return node.nodeType == Node.ELEMENT_NODE && (node.childNodes.length > 0 && (node.childNodes[offset] && (node = node.childNodes[offset]))), node.nodeType == Node.TEXT_NODE && (node = node.parentNode), node;
    }
    /**
     * @return {?}
     */
    function remove() {
      var i;
      /** @type {Array} */
      var arr = [];
      var selection = get();
      if (rm() && selection.rangeCount) {
        var codeSegments = check();
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          var el;
          var range = codeSegments[i];
          var block = innerNode(range.startContainer, range.startOffset);
          var item = innerNode(range.endContainer, range.endOffset);
          if (self.node.isBlock(block)) {
            if (arr.indexOf(block) < 0) {
              arr.push(block);
            }
          }
          el = self.node.blockParent(block);
          if (el) {
            if (arr.indexOf(el) < 0) {
              arr.push(el);
            }
          }
          /** @type {Array} */
          var ancestors = [];
          var node = block;
          for (;node !== item && node !== self.el;) {
            if (ancestors.indexOf(node) < 0 && (node.children && node.children.length)) {
              ancestors.push(node);
              node = node.children[0];
            } else {
              if (node.nextSibling) {
                node = node.nextSibling;
              } else {
                if (node.parentNode) {
                  node = node.parentNode;
                  ancestors.push(node);
                }
              }
            }
            if (self.node.isBlock(node)) {
              if (ancestors.indexOf(node) < 0) {
                if (arr.indexOf(node) < 0) {
                  if (node !== item || range.endOffset > 0) {
                    arr.push(node);
                  }
                }
              }
            }
          }
          if (self.node.isBlock(item)) {
            if (arr.indexOf(item) < 0) {
              if (range.endOffset > 0) {
                arr.push(item);
              }
            }
          }
          el = self.node.blockParent(item);
          if (el) {
            if (arr.indexOf(el) < 0) {
              arr.push(el);
            }
          }
        }
      }
      /** @type {number} */
      i = arr.length - 1;
      for (;i > 0;i--) {
        if ($(arr[i]).find(arr).length) {
          if ("LI" != arr[i].tagName || arr[i].children.length > 0 && arr.indexOf(arr[i].children[0]) >= 0) {
            arr.splice(i, 1);
          }
        }
      }
      return arr;
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.$wp) {
        self.markers.remove();
        var range;
        var i;
        var codeSegments = check();
        /** @type {Array} */
        var ranges = [];
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          if (codeSegments[i].startContainer !== self.doc || self.browser.msie) {
            range = codeSegments[i];
            var collapsed = range.collapsed;
            var start = self.markers.place(range, true, i);
            var end = self.markers.place(range, false, i);
            if (!(void 0 !== start && start)) {
              if (!!collapsed) {
                $(".fr-marker").remove();
                self.selection.setAtEnd(self.el);
              }
            }
            self.el.normalize();
            if (self.browser.safari) {
              if (!collapsed) {
                range = self.doc.createRange();
                range.setStartAfter(start);
                range.setEndBefore(end);
                ranges.push(range);
              }
            }
          }
        }
        if (self.browser.safari && ranges.length) {
          self.selection.clear();
          /** @type {number} */
          i = 0;
          for (;i < ranges.length;i++) {
            self.selection.get().addRange(ranges[i]);
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function initialize() {
      var i;
      var codeSegments = self.el.querySelectorAll('.fr-marker[data-type="true"]');
      if (!self.$wp) {
        return self.markers.remove(), false;
      }
      if (0 === codeSegments.length) {
        return false;
      }
      if (self.browser.msie || self.browser.edge) {
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          /** @type {string} */
          codeSegments[i].style.display = "inline-block";
        }
      }
      if (!self.core.hasFocus()) {
        if (!self.browser.msie) {
          if (!self.browser.webkit) {
            self.$el.focus();
          }
        }
      }
      render();
      var selection = get();
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        var targetNode = $(codeSegments[i]).data("id");
        var elem = codeSegments[i];
        var range = self.doc.createRange();
        var element = self.$el.find('.fr-marker[data-type="false"][data-id="' + targetNode + '"]');
        if (self.browser.msie || self.browser.edge) {
          element.css("display", "inline-block");
        }
        /** @type {null} */
        var $child = null;
        if (element.length > 0) {
          element = element[0];
          try {
            var target;
            /** @type {boolean} */
            var o = false;
            var parent = elem.nextSibling;
            for (;parent && (parent.nodeType == Node.TEXT_NODE && 0 === parent.textContent.length);) {
              target = parent;
              parent = parent.nextSibling;
              $(target).remove();
            }
            var child = element.nextSibling;
            for (;child && (child.nodeType == Node.TEXT_NODE && 0 === child.textContent.length);) {
              target = child;
              child = child.nextSibling;
              $(target).remove();
            }
            if (elem.nextSibling == element || element.nextSibling == elem) {
              var dom = elem.nextSibling == element ? elem : element;
              var container = dom == elem ? element : elem;
              var node = dom.previousSibling;
              for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.length);) {
                target = node;
                node = node.previousSibling;
                $(target).remove();
              }
              if (node && node.nodeType == Node.TEXT_NODE) {
                for (;node && (node.previousSibling && node.previousSibling.nodeType == Node.TEXT_NODE);) {
                  node.previousSibling.textContent = node.previousSibling.textContent + node.textContent;
                  node = node.previousSibling;
                  $(node.nextSibling).remove();
                }
              }
              var el = container.nextSibling;
              for (;el && (el.nodeType == Node.TEXT_NODE && 0 === el.length);) {
                target = el;
                el = el.nextSibling;
                $(target).remove();
              }
              if (el && el.nodeType == Node.TEXT_NODE) {
                for (;el && (el.nextSibling && el.nextSibling.nodeType == Node.TEXT_NODE);) {
                  el.nextSibling.textContent = el.textContent + el.nextSibling.textContent;
                  el = el.nextSibling;
                  $(el.previousSibling).remove();
                }
              }
              if (node && ((self.node.isVoid(node) || self.node.isBlock(node)) && (node = null)), el && ((self.node.isVoid(el) || self.node.isBlock(el)) && (el = null)), node && (el && (node.nodeType == Node.TEXT_NODE && el.nodeType == Node.TEXT_NODE))) {
                $(elem).remove();
                $(element).remove();
                var endIndex = node.textContent.length;
                node.textContent = node.textContent + el.textContent;
                $(el).remove();
                self.spaces.normalize(node);
                range.setStart(node, endIndex);
                range.setEnd(node, endIndex);
                /** @type {boolean} */
                o = true;
              } else {
                if (!node && (el && el.nodeType == Node.TEXT_NODE)) {
                  $(elem).remove();
                  $(element).remove();
                  self.spaces.normalize(el);
                  $child = $(self.doc.createTextNode("\u200b"));
                  $(el).before($child);
                  range.setStart(el, 0);
                  range.setEnd(el, 0);
                  /** @type {boolean} */
                  o = true;
                } else {
                  if (!el) {
                    if (node) {
                      if (node.nodeType == Node.TEXT_NODE) {
                        $(elem).remove();
                        $(element).remove();
                        self.spaces.normalize(node);
                        $child = $(self.doc.createTextNode("\u200b"));
                        $(node).after($child);
                        range.setStart(node, node.textContent.length);
                        range.setEnd(node, node.textContent.length);
                        /** @type {boolean} */
                        o = true;
                      }
                    }
                  }
                }
              }
            }
            if (!o) {
              var val;
              var update;
              if ((self.browser.chrome || self.browser.edge) && elem.nextSibling == element) {
                val = getText(element, range, true) || range.setStartAfter(element);
                update = getText(elem, range, false) || range.setEndBefore(elem);
              } else {
                if (elem.previousSibling == element) {
                  elem = element;
                  element = elem.nextSibling;
                }
                if (!(element.nextSibling && "BR" === element.nextSibling.tagName)) {
                  if (!(!element.nextSibling && self.node.isBlock(elem.previousSibling))) {
                    if (!(elem.previousSibling && "BR" == elem.previousSibling.tagName)) {
                      /** @type {string} */
                      elem.style.display = "inline";
                      /** @type {string} */
                      element.style.display = "inline";
                      $child = $(self.doc.createTextNode("\u200b"));
                    }
                  }
                }
                val = getText(elem, range, true) || $(elem).before($child) && range.setStartBefore(elem);
                update = getText(element, range, false) || $(element).after($child) && range.setEndAfter(element);
              }
              if ("function" == typeof val) {
                val();
              }
              if ("function" == typeof update) {
                update();
              }
            }
          } catch (y) {
          }
        }
        if ($child) {
          $child.remove();
        }
        try {
          selection.addRange(range);
        } catch (y) {
        }
      }
      self.markers.remove();
    }
    /**
     * @param {Node} el
     * @param {?} range
     * @param {boolean} recurring
     * @return {?}
     */
    function getText(el, range, recurring) {
      var endIndex;
      var container = el.previousSibling;
      var node = el.nextSibling;
      return container && (node && (container.nodeType == Node.TEXT_NODE && node.nodeType == Node.TEXT_NODE)) ? (endIndex = container.textContent.length, recurring ? (node.textContent = container.textContent + node.textContent, $(container).remove(), $(el).remove(), self.spaces.normalize(node), function() {
        range.setStart(node, endIndex);
      }) : (container.textContent = container.textContent + node.textContent, $(node).remove(), $(el).remove(), self.spaces.normalize(container), function() {
        range.setEnd(container, endIndex);
      })) : container && (!node && container.nodeType == Node.TEXT_NODE) ? (endIndex = container.textContent.length, recurring ? (self.spaces.normalize(container), function() {
        range.setStart(container, endIndex);
      }) : (self.spaces.normalize(container), function() {
        range.setEnd(container, endIndex);
      })) : !(!node || (container || node.nodeType != Node.TEXT_NODE)) && (recurring ? (self.spaces.normalize(node), function() {
        range.setStart(node, 0);
      }) : (self.spaces.normalize(node), function() {
        range.setEnd(node, 0);
      }));
    }
    /**
     * @return {?}
     */
    function isWhitespace() {
      return true;
    }
    /**
     * @return {?}
     */
    function expand() {
      var codeSegments = check();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if (!codeSegments[i].collapsed) {
          return false;
        }
      }
      return true;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function getSelection(node) {
      var constraint;
      var rng;
      /** @type {boolean} */
      var atStart = false;
      /** @type {boolean} */
      var atEnd = false;
      if (self.win.getSelection) {
        var sel = self.win.getSelection();
        if (sel.rangeCount) {
          constraint = sel.getRangeAt(0);
          rng = constraint.cloneRange();
          rng.selectNodeContents(node);
          rng.setEnd(constraint.startContainer, constraint.startOffset);
          /** @type {boolean} */
          atStart = "" === rng.toString();
          rng.selectNodeContents(node);
          rng.setStart(constraint.endContainer, constraint.endOffset);
          /** @type {boolean} */
          atEnd = "" === rng.toString();
        }
      } else {
        if (self.doc.selection) {
          if ("Control" != self.doc.selection.type) {
            constraint = self.doc.selection.createRange();
            rng = constraint.duplicate();
            rng.moveToElementText(node);
            rng.setEndPoint("EndToStart", constraint);
            /** @type {boolean} */
            atStart = "" === rng.text;
            rng.moveToElementText(node);
            rng.setEndPoint("StartToEnd", constraint);
            /** @type {boolean} */
            atEnd = "" === rng.text;
          }
        }
      }
      return{
        atStart : atStart,
        atEnd : atEnd
      };
    }
    /**
     * @return {?}
     */
    function start() {
      if (expand()) {
        return false;
      }
      self.$el.find("td, th, img, br:not(:last)").prepend('<span class="fr-mk">' + $.FE.INVISIBLE_SPACE + "</span>");
      /** @type {boolean} */
      var atEnd = false;
      var br = getSelection(self.el);
      return br.atStart && (br.atEnd && (atEnd = true)), self.$el.find(".fr-mk").remove(), atEnd;
    }
    /**
     * @param {Node} node
     * @param {boolean} var_args
     * @return {undefined}
     */
    function create(node, var_args) {
      if (void 0 === var_args) {
        /** @type {boolean} */
        var_args = true;
      }
      var vals = $(node).html();
      if (vals) {
        if (vals.replace(/\u200b/g, "").length != vals.length) {
          $(node).html(vals.replace(/\u200b/g, ""));
        }
      }
      var nodes = self.node.contents(node);
      /** @type {number} */
      var i = 0;
      for (;i < nodes.length;i++) {
        if (nodes[i].nodeType != Node.ELEMENT_NODE) {
          $(nodes[i]).remove();
        } else {
          create(nodes[i], 0 === i);
          if (0 === i) {
            /** @type {boolean} */
            var_args = false;
          }
        }
      }
      if (node.nodeType == Node.TEXT_NODE) {
        $(node).replaceWith('<span data-first="true" data-text="true"></span>');
      } else {
        if (var_args) {
          $(node).attr("data-first", true);
        }
      }
    }
    /**
     * @return {?}
     */
    function selector() {
      return 0 === $(this).find("fr-inner").length;
    }
    /**
     * @param {HTMLElement} step
     * @param {number} handler
     * @return {?}
     */
    function bind(step, handler) {
      var codeSegments = self.node.contents(step.get(0));
      if (["TD", "TH"].indexOf(step.get(0).tagName) >= 0) {
        if (1 == step.find(".fr-marker").length) {
          if (self.node.hasClass(codeSegments[0], "fr-marker")) {
            step.attr("data-del-cell", true);
          }
        }
      }
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var element = codeSegments[i];
        if (self.node.hasClass(element, "fr-marker")) {
          /** @type {number} */
          handler = (handler + 1) % 2;
        } else {
          if (handler) {
            if ($(element).find(".fr-marker").length > 0) {
              handler = bind($(element), handler);
            } else {
              if (["TD", "TH"].indexOf(element.tagName) < 0 && !self.node.hasClass(element, "fr-inner")) {
                if (!self.opts.keepFormatOnDelete || self.$el.find("[data-first]").length > 0) {
                  $(element).remove();
                } else {
                  create(element);
                }
              } else {
                if (self.node.hasClass(element, "fr-inner")) {
                  if (0 === $(element).find(".fr-inner").length) {
                    $(element).html("<br>");
                  } else {
                    $(element).find(".fr-inner").filter(selector).html("<br>");
                  }
                } else {
                  $(element).empty();
                  $(element).attr("data-del-cell", true);
                }
              }
            }
          } else {
            if ($(element).find(".fr-marker").length > 0) {
              handler = bind($(element), handler);
            }
          }
        }
      }
      return handler;
    }
    /**
     * @return {?}
     */
    function rm() {
      try {
        if (!self.$wp) {
          return false;
        }
        var r = check(0);
        var node = r.commonAncestorContainer;
        for (;node && !self.node.isElement(node);) {
          node = node.parentNode;
        }
        return!!self.node.isElement(node);
      } catch (d) {
        return false;
      }
    }
    /**
     * @return {?}
     */
    function parse() {
      if (expand()) {
        return true;
      }
      var i;
      init();
      /**
       * @param {Element} target
       * @return {?}
       */
      var clone = function(target) {
        var node = target.previousSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length);) {
          var next = node;
          node = node.previousSibling;
          $(next).remove();
        }
        return node;
      };
      /**
       * @param {(Array|Element)} parent
       * @return {?}
       */
      var parse = function(parent) {
        var node = parent.nextSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length);) {
          var next = node;
          node = node.nextSibling;
          $(next).remove();
        }
        return node;
      };
      var codeSegments = self.$el.find('.fr-marker[data-type="true"]');
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        var e = codeSegments[i];
        for (;!(clone(e) || (self.node.isBlock(e.parentNode) || (self.$el.is(e.parentNode) || self.node.hasClass(e.parentNode, "fr-inner"))));) {
          $(e.parentNode).before(e);
        }
      }
      var resultItems = self.$el.find('.fr-marker[data-type="false"]');
      /** @type {number} */
      i = 0;
      for (;i < resultItems.length;i++) {
        var item = resultItems[i];
        for (;!(parse(item) || (self.node.isBlock(item.parentNode) || (self.$el.is(item.parentNode) || self.node.hasClass(item.parentNode, "fr-inner"))));) {
          $(item.parentNode).after(item);
        }
        if (item.parentNode) {
          if (self.node.isBlock(item.parentNode)) {
            if (self.node.isEmpty(item.parentNode)) {
              if (!self.$el.is(item.parentNode)) {
                if (!self.node.hasClass(item.parentNode, "fr-inner")) {
                  if (self.opts.keepFormatOnDelete) {
                    $(item.parentNode).after(item);
                  }
                }
              }
            }
          }
        }
      }
      if (isWhitespace()) {
        bind(self.$el, 0);
        var $content = self.$el.find('[data-first="true"]');
        if ($content.length) {
          self.$el.find(".fr-marker").remove();
          $content.append($.FE.INVISIBLE_SPACE + $.FE.MARKERS).removeAttr("data-first");
          if ($content.attr("data-text")) {
            $content.replaceWith($content.html());
          }
        } else {
          self.$el.find("table").filter(function() {
            return $(this).find("[data-del-cell]").length > 0 && $(this).find("[data-del-cell]").length == $(this).find("td, th").length;
          }).remove();
          self.$el.find("[data-del-cell]").removeAttr("data-del-cell");
          codeSegments = self.$el.find('.fr-marker[data-type="true"]');
          /** @type {number} */
          i = 0;
          for (;i < codeSegments.length;i++) {
            var element = codeSegments[i];
            var node = element.nextSibling;
            var root = self.$el.find('.fr-marker[data-type="false"][data-id="' + $(element).data("id") + '"]').get(0);
            if (root) {
              if (element && (!node || node != root)) {
                var target = self.node.blockParent(element);
                var el = self.node.blockParent(root);
                /** @type {boolean} */
                var u = false;
                /** @type {boolean} */
                var v = false;
                if (target && (["UL", "OL"].indexOf(target.tagName) >= 0 && (target = null, u = true)), el && (["UL", "OL"].indexOf(el.tagName) >= 0 && (el = null, v = true)), $(element).after(root), target != el) {
                  if (null != target || u) {
                    if (null != el || (v || 0 !== $(target).parentsUntil(self.$el, "table").length)) {
                      if (target) {
                        if (el) {
                          if (0 === $(target).parentsUntil(self.$el, "table").length) {
                            if (0 === $(el).parentsUntil(self.$el, "table").length) {
                              if (0 === $(target).find(el).length) {
                                if (0 === $(el).find(target).length) {
                                  $(target).append($(el).html());
                                  $(el).remove();
                                }
                              }
                            }
                          }
                        }
                      }
                    } else {
                      node = target;
                      for (;!node.nextSibling && node.parentNode != self.el;) {
                        node = node.parentNode;
                      }
                      node = node.nextSibling;
                      for (;node && "BR" != node.tagName;) {
                        var nextNode = node.nextSibling;
                        $(target).append(node);
                        node = nextNode;
                      }
                      if (node) {
                        if ("BR" == node.tagName) {
                          $(node).remove();
                        }
                      }
                    }
                  } else {
                    var html = self.node.deepestParent(element);
                    if (html) {
                      $(html).after($(el).html());
                      $(el).remove();
                    } else {
                      if (0 === $(el).parentsUntil(self.$el, "table").length) {
                        $(element).next().after($(el).html());
                        $(el).remove();
                      }
                    }
                  }
                }
              }
            } else {
              root = $(element).clone().attr("data-type", false);
              $(element).after(root);
            }
          }
        }
      }
      if (!self.opts.keepFormatOnDelete) {
        self.html.fillEmptyBlocks();
      }
      self.html.cleanEmptyTags(true);
      self.clean.lists();
      self.spaces.normalize();
      var elem = self.$el.find(".fr-marker:last").get(0);
      var startNode = self.$el.find(".fr-marker:first").get(0);
      if (void 0 !== elem) {
        if (void 0 !== startNode) {
          if (!elem.nextSibling) {
            if (startNode.previousSibling) {
              if ("BR" == startNode.previousSibling.tagName) {
                if (self.node.isElement(elem.parentNode)) {
                  if (self.node.isElement(startNode.parentNode)) {
                    self.$el.append("<br>");
                  }
                }
              }
            }
          }
        }
      }
      initialize();
    }
    /**
     * @param {Function} node
     * @param {Function} str
     * @return {?}
     */
    function isEmpty(node, str) {
      if (!node || node.getElementsByClassName("fr-marker").length > 0) {
        return false;
      }
      var child = node.firstChild;
      for (;child && (self.node.isBlock(child) || str && (!self.node.isVoid(child) && child.nodeType == Node.ELEMENT_NODE));) {
        node = child;
        child = child.firstChild;
      }
      node.innerHTML = $.FE.MARKERS + node.innerHTML;
    }
    /**
     * @param {HTMLElement} root
     * @param {HTMLElement} textStatus
     * @return {?}
     */
    function success(root, textStatus) {
      if (!root || root.getElementsByClassName("fr-marker").length > 0) {
        return false;
      }
      var node = root.lastChild;
      for (;node && (self.node.isBlock(node) || textStatus && (!self.node.isVoid(node) && node.nodeType == Node.ELEMENT_NODE));) {
        root = node;
        node = node.lastChild;
      }
      var span = self.doc.createElement("SPAN");
      span.setAttribute("id", "fr-sel-markers");
      span.innerHTML = $.FE.MARKERS;
      root.appendChild(span);
      var wrapper = root.querySelector("#fr-sel-markers");
      wrapper.outerHTML = wrapper.innerHTML;
    }
    /**
     * @param {Object} element
     * @param {boolean} recurring
     * @return {?}
     */
    function process(element, recurring) {
      if (void 0 === recurring) {
        /** @type {boolean} */
        recurring = true;
      }
      var node = element.previousSibling;
      for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length);) {
        node = node.previousSibling;
      }
      return node ? (self.node.isBlock(node) ? success(node) : "BR" == node.tagName ? $(node).before($.FE.MARKERS) : $(node).after($.FE.MARKERS), true) : !!recurring && (self.node.isBlock(element) ? isEmpty(element) : $(element).before($.FE.MARKERS), true);
    }
    /**
     * @param {Node} child
     * @param {boolean} recurring
     * @return {?}
     */
    function traverse(child, recurring) {
      if (void 0 === recurring) {
        /** @type {boolean} */
        recurring = true;
      }
      var node = child.nextSibling;
      for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length);) {
        node = node.nextSibling;
      }
      return node ? (self.node.isBlock(node) ? isEmpty(node) : $(node).before($.FE.MARKERS), true) : !!recurring && (self.node.isBlock(child) ? success(child) : $(child).after($.FE.MARKERS), true);
    }
    return{
      /** @type {function (): ?} */
      text : insert,
      /** @type {function (): ?} */
      get : get,
      /** @type {function (number): ?} */
      ranges : check,
      /** @type {function (): undefined} */
      clear : render,
      /** @type {function (): ?} */
      element : walk,
      /** @type {function (): ?} */
      endElement : set,
      /** @type {function (): undefined} */
      save : init,
      /** @type {function (): ?} */
      restore : initialize,
      /** @type {function (): ?} */
      isCollapsed : expand,
      /** @type {function (): ?} */
      isFull : start,
      /** @type {function (): ?} */
      inEditor : rm,
      /** @type {function (): ?} */
      remove : parse,
      /** @type {function (): ?} */
      blocks : remove,
      /** @type {function (?): ?} */
      info : getSelection,
      /** @type {function (HTMLElement, HTMLElement): ?} */
      setAtEnd : success,
      /** @type {function (Function, Function): ?} */
      setAtStart : isEmpty,
      /** @type {function (Object, boolean): ?} */
      setBefore : process,
      /** @type {function (Node, boolean): ?} */
      setAfter : traverse,
      /** @type {function (?, ?): ?} */
      rangeElement : innerNode
    };
  };
  $.extend($.FE.DEFAULTS, {
    htmlAllowedTags : ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map",
    "mark", "menu", "menuitem", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "queue", "rp", "rt", "ruby", "s", "samp", "script", "style", "section", "select", "small", "source", "span", "strike", "strong", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "var", "video", "wbr"],
    htmlRemoveTags : ["script", "style"],
    htmlAllowedAttrs : ["accept", "accept-charset", "accesskey", "action", "align", "allowfullscreen", "allowtransparency", "alt", "async", "autocomplete", "autofocus", "autoplay", "autosave", "background", "bgcolor", "border", "charset", "cellpadding", "cellspacing", "checked", "cite", "class", "color", "cols", "colspan", "content", "contenteditable", "contextmenu", "controls", "coords", "data", "data-.*", "datetime", "default", "defer", "dir", "dirname", "disabled", "download", "draggable", "dropzone",
    "enctype", "for", "form", "formaction", "frameborder", "headers", "height", "hidden", "high", "href", "hreflang", "http-equiv", "icon", "id", "ismap", "itemprop", "keytype", "kind", "label", "lang", "language", "list", "loop", "low", "max", "maxlength", "media", "method", "min", "mozallowfullscreen", "multiple", "muted", "name", "novalidate", "open", "optimum", "pattern", "ping", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "reversed",
    "rows", "rowspan", "sandbox", "scope", "scoped", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "src", "srcdoc", "srclang", "srcset", "start", "step", "summary", "spellcheck", "style", "tabindex", "target", "title", "type", "translate", "usemap", "value", "valign", "webkitallowfullscreen", "width", "wrap"],
    htmlAllowedStyleProps : [".*"],
    htmlAllowComments : true,
    htmlUntouched : false,
    fullPage : false
  });
  $.FE.HTML5Map = {
    B : "STRONG",
    I : "EM",
    STRIKE : "S"
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.clean = function(self) {
    /**
     * @param {Node} node
     * @return {?}
     */
    function next(node) {
      if (node.nodeType == Node.ELEMENT_NODE && (node.getAttribute("class") && node.getAttribute("class").indexOf("fr-marker") >= 0)) {
        return false;
      }
      var i;
      var nodes = self.node.contents(node);
      /** @type {Array} */
      var codeSegments = [];
      /** @type {number} */
      i = 0;
      for (;i < nodes.length;i++) {
        if (nodes[i].nodeType != Node.ELEMENT_NODE || self.node.isVoid(nodes[i])) {
          if (nodes[i].nodeType == Node.TEXT_NODE) {
            nodes[i].textContent = nodes[i].textContent.replace(/\u200b/g, "");
          }
        } else {
          if (nodes[i].textContent.replace(/\u200b/g, "").length != nodes[i].textContent.length) {
            next(nodes[i]);
          }
        }
      }
      if (node.nodeType == Node.ELEMENT_NODE && (!self.node.isVoid(node) && (node.normalize(), nodes = self.node.contents(node), codeSegments = node.querySelectorAll(".fr-marker"), nodes.length - codeSegments.length == 0))) {
        /** @type {number} */
        i = 0;
        for (;i < nodes.length;i++) {
          if ((nodes[i].getAttribute("class") || "").indexOf("fr-marker") < 0) {
            return false;
          }
        }
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          node.parentNode.insertBefore(codeSegments[i].cloneNode(true), node);
        }
        return node.parentNode.removeChild(node), false;
      }
    }
    /**
     * @param {Node} node
     * @param {boolean} ownerDocument
     * @return {?}
     */
    function createElement(node, ownerDocument) {
      if (node.nodeType == Node.COMMENT_NODE) {
        return "\x3c!--" + node.nodeValue + "--\x3e";
      }
      if (node.nodeType == Node.TEXT_NODE) {
        return ownerDocument ? node.textContent.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : node.textContent.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\u00A0/g, "&nbsp;").replace(/\u0009/g, "");
      }
      if (node.nodeType != Node.ELEMENT_NODE) {
        return node.outerHTML;
      }
      if (node.nodeType == Node.ELEMENT_NODE && ["STYLE", "SCRIPT", "NOSCRIPT"].indexOf(node.tagName) >= 0) {
        return node.outerHTML;
      }
      if (node.nodeType == Node.ELEMENT_NODE && "svg" == node.tagName) {
        /** @type {Element} */
        var tmpDiv = document.createElement("div");
        var docFragment = node.cloneNode(true);
        return tmpDiv.appendChild(docFragment), tmpDiv.innerHTML;
      }
      if ("IFRAME" == node.tagName) {
        return node.outerHTML.replace(/\&lt;/g, "<").replace(/\&gt;/g, ">");
      }
      var codeSegments = node.childNodes;
      if (0 === codeSegments.length) {
        return node.outerHTML;
      }
      /** @type {string} */
      var space = "";
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if ("PRE" == node.tagName) {
          /** @type {boolean} */
          ownerDocument = true;
        }
        space += createElement(codeSegments[i], ownerDocument);
      }
      return self.node.openTagString(node) + space + self.node.closeTagString(node);
    }
    /**
     * @param {string} string
     * @return {?}
     */
    function format(string) {
      return matched = [], string = string.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, function(elem) {
        return matched.push(elem), "[FROALA.EDITOR.SCRIPT " + (matched.length - 1) + "]";
      }), string = string.replace(/<noscript\b[^<]*(?:(?!<\/noscript>)<[^<]*)*<\/noscript>/gi, function(elem) {
        return matched.push(elem), "[FROALA.EDITOR.NOSCRIPT " + (matched.length - 1) + "]";
      }), string = string.replace(/<img((?:[\w\W]*?)) src="/g, '<img$1 data-fr-src="');
    }
    /**
     * @param {string} params
     * @return {?}
     */
    function load(params) {
      return params = params.replace(/\[FROALA\.EDITOR\.SCRIPT ([\d]*)\]/gi, function(dataAndEvents, m1) {
        return self.opts.htmlRemoveTags.indexOf("script") >= 0 ? "" : matched[parseInt(m1, 10)];
      }), params = params.replace(/\[FROALA\.EDITOR\.NOSCRIPT ([\d]*)\]/gi, function(dataAndEvents, m1) {
        return self.opts.htmlRemoveTags.indexOf("noscript") >= 0 ? "" : matched[parseInt(m1, 10)].replace(/\&lt;/g, "<").replace(/\&gt;/g, ">");
      }), params = params.replace(/<img((?:[\w\W]*?)) data-fr-src="/g, '<img$1 src="');
    }
    /**
     * @param {string} template
     * @return {?}
     */
    function parse(template) {
      var s = template.replace(/;;/gi, ";");
      return s = s.replace(/^;/gi, ""), ";" != s.charAt(s.length) && (s += ";"), s;
    }
    /**
     * @param {Object} style
     * @return {?}
     */
    function process(style) {
      var id;
      for (id in style) {
        if (style.hasOwnProperty(id)) {
          /** @type {(Array.<string>|null)} */
          var description = id.match(reg);
          /** @type {null} */
          var url = null;
          if ("style" == id) {
            if (self.opts.htmlAllowedStyleProps.length) {
              url = style[id].match(cbreg);
            }
          }
          if (description && url) {
            style[id] = parse(url.join(";"));
          } else {
            if (!(description && ("style" != id || url))) {
              delete style[id];
            }
          }
        }
      }
      /** @type {string} */
      var output = "";
      var codeSegments = Object.keys(style).sort();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        id = codeSegments[i];
        if (style[id].indexOf('"') < 0) {
          output += " " + id + '="' + style[id] + '"';
        } else {
          output += " " + id + "='" + style[id] + "'";
        }
      }
      return output;
    }
    /**
     * @param {string} handler
     * @param {string} filename
     * @param {string} input
     * @return {?}
     */
    function Parser(handler, filename, input) {
      if (self.opts.fullPage) {
        var label = self.html.extractDoctype(input);
        var expected = process(self.html.extractNodeAttrs(input, "html"));
        filename = null == filename ? self.html.extractNode(input, "head") || "<title></title>" : filename;
        return label + "<html" + expected + "><head" + process(self.html.extractNodeAttrs(input, "head")) + ">" + filename + "</head><body" + process(self.html.extractNodeAttrs(input, "body")) + ">" + handler + "</body></html>";
      }
      return handler;
    }
    /**
     * @param {string} arg
     * @param {Function} success
     * @return {?}
     */
    function fn(arg, success) {
      var i;
      var cl = $("<div>" + arg + "</div>");
      /** @type {string} */
      var out = "";
      if (cl) {
        var codeSegments = self.node.contents(cl.get(0));
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          success(codeSegments[i]);
        }
        codeSegments = self.node.contents(cl.get(0));
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          out += createElement(codeSegments[i]);
        }
      }
      return out;
    }
    /**
     * @param {string} string
     * @param {Function} callback
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function add(string, callback, dataAndEvents) {
      string = format(string);
      /** @type {string} */
      var result = string;
      /** @type {null} */
      var path = null;
      return self.opts.fullPage && (result = self.html.extractNode(string, "body") || (string.indexOf("<body") >= 0 ? "" : string), dataAndEvents && (path = self.html.extractNode(string, "head") || "")), result = fn(result, callback), path && (path = fn(path, callback)), load(Parser(result, path, string));
    }
    /**
     * @param {string} text
     * @return {?}
     */
    function create(text) {
      return text.replace(/\u200b/g, "").length == text.length ? text : self.clean.exec(text, next);
    }
    /**
     * @return {undefined}
     */
    function update() {
      var spans = self.el.querySelectorAll(Object.keys($.FE.HTML5Map).join(","));
      if (spans.length) {
        /** @type {boolean} */
        var d = false;
        if (!self.el.querySelector(".fr-marker")) {
          self.selection.save();
          /** @type {boolean} */
          d = true;
        }
        /** @type {number} */
        var i = 0;
        for (;i < spans.length;i++) {
          if ("" === self.node.attributes(spans[i])) {
            $(spans[i]).replaceWith("<" + $.FE.HTML5Map[spans[i].tagName] + ">" + spans[i].innerHTML + "</" + $.FE.HTML5Map[spans[i].tagName] + ">");
          }
        }
        if (d) {
          self.selection.restore();
        }
      }
    }
    /**
     * @param {string} content
     * @return {?}
     */
    function stripHTML(content) {
      var element = self.doc.createElement("DIV");
      return element.innerText = content, element.textContent;
    }
    /**
     * @param {Object} el
     * @return {?}
     */
    function init(el) {
      if ("SPAN" == el.tagName && (el.getAttribute("class") || "").indexOf("fr-marker") >= 0) {
        return false;
      }
      if ("PRE" == el.tagName && hasClass(el), el.nodeType == Node.ELEMENT_NODE && (el.getAttribute("data-fr-src") && (0 !== el.getAttribute("data-fr-src").indexOf("blob:") && el.setAttribute("data-fr-src", self.helpers.sanitizeURL(stripHTML(el.getAttribute("data-fr-src"))))), el.getAttribute("href") && el.setAttribute("href", self.helpers.sanitizeURL(stripHTML(el.getAttribute("href")))), el.getAttribute("src") && el.setAttribute("src", self.helpers.sanitizeURL(stripHTML(el.getAttribute("src")))),
      ["TABLE", "TBODY", "TFOOT", "TR"].indexOf(el.tagName) >= 0 && (el.innerHTML = el.innerHTML.trim())), !self.opts.pasteAllowLocalImages && (el.nodeType == Node.ELEMENT_NODE && ("IMG" == el.tagName && (el.getAttribute("data-fr-src") && 0 === el.getAttribute("data-fr-src").indexOf("file://"))))) {
        return el.parentNode.removeChild(el), false;
      }
      if (el.nodeType == Node.ELEMENT_NODE && ($.FE.HTML5Map[el.tagName] && "" === self.node.attributes(el))) {
        var d = $.FE.HTML5Map[el.tagName];
        /** @type {string} */
        var html = "<" + d + ">" + el.innerHTML + "</" + d + ">";
        el.insertAdjacentHTML("beforebegin", html);
        el = el.previousSibling;
        el.parentNode.removeChild(el.nextSibling);
      }
      if (self.opts.htmlAllowComments || el.nodeType != Node.COMMENT_NODE) {
        if (el.tagName && el.tagName.match(rxNotLatin)) {
          el.parentNode.removeChild(el);
        } else {
          if (el.tagName && !el.tagName.match(_regex)) {
            if ("svg" === el.tagName) {
              el.parentNode.removeChild(el);
            } else {
              if (!(self.browser.safari && ("path" == el.tagName && (el.parentNode && "svg" == el.parentNode.tagName)))) {
                el.outerHTML = el.innerHTML;
              }
            }
          } else {
            var attributes = el.attributes;
            if (attributes) {
              /** @type {number} */
              var i = attributes.length - 1;
              for (;i >= 0;i--) {
                var attribute = attributes[i];
                var description = attribute.nodeName.match(reg);
                /** @type {null} */
                var url = null;
                if ("style" == attribute.nodeName) {
                  if (self.opts.htmlAllowedStyleProps.length) {
                    url = attribute.value.match(cbreg);
                  }
                }
                if (description && url) {
                  attribute.value = parse(url.join(";"));
                } else {
                  if (!(description && ("style" != attribute.nodeName || url))) {
                    el.removeAttribute(attribute.nodeName);
                  }
                }
              }
            }
          }
        }
      } else {
        if (0 !== el.data.indexOf("[FROALA.EDITOR")) {
          el.parentNode.removeChild(el);
        }
      }
    }
    /**
     * @param {Object} node
     * @return {undefined}
     */
    function open(node) {
      var codeSegments = self.node.contents(node);
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if (codeSegments[i].nodeType != Node.TEXT_NODE) {
          open(codeSegments[i]);
        }
      }
      init(node);
    }
    /**
     * @param {Object} o
     * @return {undefined}
     */
    function hasClass(o) {
      var txt = o.innerHTML;
      if (txt.indexOf("\n") >= 0) {
        o.innerHTML = txt.replace(/\n/g, "<br>");
      }
    }
    /**
     * @param {string} arg
     * @param {Array} array
     * @param {Array} data
     * @param {boolean} opt_default
     * @return {?}
     */
    function get(arg, array, data, opt_default) {
      if (void 0 === array) {
        /** @type {Array} */
        array = [];
      }
      if (void 0 === data) {
        /** @type {Array} */
        data = [];
      }
      if (void 0 === opt_default) {
        /** @type {boolean} */
        opt_default = false;
      }
      arg = arg.replace(/<br> */g, "<br>");
      var i;
      var results = $.merge([], self.opts.htmlAllowedTags);
      /** @type {number} */
      i = 0;
      for (;i < array.length;i++) {
        if (results.indexOf(array[i]) >= 0) {
          results.splice(results.indexOf(array[i]), 1);
        }
      }
      var tmp = $.merge([], self.opts.htmlAllowedAttrs);
      /** @type {number} */
      i = 0;
      for (;i < data.length;i++) {
        if (tmp.indexOf(data[i]) >= 0) {
          tmp.splice(tmp.indexOf(data[i]), 1);
        }
      }
      return tmp.push("data-fr-.*"), tmp.push("fr-.*"), _regex = new RegExp("^" + results.join("$|^") + "$", "gi"), reg = new RegExp("^" + tmp.join("$|^") + "$", "gi"), rxNotLatin = new RegExp("^" + self.opts.htmlRemoveTags.join("$|^") + "$", "gi"), cbreg = self.opts.htmlAllowedStyleProps.length ? new RegExp("((^|;|\\s)" + self.opts.htmlAllowedStyleProps.join(":.+?(?=;|$))|((^|;|\\s)") + ":.+?(?=(;)|$))", "gi") : null, arg = add(arg, open, true);
    }
    /**
     * @return {undefined}
     */
    function replaceWith() {
      var codeSegments = self.el.querySelectorAll("tr");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var children = codeSegments[i].children;
        /** @type {boolean} */
        var e = true;
        /** @type {number} */
        var ci = 0;
        for (;ci < children.length;ci++) {
          if ("TH" != children[ci].tagName) {
            /** @type {boolean} */
            e = false;
            break;
          }
        }
        if (false !== e && 0 !== children.length) {
          var element = codeSegments[i];
          for (;element && ("TABLE" != element.tagName && "THEAD" != element.tagName);) {
            element = element.parentNode;
          }
          var template = element;
          if ("THEAD" != template.tagName) {
            template = self.doc.createElement("THEAD");
            element.insertBefore(template, element.firstChild);
          }
          template.appendChild(codeSegments[i]);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function tables() {
      replaceWith();
    }
    /**
     * @return {undefined}
     */
    function processNode() {
      /** @type {Array} */
      var a = [];
      /**
       * @param {Node} element
       * @return {?}
       */
      var processNode = function(element) {
        return!self.node.isList(element.parentNode);
      };
      do {
        if (a.length) {
          var next = a[0];
          var li = self.doc.createElement("ul");
          next.parentNode.insertBefore(li, next);
          do {
            var b = next;
            next = next.nextSibling;
            li.appendChild(b);
          } while (next && "LI" == next.tagName);
        }
        /** @type {Array} */
        a = [];
        var list = self.el.querySelectorAll("li");
        /** @type {number} */
        var i = 0;
        for (;i < list.length;i++) {
          if (processNode(list[i])) {
            a.push(list[i]);
          }
        }
      } while (a.length > 0);
    }
    /**
     * @return {undefined}
     */
    function reset() {
      var codeSegments = self.el.querySelectorAll("ol + ol, ul + ul");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        if (self.node.isList(node.previousSibling) && self.node.openTagString(node) == self.node.openTagString(node.previousSibling)) {
          var subnodes = self.node.contents(node);
          /** @type {number} */
          var iNode = 0;
          for (;iNode < subnodes.length;iNode++) {
            node.previousSibling.appendChild(subnodes[iNode]);
          }
          node.parentNode.removeChild(node);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function destroy() {
      var i;
      var c;
      /**
       * @param {HTMLElement} element
       * @return {undefined}
       */
      var update = function(element) {
        if (!element.querySelector("LI")) {
          /** @type {boolean} */
          c = true;
          element.parentNode.removeChild(element);
        }
      };
      do {
        /** @type {boolean} */
        c = false;
        var codeSegments = self.el.querySelectorAll("li:empty");
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          codeSegments[i].parentNode.removeChild(codeSegments[i]);
        }
        var resultItems = self.el.querySelectorAll("ul, ol");
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          update(resultItems[i]);
        }
      } while (true === c);
    }
    /**
     * @return {undefined}
     */
    function clean() {
      var codeSegments = self.el.querySelectorAll("ul > ul, ol > ol, ul > ol, ol > ul");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        var container = node.previousSibling;
        if (container) {
          if ("LI" == container.tagName) {
            container.appendChild(node);
          } else {
            $(node).wrap("<li></li>");
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function insert() {
      var codeSegments = self.el.querySelectorAll("li > ul, li > ol");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var elem = codeSegments[i];
        if (elem.nextSibling) {
          var cursor = elem.nextSibling;
          var warningLi = $("<li>");
          $(elem.parentNode).after(warningLi);
          do {
            var lineSeparator = cursor;
            cursor = cursor.nextSibling;
            warningLi.append(lineSeparator);
          } while (cursor);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function initialize() {
      var codeSegments = self.el.querySelectorAll("li > ul, li > ol");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        if (self.node.isFirstSibling(node)) {
          $(node).before("<br/>");
        } else {
          if (node.previousSibling && "BR" == node.previousSibling.tagName) {
            var sibling = node.previousSibling.previousSibling;
            for (;sibling && self.node.hasClass(sibling, "fr-marker");) {
              sibling = sibling.previousSibling;
            }
            if (sibling) {
              if ("BR" != sibling.tagName) {
                $(node.previousSibling).remove();
              }
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function step() {
      var codeSegments = self.el.querySelectorAll("li:empty");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        $(codeSegments[i]).remove();
      }
    }
    /**
     * @return {undefined}
     */
    function prepend() {
      var branchDataJSON = self.el.querySelectorAll("ul, ol");
      /** @type {number} */
      var conditionIndex = 0;
      for (;conditionIndex < branchDataJSON.length;conditionIndex++) {
        var childNodes = self.node.contents(branchDataJSON[conditionIndex]);
        /** @type {null} */
        var domNode = null;
        /** @type {number} */
        var i = childNodes.length - 1;
        for (;i >= 0;i--) {
          if ("LI" != childNodes[i].tagName) {
            if (!domNode) {
              domNode = $("<li>");
              domNode.insertBefore(childNodes[i]);
            }
            domNode.prepend(childNodes[i]);
          } else {
            /** @type {null} */
            domNode = null;
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function start() {
      processNode();
      reset();
      prepend();
      destroy();
      clean();
      insert();
      initialize();
      step();
    }
    /**
     * @return {undefined}
     */
    function dataToHtml() {
      if (self.opts.fullPage) {
        $.merge(self.opts.htmlAllowedTags, ["head", "title", "style", "link", "base", "body", "html", "meta"]);
      }
    }
    var _regex;
    var rxNotLatin;
    var reg;
    var cbreg;
    /** @type {Array} */
    var matched = [];
    return{
      /** @type {function (): undefined} */
      _init : dataToHtml,
      /** @type {function (string, Array, Array, boolean): ?} */
      html : get,
      /** @type {function (): undefined} */
      toHTML5 : update,
      /** @type {function (): undefined} */
      tables : tables,
      /** @type {function (): undefined} */
      lists : start,
      /** @type {function (string): ?} */
      invisibleSpaces : create,
      /** @type {function (string, Function, boolean): ?} */
      exec : add
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.spaces = function(self) {
    /**
     * @param {HTMLElement} element
     * @param {boolean} deepDataAndEvents
     * @return {undefined}
     */
    function walk(element, deepDataAndEvents) {
      var sibling = element.previousSibling;
      var node = element.nextSibling;
      var source = element.textContent;
      var parent = element.parentNode;
      if (!self.html.isPreformatted(parent)) {
        if (deepDataAndEvents) {
          source = source.replace(/[\f\n\r\t\v ]{2,}/g, " ");
          if (!(node && ("BR" !== node.tagName && !self.node.isBlock(node)))) {
            if (!!(self.node.isBlock(parent) || (self.node.isLink(parent) || self.node.isElement(parent)))) {
              source = source.replace(/[\f\n\r\t\v ]{1,}$/g, "");
            }
          }
          if (!(sibling && ("BR" !== sibling.tagName && !self.node.isBlock(sibling)))) {
            if (!!(self.node.isBlock(parent) || (self.node.isLink(parent) || self.node.isElement(parent)))) {
              source = source.replace(/^[\f\n\r\t\v ]{1,}/g, "");
            }
          }
          if (" " === source) {
            if (sibling && self.node.isVoid(sibling) || node && self.node.isVoid(node)) {
              /** @type {string} */
              source = "";
            }
          }
        }
        source = source.replace(new RegExp($.FE.UNICODE_NBSP, "g"), " ");
        /** @type {string} */
        var str = "";
        /** @type {number} */
        var pos = 0;
        for (;pos < source.length;pos++) {
          if (32 != source.charCodeAt(pos) || 0 !== pos && 32 != str.charCodeAt(pos - 1)) {
            str += source[pos];
          } else {
            str += $.FE.UNICODE_NBSP;
          }
        }
        if (!node || (node && self.node.isBlock(node) || node && (node.nodeType == Node.ELEMENT_NODE && (self.win.getComputedStyle(node) && "block" == self.win.getComputedStyle(node).display)))) {
          /** @type {string} */
          str = str.replace(/ $/, $.FE.UNICODE_NBSP);
        }
        if (!!sibling) {
          if (!self.node.isVoid(sibling)) {
            if (!self.node.isBlock(sibling)) {
              /** @type {string} */
              str = str.replace(/^\u00A0([^ $])/, " $1");
              if (!(1 !== str.length)) {
                if (!(160 !== str.charCodeAt(0))) {
                  if (!!node) {
                    if (!self.node.isVoid(node)) {
                      if (!self.node.isBlock(node)) {
                        /** @type {string} */
                        str = " ";
                      }
                    }
                  }
                }
              }
            }
          }
        }
        /** @type {string} */
        str = str.replace(/([^ \u00A0])\u00A0([^ \u00A0])/g, "$1 $2");
        if (element.textContent != str) {
          /** @type {string} */
          element.textContent = str;
        }
      }
    }
    /**
     * @param {Object} node
     * @param {boolean} deepDataAndEvents
     * @return {undefined}
     */
    function update(node, deepDataAndEvents) {
      if (void 0 !== node && node || (node = self.el), void 0 === deepDataAndEvents && (deepDataAndEvents = false), !node.getAttribute || "false" != node.getAttribute("contenteditable")) {
        if (node.nodeType == Node.TEXT_NODE) {
          walk(node, deepDataAndEvents);
        } else {
          if (node.nodeType == Node.ELEMENT_NODE) {
            var treeWalker = self.doc.createTreeWalker(node, NodeFilter.SHOW_TEXT, self.node.filter(function(target) {
              var node = target.parentNode;
              for (;node && node !== self.el;) {
                if ("STYLE" == node.tagName || "IFRAME" == node.tagName) {
                  return false;
                }
                if ("PRE" === node.tagName) {
                  return false;
                }
                node = node.parentNode;
              }
              return null != target.textContent.match(/([ \u00A0\f\n\r\t\v]{2,})|(^[ \u00A0\f\n\r\t\v]{1,})|([ \u00A0\f\n\r\t\v]{1,}$)/g) && !self.node.hasClass(target.parentNode, "fr-marker");
            }), false);
            for (;treeWalker.nextNode();) {
              walk(treeWalker.currentNode, deepDataAndEvents);
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function DomElement() {
      /** @type {Array} */
      var rows = [];
      var splitText = self.el.querySelectorAll(".fr-marker");
      /** @type {number} */
      var index = 0;
      for (;index < splitText.length;index++) {
        /** @type {null} */
        var row = null;
        var g = self.node.blockParent(splitText[index]);
        row = g || splitText[index];
        var n = row.nextSibling;
        var previous = row.previousSibling;
        for (;n && "BR" == n.tagName;) {
          n = n.nextSibling;
        }
        for (;previous && "BR" == previous.tagName;) {
          previous = previous.previousSibling;
        }
        if (row) {
          if (rows.indexOf(row) < 0) {
            rows.push(row);
          }
        }
        if (previous) {
          if (rows.indexOf(previous) < 0) {
            rows.push(previous);
          }
        }
        if (n) {
          if (rows.indexOf(n) < 0) {
            rows.push(n);
          }
        }
      }
      /** @type {number} */
      var i = 0;
      for (;i < rows.length;i++) {
        update(rows[i]);
      }
    }
    return{
      /** @type {function (Object, boolean): undefined} */
      normalize : update,
      /** @type {function (): undefined} */
      normalizeAroundCursor : DomElement
    };
  };
  /** @type {string} */
  $.FE.UNICODE_NBSP = String.fromCharCode(160);
  /** @type {Array} */
  $.FE.VOID_ELEMENTS = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"];
  /** @type {Array} */
  $.FE.BLOCK_TAGS = ["address", "article", "aside", "audio", "blockquote", "canvas", "dd", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "li", "main", "nav", "noscript", "ol", "output", "p", "pre", "section", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "ul", "video"];
  $.extend($.FE.DEFAULTS, {
    htmlAllowedEmptyTags : ["textarea", "a", "iframe", "object", "video", "style", "script", ".fa", ".fr-emoticon", ".fr-inner"],
    htmlDoNotWrapTags : ["script", "style"],
    htmlSimpleAmpersand : false,
    htmlIgnoreCSSProperties : [],
    htmlExecuteScripts : true
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.html = function(self) {
    /**
     * @return {?}
     */
    function getFixBodyTag() {
      return self.opts.enter == $.FE.ENTER_P ? "p" : self.opts.enter == $.FE.ENTER_DIV ? "div" : self.opts.enter == $.FE.ENTER_BR ? null : void 0;
    }
    /**
     * @param {Object} target
     * @param {boolean} shallow
     * @return {?}
     */
    function flatten(target, shallow) {
      return!(!target || target === self.el) && (shallow ? -1 != ["PRE", "SCRIPT", "STYLE"].indexOf(target.tagName) || flatten(target.parentNode, shallow) : -1 != ["PRE", "SCRIPT", "STYLE"].indexOf(target.tagName));
    }
    /**
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function select(deepDataAndEvents) {
      var j;
      /** @type {Array} */
      var results = [];
      /** @type {Array} */
      var nodes = [];
      if (deepDataAndEvents) {
        var idsToCancel = self.el.querySelectorAll(".fr-marker");
        /** @type {number} */
        j = 0;
        for (;j < idsToCancel.length;j++) {
          var child = self.node.blockParent(idsToCancel[j]) || idsToCancel[j];
          if (child) {
            var sibling = child.nextSibling;
            var node = child.previousSibling;
            if (child) {
              if (nodes.indexOf(child) < 0) {
                if (self.node.isBlock(child)) {
                  nodes.push(child);
                }
              }
            }
            if (node) {
              if (self.node.isBlock(node)) {
                if (nodes.indexOf(node) < 0) {
                  nodes.push(node);
                }
              }
            }
            if (sibling) {
              if (self.node.isBlock(sibling)) {
                if (nodes.indexOf(sibling) < 0) {
                  nodes.push(sibling);
                }
              }
            }
          }
        }
      } else {
        nodes = self.el.querySelectorAll(apply());
      }
      var sel = apply();
      sel += "," + $.FE.VOID_ELEMENTS.join(",");
      sel += ", .fr-inner";
      sel += "," + self.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)";
      /** @type {number} */
      j = nodes.length - 1;
      for (;j >= 0;j--) {
        if (!(nodes[j].textContent && nodes[j].textContent.replace(/\u200B|\n/g, "").length > 0 || nodes[j].querySelectorAll(sel).length > 0)) {
          var codeSegments = self.node.contents(nodes[j]);
          /** @type {boolean} */
          var n = false;
          /** @type {number} */
          var i = 0;
          for (;i < codeSegments.length;i++) {
            if (codeSegments[i].nodeType != Node.COMMENT_NODE && (codeSegments[i].textContent && codeSegments[i].textContent.replace(/\u200B|\n/g, "").length > 0)) {
              /** @type {boolean} */
              n = true;
              break;
            }
          }
          if (!n) {
            results.push(nodes[j]);
          }
        }
      }
      return results;
    }
    /**
     * @return {?}
     */
    function updateElement() {
      return $.FE.BLOCK_TAGS.join(":empty, ") + ":empty";
    }
    /**
     * @return {?}
     */
    function apply() {
      return $.FE.BLOCK_TAGS.join(", ");
    }
    /**
     * @param {number} dataAndEvents
     * @return {undefined}
     */
    function load(dataAndEvents) {
      var markers = $.merge([], $.FE.VOID_ELEMENTS);
      markers = $.merge(markers, self.opts.htmlAllowedEmptyTags);
      if (void 0 === dataAndEvents) {
        markers = $.merge(markers, $.FE.BLOCK_TAGS);
      }
      var nodes;
      var nodeIndexOutOfRange;
      nodes = self.el.querySelectorAll("*:empty:not(" + markers.join("):not(") + "):not(.fr-marker)");
      do {
        /** @type {boolean} */
        nodeIndexOutOfRange = false;
        /** @type {number} */
        var i = 0;
        for (;i < nodes.length;i++) {
          if (!(0 !== nodes[i].attributes.length && void 0 === nodes[i].getAttribute("href"))) {
            nodes[i].parentNode.removeChild(nodes[i]);
            /** @type {boolean} */
            nodeIndexOutOfRange = true;
          }
        }
        nodes = self.el.querySelectorAll("*:empty:not(" + markers.join("):not(") + "):not(.fr-marker)");
      } while (nodes.length && nodeIndexOutOfRange);
    }
    /**
     * @param {Element} target
     * @param {boolean} parent
     * @return {undefined}
     */
    function parse(target, parent) {
      var nodeName = getFixBodyTag();
      if (parent && (nodeName = "div"), nodeName) {
        var holder = self.doc.createDocumentFragment();
        /** @type {null} */
        var toolbar = null;
        /** @type {boolean} */
        var h = false;
        var node = target.firstChild;
        /** @type {boolean} */
        var j = false;
        for (;node;) {
          var nextNode = node.nextSibling;
          if (node.nodeType == Node.ELEMENT_NODE && (self.node.isBlock(node) || self.opts.htmlDoNotWrapTags.indexOf(node.tagName.toLowerCase()) >= 0 && !self.node.hasClass(node, "fr-marker"))) {
            /** @type {null} */
            toolbar = null;
            holder.appendChild(node.cloneNode(true));
          } else {
            if (node.nodeType != Node.ELEMENT_NODE && node.nodeType != Node.TEXT_NODE) {
              /** @type {null} */
              toolbar = null;
              holder.appendChild(node.cloneNode(true));
            } else {
              if ("BR" == node.tagName) {
                if (null == toolbar) {
                  toolbar = self.doc.createElement(nodeName);
                  /** @type {boolean} */
                  j = true;
                  if (parent) {
                    toolbar.setAttribute("class", "fr-temp-div");
                  }
                  toolbar.setAttribute("data-empty", true);
                  toolbar.appendChild(node.cloneNode(true));
                  holder.appendChild(toolbar);
                } else {
                  if (false === h) {
                    toolbar.appendChild(self.doc.createElement("br"));
                    if (parent) {
                      toolbar.setAttribute("class", "fr-temp-div");
                    }
                    toolbar.setAttribute("data-empty", true);
                  }
                }
                /** @type {null} */
                toolbar = null;
              } else {
                var text = node.textContent;
                if (node.nodeType !== Node.TEXT_NODE || (text.replace(/\n/g, "").replace(/(^ *)|( *$)/g, "").length > 0 || text.length && text.indexOf("\n") < 0)) {
                  if (null == toolbar) {
                    toolbar = self.doc.createElement(nodeName);
                    /** @type {boolean} */
                    j = true;
                    if (parent) {
                      toolbar.setAttribute("class", "fr-temp-div");
                    }
                    holder.appendChild(toolbar);
                    /** @type {boolean} */
                    h = false;
                  }
                  toolbar.appendChild(node.cloneNode(true));
                  if (!h) {
                    if (!self.node.hasClass(node, "fr-marker")) {
                      if (!(node.nodeType == Node.TEXT_NODE && 0 === text.replace(/ /g, "").length)) {
                        /** @type {boolean} */
                        h = true;
                      }
                    }
                  }
                }
              }
            }
          }
          node = nextNode;
        }
        if (j) {
          /** @type {string} */
          target.innerHTML = "";
          target.appendChild(holder);
        }
      }
    }
    /**
     * @param {Array} items
     * @param {boolean} parent
     * @return {undefined}
     */
    function copy(items, parent) {
      /** @type {number} */
      var i = 0;
      for (;i < items.length;i++) {
        parse(items[i], parent);
      }
    }
    /**
     * @param {boolean} item
     * @param {boolean} dataAndEvents
     * @param {boolean} deepDataAndEvents
     * @param {boolean} keepData
     * @return {?}
     */
    function clone(item, dataAndEvents, deepDataAndEvents, keepData) {
      if (!self.$wp) {
        return false;
      }
      if (void 0 === item) {
        /** @type {boolean} */
        item = false;
      }
      if (void 0 === dataAndEvents) {
        /** @type {boolean} */
        dataAndEvents = false;
      }
      if (void 0 === deepDataAndEvents) {
        /** @type {boolean} */
        deepDataAndEvents = false;
      }
      if (void 0 === keepData) {
        /** @type {boolean} */
        keepData = false;
      }
      var oldScrollTop = self.$wp.scrollTop();
      parse(self.el, item);
      if (keepData) {
        copy(self.el.querySelectorAll(".fr-inner"), item);
      }
      if (dataAndEvents) {
        copy(self.el.querySelectorAll("td, th"), item);
      }
      if (deepDataAndEvents) {
        copy(self.el.querySelectorAll("blockquote"), item);
      }
      if (oldScrollTop != self.$wp.scrollTop()) {
        self.$wp.scrollTop(oldScrollTop);
      }
    }
    /**
     * @return {undefined}
     */
    function render() {
      self.$el.find("div.fr-temp-div").each(function() {
        if ($(this).attr("data-empty") || (["LI"].indexOf(this.parentNode.tagName) >= 0 || self.node.isBlock(this.nextSibling) && !$(this.nextSibling).hasClass("fr-temp-div"))) {
          $(this).replaceWith($(this).html());
        } else {
          $(this).replaceWith($(this).html() + "<br>");
        }
      });
      self.$el.find(".fr-temp-div").removeClass("fr-temp-div").filter(function() {
        return "" === $(this).attr("class");
      }).removeAttr("class");
    }
    /**
     * @param {boolean} deepDataAndEvents
     * @return {undefined}
     */
    function init(deepDataAndEvents) {
      var codeSegments = select(deepDataAndEvents);
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        if (!("false" === node.getAttribute("contenteditable"))) {
          if (!node.querySelector(self.opts.htmlAllowedEmptyTags.join(":not(.fr-marker),") + ":not(.fr-marker)")) {
            if (!self.node.isVoid(node)) {
              if ("TABLE" != node.tagName) {
                if ("TBODY" != node.tagName) {
                  if ("TR" != node.tagName) {
                    if ("UL" != node.tagName) {
                      if ("OL" != node.tagName) {
                        node.appendChild(self.doc.createElement("br"));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (self.browser.msie && self.opts.enter == $.FE.ENTER_BR) {
        var all = self.node.contents(self.el);
        if (all.length) {
          if (all[all.length - 1].nodeType == Node.TEXT_NODE) {
            self.$el.append("<br>");
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function destroy() {
      return self.$el.get(0).querySelectorAll(apply());
    }
    /**
     * @param {Object} element
     * @return {?}
     */
    function walk(element) {
      if (void 0 === element && (element = self.el), element && ["SCRIPT", "STYLE", "PRE"].indexOf(element.tagName) >= 0) {
        return false;
      }
      var child = self.doc.createTreeWalker(element, NodeFilter.SHOW_TEXT, self.node.filter(function(style) {
        return null != style.textContent.match(/([ \n]{2,})|(^[ \n]{1,})|([ \n]{1,}$)/g);
      }), false);
      for (;child.nextNode();) {
        var node = child.currentNode;
        if (!flatten(node.parentNode, true)) {
          var f = self.node.isBlock(node.parentNode) || self.node.isElement(node.parentNode);
          var html = node.textContent.replace(/(?!^)( ){2,}(?!$)/g, " ").replace(/\n/g, " ").replace(/^[ ]{2,}/g, " ").replace(/[ ]{2,}$/g, " ");
          if (f) {
            var sib = node.previousSibling;
            var sibling = node.nextSibling;
            if (sib && (sibling && " " == html)) {
              /** @type {string} */
              html = self.node.isBlock(sib) && self.node.isBlock(sibling) ? "" : " ";
            } else {
              if (!sib) {
                html = html.replace(/^ */, "");
              }
              if (!sibling) {
                html = html.replace(/ *$/, "");
              }
            }
          }
          node.textContent = html;
        }
      }
    }
    /**
     * @param {string} arg
     * @param {string} code
     * @param {number} property
     * @return {?}
     */
    function getValue(arg, code, property) {
      /** @type {RegExp} */
      var r = new RegExp(code, "gi");
      /** @type {(Array.<string>|null)} */
      var option = r.exec(arg);
      return option ? option[property] : null;
    }
    /**
     * @param {string} value
     * @param {Object} context
     * @return {?}
     */
    function format(value, context) {
      var token = value.match(/<!DOCTYPE ?([^ ]*) ?([^ ]*) ?"?([^"]*)"? ?"?([^"]*)"?>/i);
      return token ? context.implementation.createDocumentType(token[1], token[3], token[4]) : context.implementation.createDocumentType("html");
    }
    /**
     * @param {?} doc
     * @return {?}
     */
    function serializeDocType(doc) {
      var doctype = doc.doctype;
      /** @type {string} */
      var c = "<!DOCTYPE html>";
      return doctype && (c = "<!DOCTYPE " + doctype.name + (doctype.publicId ? ' PUBLIC "' + doctype.publicId + '"' : "") + (!doctype.publicId && doctype.systemId ? " SYSTEM" : "") + (doctype.systemId ? ' "' + doctype.systemId + '"' : "") + ">"), c;
    }
    /**
     * @param {Node} e
     * @return {undefined}
     */
    function replace(e) {
      var item = e.parentNode;
      if (item && ((self.node.isBlock(item) || self.node.isElement(item)) && ["TD", "TH"].indexOf(item.tagName) < 0)) {
        var node = e.previousSibling;
        var nn = e.nextSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.replace(/\n|\r/g, "").length);) {
          node = node.previousSibling;
        }
        if (node) {
          if (item) {
            if ("BR" != node.tagName) {
              if (!self.node.isBlock(node)) {
                if (!nn) {
                  if (item.textContent.replace(/\u200B/g, "").length > 0) {
                    if (node.textContent.length > 0) {
                      if (!self.node.hasClass(node, "fr-marker")) {
                        if (!(self.el == item && (!nn && (self.opts.enter == $.FE.ENTER_BR && self.browser.msie)))) {
                          e.parentNode.removeChild(e);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        if (!!item) {
          if (!self.node.isBlock(item)) {
            if (!self.node.isElement(item)) {
              if (!e.previousSibling) {
                if (!e.nextSibling) {
                  replace(e.parentNode);
                }
              }
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function remove() {
      var codeSegments = self.el.getElementsByTagName("br");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        replace(codeSegments[i]);
      }
    }
    /**
     * @return {undefined}
     */
    function start() {
      if (!self.opts.htmlUntouched) {
        load();
        clone();
      }
      walk();
      if (!self.opts.htmlUntouched) {
        self.spaces.normalize(null, true);
        self.html.fillEmptyBlocks();
        self.clean.lists();
        self.clean.tables();
        self.clean.toHTML5();
        self.html.cleanBRs();
      }
      self.selection.restore();
      show();
      self.placeholder.refresh();
    }
    /**
     * @return {undefined}
     */
    function show() {
      if (self.core.isEmpty()) {
        if (null != getFixBodyTag()) {
          if (!self.el.querySelector(apply())) {
            if (!self.el.querySelector(self.opts.htmlDoNotWrapTags.join(":not(.fr-marker),") + ":not(.fr-marker)")) {
              if (self.core.hasFocus()) {
                self.$el.html("<" + getFixBodyTag() + ">" + $.FE.MARKERS + "<br/></" + getFixBodyTag() + ">");
                self.selection.restore();
              } else {
                self.$el.html("<" + getFixBodyTag() + "><br/></" + getFixBodyTag() + ">");
              }
            }
          }
        } else {
          if (!self.el.querySelector("*:not(.fr-marker):not(br)")) {
            if (self.core.hasFocus()) {
              self.$el.html($.FE.MARKERS + "<br/>");
              self.selection.restore();
            } else {
              self.$el.html("<br/>");
            }
          }
        }
      }
    }
    /**
     * @param {string} element
     * @param {string} name
     * @return {?}
     */
    function getElementsByTagName(element, name) {
      return getValue(element, "<" + name + "[^>]*?>([\\w\\W]*)</" + name + ">", 1);
    }
    /**
     * @param {string} key
     * @param {string} data
     * @return {?}
     */
    function callback(key, data) {
      var cl = $("<div " + (getValue(key, "<" + data + "([^>]*?)>", 1) || "") + ">");
      return self.node.rawAttributes(cl.get(0));
    }
    /**
     * @param {string} value
     * @return {?}
     */
    function encodeEntities(value) {
      return(getValue(value, "<!DOCTYPE([^>]*?)>", 0) || "<!DOCTYPE html>").replace(/\n/g, " ").replace(/ {2,}/g, " ");
    }
    /**
     * @param {Object} doc
     * @param {string} v
     * @return {undefined}
     */
    function fn(doc, v) {
      if (self.opts.htmlExecuteScripts) {
        doc.html(v);
      } else {
        /** @type {string} */
        doc.get(0).innerHTML = v;
      }
    }
    /**
     * @param {string} html
     * @return {undefined}
     */
    function update(html) {
      var value = self.clean.html(html || "", [], [], self.opts.fullPage);
      if (self.opts.fullPage) {
        var b = getElementsByTagName(value, "body") || (value.indexOf("<body") >= 0 ? "" : value);
        var current = callback(value, "body");
        var arg = getElementsByTagName(value, "head") || "<title></title>";
        var val = callback(value, "head");
        var a = $("<div>").append(arg).contents().each(function() {
          if (this.nodeType == Node.COMMENT_NODE || ["BASE", "LINK", "META", "NOSCRIPT", "SCRIPT", "STYLE", "TEMPLATE", "TITLE"].indexOf(this.tagName) >= 0) {
            this.parentNode.removeChild(this);
          }
        }).end().html().trim();
        arg = $("<div>").append(arg).contents().map(function() {
          return this.nodeType == Node.COMMENT_NODE ? "\x3c!--" + this.nodeValue + "--\x3e" : ["BASE", "LINK", "META", "NOSCRIPT", "SCRIPT", "STYLE", "TEMPLATE", "TITLE"].indexOf(this.tagName) >= 0 ? this.outerHTML : "";
        }).toArray().join("");
        var obj = encodeEntities(value);
        var wrapper = callback(value, "html");
        fn(self.$el, a + "\n" + b);
        self.node.clearAttributes(self.el);
        self.$el.attr(current);
        self.$el.addClass("fr-view");
        self.$el.attr("spellcheck", self.opts.spellcheck);
        self.$el.attr("dir", self.opts.direction);
        fn(self.$head, arg);
        self.node.clearAttributes(self.$head.get(0));
        self.$head.attr(val);
        self.node.clearAttributes(self.$html.get(0));
        self.$html.attr(wrapper);
        self.iframe_document.doctype.parentNode.replaceChild(format(obj, self.iframe_document), self.iframe_document.doctype);
      } else {
        fn(self.$el, value);
      }
      var l = self.edit.isDisabled();
      self.edit.on();
      self.core.injectStyle(self.opts.iframeStyle);
      start();
      if (!self.opts.useClasses) {
        self.$el.find("[fr-original-class]").each(function() {
          this.setAttribute("class", this.getAttribute("fr-original-class"));
          this.removeAttribute("fr-original-class");
        });
        self.$el.find("[fr-original-style]").each(function() {
          this.setAttribute("style", this.getAttribute("fr-original-style"));
          this.removeAttribute("fr-original-style");
        });
      }
      if (l) {
        self.edit.off();
      }
      self.events.trigger("html.set");
    }
    /**
     * @param {Text} line
     * @return {?}
     */
    function done(line) {
      /** @type {RegExp} */
      var rclass = /(#[^\s\+>~\.\[:]+)/g;
      /** @type {RegExp} */
      var r20 = /(\[[^\]]+\])/g;
      /** @type {RegExp} */
      var rreturn = /(\.[^\s\+>~\.\[:]+)/g;
      /** @type {RegExp} */
      var re = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi;
      /** @type {RegExp} */
      var typePattern = /(:[\w-]+\([^\)]*\))/gi;
      /** @type {RegExp} */
      var directive = /(:[^\s\+>~\.\[:]+)/g;
      /** @type {RegExp} */
      var LINKY_URL_REGEXP = /([^\s\+>~\.\[:]+)/g;
      !function() {
        /** @type {RegExp} */
        var re = /:not\(([^\)]*)\)/g;
        if (re.test(line)) {
          line = line.replace(re, "     $1 ");
        }
      }();
      var prevChunksLen = 100 * (line.match(rclass) || []).length + 10 * (line.match(r20) || []).length + 10 * (line.match(rreturn) || []).length + 10 * (line.match(typePattern) || []).length + 10 * (line.match(directive) || []).length + (line.match(re) || []).length;
      return line = line.replace(/[\*\s\+>~]/g, " "), line = line.replace(/[#\.]/g, " "), prevChunksLen += (line.match(LINKY_URL_REGEXP) || []).length;
    }
    /**
     * @param {Object} node
     * @return {undefined}
     */
    function process(node) {
      if (self.events.trigger("html.processGet", [node]), node && (node.getAttribute && ("" === node.getAttribute("class") && node.removeAttribute("class"))), node && (node.getAttribute && ("" === node.getAttribute("style") && node.removeAttribute("style"))), node && node.nodeType == Node.ELEMENT_NODE) {
        var i;
        var comparisons = node.querySelectorAll('[class=""],[style=""]');
        /** @type {number} */
        i = 0;
        for (;i < comparisons.length;i++) {
          var t = comparisons[i];
          if ("" === t.getAttribute("class")) {
            t.removeAttribute("class");
          }
          if ("" === t.getAttribute("style")) {
            t.removeAttribute("style");
          }
        }
        var codeSegments = node.querySelectorAll("br");
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          replace(codeSegments[i]);
        }
      }
    }
    /**
     * @param {Array} a
     * @param {Array} b
     * @return {?}
     */
    function selector_sortOrder(a, b) {
      return a[3] - b[3];
    }
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @param {?} vec0
     * @return {?}
     */
    function add(mayParseLabeledStatementInstead, vec0) {
      if (!self.$wp) {
        return self.$oel.clone().removeClass("fr-view").removeAttr("contenteditable").get(0).outerHTML;
      }
      /** @type {string} */
      var string = "";
      self.events.trigger("html.beforeGet");
      var j;
      var id;
      /** @type {Array} */
      var arr = [];
      var storage = {};
      /** @type {Array} */
      var results = [];
      if (!self.opts.useClasses && !vec0) {
        /** @type {RegExp} */
        var regex = new RegExp("^" + self.opts.htmlIgnoreCSSProperties.join("$|^") + "$", "gi");
        /** @type {number} */
        j = 0;
        for (;j < self.doc.styleSheets.length;j++) {
          var rules;
          /** @type {number} */
          var l = 0;
          try {
            rules = self.doc.styleSheets[j].cssRules;
            if (self.doc.styleSheets[j].ownerNode) {
              if ("STYLE" == self.doc.styleSheets[j].ownerNode.nodeType) {
                /** @type {number} */
                l = 1;
              }
            }
          } catch (y) {
          }
          if (rules) {
            /** @type {number} */
            var i = 0;
            var n = rules.length;
            for (;i < n;i++) {
              if (rules[i].selectorText && rules[i].style.cssText.length > 0) {
                var els;
                var selector = rules[i].selectorText.replace(/body |\.fr-view /g, "").replace(/::/g, ":");
                try {
                  els = self.el.querySelectorAll(selector);
                } catch (y) {
                  /** @type {Array} */
                  els = [];
                }
                /** @type {number} */
                id = 0;
                for (;id < els.length;id++) {
                  if (!els[id].getAttribute("fr-original-style") && els[id].getAttribute("style")) {
                    els[id].setAttribute("fr-original-style", els[id].getAttribute("style"));
                    arr.push(els[id]);
                  } else {
                    if (!els[id].getAttribute("fr-original-style")) {
                      arr.push(els[id]);
                    }
                  }
                  if (!storage[els[id]]) {
                    storage[els[id]] = {};
                  }
                  var result = 1E3 * l + done(rules[i].selectorText);
                  var parameters = rules[i].style.cssText.split(";");
                  /** @type {number} */
                  var p = 0;
                  for (;p < parameters.length;p++) {
                    var line = parameters[p].trim().split(":")[0];
                    if (!line.match(regex)) {
                      if (!storage[els[id]][line]) {
                        /** @type {number} */
                        storage[els[id]][line] = 0;
                        if ((els[id].getAttribute("fr-original-style") || "").indexOf(line + ":") >= 0) {
                          /** @type {number} */
                          storage[els[id]][line] = 1E4;
                        }
                      }
                      if (result >= storage[els[id]][line]) {
                        storage[els[id]][line] = result;
                        if (parameters[p].trim().length) {
                          results.push([els[id], line.trim(), parameters[p].trim().split(":")[1].trim(), result]);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        results.sort(selector_sortOrder);
        /** @type {number} */
        j = 0;
        for (;j < results.length;j++) {
          var target = results[j];
          target[0].style[target[1]] = target[2];
        }
        /** @type {number} */
        j = 0;
        for (;j < arr.length;j++) {
          if (arr[j].getAttribute("class") && (arr[j].setAttribute("fr-original-class", arr[j].getAttribute("class")), arr[j].removeAttribute("class")), (arr[j].getAttribute("fr-original-style") || "").trim().length > 0) {
            var list = arr[j].getAttribute("fr-original-style").split(";");
            /** @type {number} */
            id = 0;
            for (;id < list.length;id++) {
              if (list[id].indexOf(":") > 0) {
                arr[j].style[list[id].split(":")[0].trim()] = list[id].split(":")[1].trim();
              }
            }
          }
        }
      }
      if (self.core.isEmpty() ? self.opts.fullPage && (string = serializeDocType(self.iframe_document), string += "<html" + self.node.attributes(self.$html.get(0)) + ">" + self.$html.find("head").get(0).outerHTML + "<body></body></html>") : (void 0 === mayParseLabeledStatementInstead && (mayParseLabeledStatementInstead = false), self.opts.fullPage ? (string = serializeDocType(self.iframe_document), self.$el.removeClass("fr-view"), string += "<html" + self.node.attributes(self.$html.get(0)) + ">" +
      self.$html.html() + "</html>", self.$el.addClass("fr-view")) : string = self.$el.html()), !self.opts.useClasses && !vec0) {
        /** @type {number} */
        j = 0;
        for (;j < arr.length;j++) {
          if (arr[j].getAttribute("fr-original-class")) {
            arr[j].setAttribute("class", arr[j].getAttribute("fr-original-class"));
            arr[j].removeAttribute("fr-original-class");
          }
          if (arr[j].getAttribute("fr-original-style")) {
            arr[j].setAttribute("style", arr[j].getAttribute("fr-original-style"));
            arr[j].removeAttribute("fr-original-style");
          } else {
            arr[j].removeAttribute("style");
          }
        }
      }
      if (self.opts.fullPage) {
        /** @type {string} */
        string = string.replace(/<style data-fr-style="true">(?:[\w\W]*?)<\/style>/g, "");
        /** @type {string} */
        string = string.replace(/<link([^>]*)data-fr-style="true"([^>]*)>/g, "");
        /** @type {string} */
        string = string.replace(/<style(?:[\w\W]*?)class="firebugResetStyles"(?:[\w\W]*?)>(?:[\w\W]*?)<\/style>/g, "");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) spellcheck="true"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$2>$3</body>");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) contenteditable="(true|false)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$3>$4</body>");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) dir="([\w]*)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$3>$4</body>");
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?))class="([\w\W]*?)(fr-rtl|fr-ltr)([\w\W]*?)"((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, '<body$1class="$2$4"$5>$6</body>');
        /** @type {string} */
        string = string.replace(/<body((?:[\w\W]*?)) class=""((?:[\w\W]*?))>((?:[\w\W]*?))<\/body>/g, "<body$1$2>$3</body>");
      }
      if (self.opts.htmlSimpleAmpersand) {
        /** @type {string} */
        string = string.replace(/\&amp;/gi, "&");
      }
      self.events.trigger("html.afterGet");
      if (!mayParseLabeledStatementInstead) {
        /** @type {string} */
        string = string.replace(/<span[^>]*? class\s*=\s*["']?fr-marker["']?[^>]+>\u200b<\/span>/gi, "");
      }
      string = self.clean.invisibleSpaces(string);
      string = self.clean.exec(string, process);
      var err = self.events.chainTrigger("html.get", string);
      return "string" == typeof err && (string = err), string = string.replace(/<pre(?:[\w\W]*?)>(?:[\w\W]*?)<\/pre>/g, function(messageFormat) {
        return messageFormat.replace(/<br>/g, "\n");
      });
    }
    /**
     * @return {?}
     */
    function set() {
      /**
       * @param {Element} element
       * @param {Object} node
       * @return {undefined}
       */
      var Element = function(element, node) {
        for (;node && ((node.nodeType == Node.TEXT_NODE || !self.node.isBlock(node)) && !self.node.isElement(node));) {
          if (node) {
            if (node.nodeType != Node.TEXT_NODE) {
              $(element).wrapInner(self.node.openTagString(node) + self.node.closeTagString(node));
            }
          }
          node = node.parentNode;
        }
        if (node) {
          if (element.innerHTML == node.innerHTML) {
            element.innerHTML = node.outerHTML;
          }
        }
      };
      /**
       * @return {?}
       */
      var init = function() {
        var selection;
        /** @type {null} */
        var node = null;
        return self.win.getSelection ? (selection = self.win.getSelection()) && (selection.rangeCount && (node = selection.getRangeAt(0).commonAncestorContainer, node.nodeType != Node.ELEMENT_NODE && (node = node.parentNode))) : (selection = self.doc.selection) && ("Control" != selection.type && (node = selection.createRange().parentElement())), null != node && ($.inArray(self.el, $(node).parents()) >= 0 || node == self.el) ? node : null;
      };
      /** @type {string} */
      var result = "";
      if (void 0 !== self.win.getSelection) {
        if (self.browser.mozilla) {
          self.selection.save();
          if (self.$el.find('.fr-marker[data-type="false"]').length > 1) {
            self.$el.find('.fr-marker[data-type="false"][data-id="0"]').remove();
            self.$el.find('.fr-marker[data-type="false"]:last').attr("data-id", "0");
            self.$el.find(".fr-marker").not('[data-id="0"]').remove();
          }
          self.selection.restore();
        }
        var codeSegments = self.selection.ranges();
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          /** @type {Element} */
          var parent = document.createElement("div");
          parent.appendChild(codeSegments[i].cloneContents());
          /** @type {NodeList} */
          var siblings = parent.children;
          if (siblings.length) {
            var sibling = siblings[siblings.length - 1];
            if ("P" == sibling.tagName && self.opts.enter == $.FroalaEditor.ENTER_P || "DIV" == sibling.tagName && self.opts.enter == $.FroalaEditor.ENTER_DIV) {
              if (self.node.isEmpty(sibling)) {
                parent.removeChild(sibling);
              }
            }
          }
          Element(parent, init());
          if ($(parent).find(".fr-element").length > 0) {
            parent = self.el;
          }
          result += parent.innerHTML;
        }
      } else {
        if (void 0 !== self.doc.selection) {
          if ("Text" == self.doc.selection.type) {
            result = self.doc.selection.createRange().htmlText;
          }
        }
      }
      return result;
    }
    /**
     * @param {string} html
     * @return {?}
     */
    function success(html) {
      var container = self.doc.createElement("div");
      return container.innerHTML = html, null !== container.querySelector(apply());
    }
    /**
     * @param {string} xhtml
     * @return {?}
     */
    function wrap(xhtml) {
      var e = self.doc.createElement("div");
      return e.innerHTML = xhtml, self.selection.setAtEnd(e), e.innerHTML;
    }
    /**
     * @param {string} val
     * @return {?}
     */
    function encodeUriSegment(val) {
      return val.replace(/</gi, "&lt;").replace(/>/gi, "&gt;").replace(/"/gi, "&quot;").replace(/'/gi, "&#39;");
    }
    /**
     * @param {string} output
     * @return {?}
     */
    function create(output) {
      if (!self.html.defaultTag()) {
        return output;
      }
      var element = self.doc.createElement("div");
      /** @type {string} */
      element.innerHTML = output;
      var codeSegments = element.querySelectorAll(":scope > " + self.html.defaultTag());
      /** @type {number} */
      var i = codeSegments.length - 1;
      for (;i >= 0;i--) {
        var el = codeSegments[i];
        if (!self.node.isBlock(el.previousSibling)) {
          if (el.previousSibling) {
            if (!self.node.isEmpty(el)) {
              $("<br>").insertAfter(el.previousSibling);
            }
          }
          el.outerHTML = el.innerHTML;
        }
      }
      return element.innerHTML;
    }
    /**
     * @param {string} value
     * @param {boolean} shallow
     * @param {Node} root
     * @return {?}
     */
    function initialize(value, shallow, root) {
      if (!self.selection.isCollapsed()) {
        self.selection.remove();
      }
      var html;
      if (html = shallow ? value : self.clean.html(value), html = html.replace(/\r|\n/g, " "), value.indexOf('class="fr-marker"') < 0 && (html = wrap(html)), self.core.isEmpty() && (!self.opts.keepFormatOnDelete && success(html))) {
        self.el.innerHTML = html;
      } else {
        var node = self.markers.insert();
        if (node) {
          if (self.node.isLastSibling(node)) {
            if ($(node).parent().hasClass("fr-deletable")) {
              $(node).insertAfter($(node).parent());
            }
          }
          var n = self.node.blockParent(node);
          if ((success(html) || root) && (self.node.deepestParent(node) || n && "LI" == n.tagName)) {
            if (n && ("LI" == n.tagName && (html = create(html))), !(node = self.markers.split())) {
              return false;
            }
            node.outerHTML = html;
          } else {
            node.outerHTML = html;
          }
        } else {
          self.el.innerHTML = self.el.innerHTML + html;
        }
      }
      start();
      self.keys.positionCaret();
      self.events.trigger("html.inserted");
    }
    /**
     * @param {number} opt_default
     * @return {?}
     */
    function get(opt_default) {
      /** @type {null} */
      var container = null;
      if (void 0 === opt_default && (container = self.selection.element()), self.opts.keepFormatOnDelete) {
        return false;
      }
      /** @type {number} */
      var options = container ? (container.textContent.match(/\u200B/g) || []).length - container.querySelectorAll(".fr-marker").length : 0;
      if ((self.el.textContent.match(/\u200B/g) || []).length - self.el.querySelectorAll(".fr-marker").length == options) {
        return false;
      }
      var codeSegments;
      var g;
      do {
        /** @type {boolean} */
        g = false;
        codeSegments = self.el.querySelectorAll("*:not(.fr-marker)");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var node = codeSegments[i];
          if (container != node) {
            var value = node.textContent;
            if (0 === node.children.length) {
              if (1 === value.length) {
                if (8203 == value.charCodeAt(0)) {
                  if ("TD" !== node.tagName) {
                    $(node).remove();
                    /** @type {boolean} */
                    g = true;
                  }
                }
              }
            }
          }
        }
      } while (g);
    }
    /**
     * @return {undefined}
     */
    function addListeners() {
      if (self.$wp) {
        /**
         * @return {undefined}
         */
        var reset = function() {
          get();
          if (self.placeholder) {
            setTimeout(self.placeholder.refresh, 0);
          }
        };
        self.events.on("mouseup", reset);
        self.events.on("keydown", reset);
        self.events.on("contentChanged", show);
      }
    }
    return{
      /** @type {function (): ?} */
      defaultTag : getFixBodyTag,
      /** @type {function (Object, boolean): ?} */
      isPreformatted : flatten,
      /** @type {function (boolean): ?} */
      emptyBlocks : select,
      /** @type {function (): ?} */
      emptyBlockTagsQuery : updateElement,
      /** @type {function (): ?} */
      blockTagsQuery : apply,
      /** @type {function (boolean): undefined} */
      fillEmptyBlocks : init,
      /** @type {function (number): undefined} */
      cleanEmptyTags : load,
      /** @type {function (number): ?} */
      cleanWhiteTags : get,
      /** @type {function (Object): ?} */
      cleanBlankSpaces : walk,
      /** @type {function (): ?} */
      blocks : destroy,
      /** @type {function (?): ?} */
      getDoctype : serializeDocType,
      /** @type {function (string): undefined} */
      set : update,
      /** @type {function (number, ?): ?} */
      get : add,
      /** @type {function (): ?} */
      getSelected : set,
      /** @type {function (string, boolean, Node): ?} */
      insert : initialize,
      /** @type {function (boolean, boolean, boolean, boolean): ?} */
      wrap : clone,
      /** @type {function (): undefined} */
      unwrap : render,
      /** @type {function (string): ?} */
      escapeEntities : encodeUriSegment,
      /** @type {function (): undefined} */
      checkIfEmpty : show,
      /** @type {function (string, string): ?} */
      extractNode : getElementsByTagName,
      /** @type {function (string, string): ?} */
      extractNodeAttrs : callback,
      /** @type {function (string): ?} */
      extractDoctype : encodeEntities,
      /** @type {function (): undefined} */
      cleanBRs : remove,
      /** @type {function (): undefined} */
      _init : addListeners
    };
  };
  $.extend($.FE.DEFAULTS, {
    height : null,
    heightMax : null,
    heightMin : null,
    width : null
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.size = function(self) {
    /**
     * @return {undefined}
     */
    function handler() {
      render();
      if (self.opts.height) {
        self.$el.css("minHeight", self.opts.height - self.helpers.getPX(self.$el.css("padding-top")) - self.helpers.getPX(self.$el.css("padding-bottom")));
      }
      self.$iframe.height(self.$el.outerHeight(true));
    }
    /**
     * @return {undefined}
     */
    function render() {
      if (self.opts.heightMin) {
        self.$el.css("minHeight", self.opts.heightMin);
      } else {
        self.$el.css("minHeight", "");
      }
      if (self.opts.heightMax) {
        self.$wp.css("maxHeight", self.opts.heightMax);
        self.$wp.css("overflow", "auto");
      } else {
        self.$wp.css("maxHeight", "");
        self.$wp.css("overflow", "");
      }
      if (self.opts.height) {
        self.$wp.height(self.opts.height);
        self.$wp.css("overflow", "auto");
        self.$el.css("minHeight", self.opts.height - self.helpers.getPX(self.$el.css("padding-top")) - self.helpers.getPX(self.$el.css("padding-bottom")));
      } else {
        self.$wp.css("height", "");
        if (!self.opts.heightMin) {
          self.$el.css("minHeight", "");
        }
        if (!self.opts.heightMax) {
          self.$wp.css("overflow", "");
        }
      }
      if (self.opts.width) {
        self.$box.width(self.opts.width);
      }
    }
    /**
     * @return {?}
     */
    function execute() {
      if (!self.$wp) {
        return false;
      }
      render();
      if (self.$iframe) {
        self.events.on("keyup keydown", function() {
          setTimeout(handler, 0);
        }, true);
        self.events.on("commands.after html.set init initialized paste.after", handler);
      }
    }
    return{
      /** @type {function (): ?} */
      _init : execute,
      /** @type {function (): undefined} */
      syncIframe : handler,
      /** @type {function (): undefined} */
      refresh : render
    };
  };
  $.extend($.FE.DEFAULTS, {
    language : null
  });
  $.FE.LANGUAGE = {};
  /**
   * @param {Object} data
   * @return {?}
   */
  $.FE.MODULES.language = function(data) {
    /**
     * @param {string} name
     * @return {?}
     */
    function attr(name) {
      return params && (params.translation[name] && params.translation[name].length) ? params.translation[name] : name;
    }
    /**
     * @return {undefined}
     */
    function initContacts() {
      if ($.FE.LANGUAGE) {
        params = $.FE.LANGUAGE[data.opts.language];
      }
      if (params) {
        if (params.direction) {
          data.opts.direction = params.direction;
        }
      }
    }
    var params;
    return{
      /** @type {function (): undefined} */
      _init : initContacts,
      /** @type {function (string): ?} */
      translate : attr
    };
  };
  $.extend($.FE.DEFAULTS, {
    placeholderText : "Type something"
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.placeholder = function(self) {
    /**
     * @return {undefined}
     */
    function update() {
      if (!self.$placeholder) {
        transition();
      }
      var offsetY = self.opts.iframe ? self.$iframe.prev().outerHeight(true) : self.$el.prev().outerHeight(true);
      /** @type {number} */
      var blurAmount = 0;
      /** @type {number} */
      var rh = 0;
      /** @type {number} */
      var one_vh = 0;
      /** @type {number} */
      var newDuration = 0;
      /** @type {number} */
      var minVal = 0;
      /** @type {number} */
      var maxFactor = 0;
      var all = self.node.contents(self.el);
      var align = $(self.selection.element()).css("text-align");
      if (all.length && all[0].nodeType == Node.ELEMENT_NODE) {
        var $this = $(all[0]);
        if (!self.opts.toolbarInline || self.$el.prev().length > 0) {
          if (self.ready) {
            blurAmount = self.helpers.getPX($this.css("margin-top"));
            newDuration = self.helpers.getPX($this.css("padding-top"));
            rh = self.helpers.getPX($this.css("margin-left"));
            one_vh = self.helpers.getPX($this.css("margin-right"));
            minVal = self.helpers.getPX($this.css("padding-left"));
            maxFactor = self.helpers.getPX($this.css("padding-right"));
          }
        }
        self.$placeholder.css("font-size", $this.css("font-size"));
        self.$placeholder.css("line-height", $this.css("line-height"));
      } else {
        self.$placeholder.css("font-size", self.$el.css("font-size"));
        self.$placeholder.css("line-height", self.$el.css("line-height"));
      }
      self.$wp.addClass("show-placeholder");
      self.$placeholder.css({
        marginTop : Math.max(self.helpers.getPX(self.$el.css("margin-top")), blurAmount) + offsetY,
        paddingTop : Math.max(self.helpers.getPX(self.$el.css("padding-top")), newDuration),
        paddingLeft : Math.max(self.helpers.getPX(self.$el.css("padding-left")), minVal),
        marginLeft : Math.max(self.helpers.getPX(self.$el.css("margin-left")), rh),
        paddingRight : Math.max(self.helpers.getPX(self.$el.css("padding-right")), maxFactor),
        marginRight : Math.max(self.helpers.getPX(self.$el.css("margin-right")), one_vh),
        textAlign : align
      }).text(self.language.translate(self.opts.placeholderText || (self.$oel.attr("placeholder") || "")));
      self.$placeholder.html(self.$placeholder.text().replace(/\n/g, "<br>"));
    }
    /**
     * @return {undefined}
     */
    function hide() {
      self.$wp.removeClass("show-placeholder");
    }
    /**
     * @return {?}
     */
    function undo() {
      return!self.$wp || self.node.hasClass(self.$wp.get(0), "show-placeholder");
    }
    /**
     * @return {?}
     */
    function show() {
      if (!self.$wp) {
        return false;
      }
      if (self.core.isEmpty()) {
        update();
      } else {
        hide();
      }
    }
    /**
     * @return {undefined}
     */
    function transition() {
      self.$placeholder = $('<span class="fr-placeholder"></span>');
      self.$wp.append(self.$placeholder);
    }
    /**
     * @return {?}
     */
    function execute() {
      if (!self.$wp) {
        return false;
      }
      self.events.on("init input keydown keyup contentChanged initialized", show);
    }
    return{
      /** @type {function (): ?} */
      _init : execute,
      /** @type {function (): undefined} */
      show : update,
      /** @type {function (): undefined} */
      hide : hide,
      /** @type {function (): ?} */
      refresh : show,
      /** @type {function (): ?} */
      isVisible : undo
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.edit = function(self) {
    /**
     * @return {undefined}
     */
    function init() {
      if (self.browser.mozilla) {
        try {
          self.doc.execCommand("enableObjectResizing", false, "false");
          self.doc.execCommand("enableInlineTableEditing", false, "false");
        } catch (b) {
        }
      }
      if (self.browser.msie) {
        try {
          self.doc.body.addEventListener("mscontrolselect", function(types) {
            return types.preventDefault(), false;
          });
        } catch (b) {
        }
      }
    }
    /**
     * @return {undefined}
     */
    function onClick() {
      if (self.$wp) {
        self.$el.attr("contenteditable", true);
        self.$el.removeClass("fr-disabled").attr("aria-disabled", false);
        if (self.$tb) {
          self.$tb.removeClass("fr-disabled").attr("aria-disabled", false);
        }
        init();
      } else {
        if (self.$el.is("a")) {
          self.$el.attr("contenteditable", true);
        }
      }
      /** @type {boolean} */
      event = false;
    }
    /**
     * @return {undefined}
     */
    function handler() {
      self.events.disableBlur();
      if (self.$wp) {
        self.$el.attr("contenteditable", false);
        self.$el.addClass("fr-disabled").attr("aria-disabled", true);
        if (self.$tb) {
          self.$tb.addClass("fr-disabled").attr("aria-disabled", true);
        }
      } else {
        if (self.$el.is("a")) {
          self.$el.attr("contenteditable", false);
        }
      }
      self.events.enableBlur();
      /** @type {boolean} */
      event = true;
    }
    /**
     * @return {?}
     */
    function filter() {
      return event;
    }
    /**
     * @return {undefined}
     */
    function on() {
      self.events.on("focus", function() {
        if (filter()) {
          self.edit.off();
        } else {
          self.edit.on();
        }
      });
    }
    /** @type {boolean} */
    var event = false;
    return{
      /** @type {function (): undefined} */
      _init : on,
      /** @type {function (): undefined} */
      on : onClick,
      /** @type {function (): undefined} */
      off : handler,
      /** @type {function (): undefined} */
      disableDesign : init,
      /** @type {function (): ?} */
      isDisabled : filter
    };
  };
  $.extend($.FE.DEFAULTS, {
    editorClass : null,
    typingTimer : 500,
    iframe : false,
    requestWithCORS : true,
    requestWithCredentials : false,
    requestHeaders : {},
    useClasses : true,
    spellcheck : true,
    iframeStyle : 'html{margin:0px;height:auto;}body{height:auto;padding:10px;background:transparent;color:#000000;position:relative;z-index: 2;-webkit-user-select:auto;margin:0px;overflow:hidden;min-height:20px;}body:after{content:"";display:block;clear:both;}',
    iframeStyleFiles : [],
    direction : "auto",
    zIndex : 1,
    tabIndex : null,
    disableRightClick : false,
    scrollableContainer : "body",
    keepFormatOnDelete : false,
    theme : null
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.core = function(self) {
    /**
     * @param {string} opt_attributes
     * @return {undefined}
     */
    function setup(opt_attributes) {
      if (self.opts.iframe) {
        self.$head.find("style[data-fr-style], link[data-fr-style]").remove();
        self.$head.append('<style data-fr-style="true">' + opt_attributes + "</style>");
        /** @type {number} */
        var conditionIndex = 0;
        for (;conditionIndex < self.opts.iframeStyleFiles.length;conditionIndex++) {
          var cl = $('<link data-fr-style="true" rel="stylesheet" href="' + self.opts.iframeStyleFiles[conditionIndex] + '">');
          cl.get(0).addEventListener("load", self.size.syncIframe);
          self.$head.append(cl);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function complete() {
      if (!self.opts.iframe) {
        self.$el.addClass("fr-element fr-view");
      }
    }
    /**
     * @return {undefined}
     */
    function start() {
      if (self.$box.addClass("fr-box" + (self.opts.editorClass ? " " + self.opts.editorClass : "")), self.$wp.addClass("fr-wrapper"), complete(), self.opts.iframe) {
        self.$iframe.addClass("fr-iframe");
        self.$el.addClass("fr-view");
        /** @type {number} */
        var i = 0;
        for (;i < self.o_doc.styleSheets.length;i++) {
          var rules;
          try {
            rules = self.o_doc.styleSheets[i].cssRules;
          } catch (g) {
          }
          if (rules) {
            /** @type {number} */
            var j = 0;
            var ruleCount = rules.length;
            for (;j < ruleCount;j++) {
              if (!!rules[j].selectorText) {
                if (!(0 !== rules[j].selectorText.indexOf(".fr-view") && 0 !== rules[j].selectorText.indexOf(".fr-element"))) {
                  if (rules[j].style.cssText.length > 0) {
                    if (0 === rules[j].selectorText.indexOf(".fr-view")) {
                      self.opts.iframeStyle += rules[j].selectorText.replace(/\.fr-view/g, "body") + "{" + rules[j].style.cssText + "}";
                    } else {
                      self.opts.iframeStyle += rules[j].selectorText.replace(/\.fr-element/g, "body") + "{" + rules[j].style.cssText + "}";
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ("auto" != self.opts.direction) {
        self.$box.removeClass("fr-ltr fr-rtl").addClass("fr-" + self.opts.direction);
      }
      self.$el.attr("dir", self.opts.direction);
      self.$wp.attr("dir", self.opts.direction);
      if (self.opts.zIndex > 1) {
        self.$box.css("z-index", self.opts.zIndex);
      }
      if (self.opts.theme) {
        self.$box.addClass(self.opts.theme + "-theme");
      }
      self.opts.tabIndex = self.opts.tabIndex || self.$oel.attr("tabIndex");
      if (self.opts.tabIndex) {
        self.$el.attr("tabIndex", self.opts.tabIndex);
      }
    }
    /**
     * @return {?}
     */
    function isEmpty() {
      return self.node.isEmpty(self.el);
    }
    /**
     * @return {undefined}
     */
    function fn() {
      self.drag_support = {
        filereader : "undefined" != typeof FileReader,
        formdata : !!self.win.FormData,
        progress : "upload" in new XMLHttpRequest
      };
    }
    /**
     * @param {?} url
     * @param {?} method
     * @return {?}
     */
    function send(url, method) {
      /** @type {XMLHttpRequest} */
      var xhr = new XMLHttpRequest;
      xhr.open(method, url, true);
      if (self.opts.requestWithCredentials) {
        /** @type {boolean} */
        xhr.withCredentials = true;
      }
      var header;
      for (header in self.opts.requestHeaders) {
        if (self.opts.requestHeaders.hasOwnProperty(header)) {
          xhr.setRequestHeader(header, self.opts.requestHeaders[header]);
        }
      }
      return xhr;
    }
    /**
     * @param {string} value
     * @return {undefined}
     */
    function render(value) {
      if ("TEXTAREA" == self.$oel.get(0).tagName) {
        self.$oel.val(value);
      }
      if (self.$wp) {
        if ("TEXTAREA" == self.$oel.get(0).tagName) {
          self.$el.html("");
          self.$wp.html("");
          self.$box.replaceWith(self.$oel);
          self.$oel.show();
        } else {
          self.$wp.replaceWith(value);
          self.$el.html("");
          self.$box.removeClass("fr-view fr-ltr fr-box " + (self.opts.editorClass || ""));
          if (self.opts.theme) {
            self.$box.addClass(self.opts.theme + "-theme");
          }
        }
      }
      /** @type {null} */
      this.$wp = null;
      /** @type {null} */
      this.$el = null;
      /** @type {null} */
      this.el = null;
      /** @type {null} */
      this.$box = null;
    }
    /**
     * @return {?}
     */
    function handler() {
      return self.browser.mozilla && self.helpers.isMobile() ? self.selection.inEditor() : self.node.hasFocus(self.el) || self.$el.find("*:focus").length > 0;
    }
    /**
     * @param {Event} record
     * @return {?}
     */
    function find(record) {
      if (!record) {
        return false;
      }
      var data = record.data("instance");
      return!!data && data.id == self.id;
    }
    /**
     * @return {undefined}
     */
    function init() {
      if ($.FE.INSTANCES.push(self), fn(), self.$wp) {
        start();
        self.html.set(self._original_html);
        self.$el.attr("spellcheck", self.opts.spellcheck);
        if (self.helpers.isMobile()) {
          self.$el.attr("autocomplete", self.opts.spellcheck ? "on" : "off");
          self.$el.attr("autocorrect", self.opts.spellcheck ? "on" : "off");
          self.$el.attr("autocapitalize", self.opts.spellcheck ? "on" : "off");
        }
        if (self.opts.disableRightClick) {
          self.events.$on(self.$el, "contextmenu", function(e) {
            if (2 == e.button) {
              return false;
            }
          });
        }
        try {
          self.doc.execCommand("styleWithCSS", false, false);
        } catch (c) {
        }
      }
      if ("TEXTAREA" == self.$oel.get(0).tagName) {
        self.events.on("contentChanged", function() {
          self.$oel.val(self.html.get());
        });
        self.events.on("form.submit", function() {
          self.$oel.val(self.html.get());
        });
        self.events.on("form.reset", function() {
          self.html.set(self._original_html);
        });
        self.$oel.val(self.html.get());
      }
      if (self.helpers.isIOS()) {
        self.events.$on(self.$doc, "selectionchange", function() {
          if (!self.$doc.get(0).hasFocus()) {
            self.$win.get(0).focus();
          }
        });
      }
      self.events.trigger("init");
    }
    return{
      /** @type {function (): undefined} */
      _init : init,
      /** @type {function (string): undefined} */
      destroy : render,
      /** @type {function (): ?} */
      isEmpty : isEmpty,
      /** @type {function (?, ?): ?} */
      getXHR : send,
      /** @type {function (string): undefined} */
      injectStyle : setup,
      /** @type {function (): ?} */
      hasFocus : handler,
      /** @type {function (Event): ?} */
      sameInstance : find
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.cursorLists = function(self) {
    /**
     * @param {(Node|string)} clicked
     * @return {?}
     */
    function fn(clicked) {
      /** @type {(Node|string)} */
      var pn = clicked;
      for (;"LI" != pn.tagName;) {
        pn = pn.parentNode;
      }
      return pn;
    }
    /**
     * @param {?} dataAndEvents
     * @return {?}
     */
    function walk(dataAndEvents) {
      var target = dataAndEvents;
      for (;!self.node.isList(target);) {
        target = target.parentNode;
      }
      return target;
    }
    /**
     * @param {Node} el
     * @return {undefined}
     */
    function update(el) {
      var element;
      var node = fn(el);
      var nn = node.nextSibling;
      var sib = node.previousSibling;
      var withHours = self.html.defaultTag();
      if (self.node.isEmpty(node, true) && nn) {
        /** @type {string} */
        var s = "";
        /** @type {string} */
        var optsData = "";
        var parent = el.parentNode;
        for (;!self.node.isList(parent) && (parent.parentNode && "LI" !== parent.parentNode.tagName);) {
          s = self.node.openTagString(parent) + s;
          optsData += self.node.closeTagString(parent);
          parent = parent.parentNode;
        }
        s = self.node.openTagString(parent) + s;
        optsData += self.node.closeTagString(parent);
        /** @type {string} */
        var options = "";
        /** @type {string} */
        options = parent.parentNode && "LI" == parent.parentNode.tagName ? optsData + "<li>" + $.FE.MARKERS + "<br>" + s : withHours ? optsData + "<" + withHours + ">" + $.FE.MARKERS + "<br></" + withHours + ">" + s : optsData + $.FE.MARKERS + "<br>" + s;
        $(node).html('<span id="fr-break"></span>');
        for (;["UL", "OL"].indexOf(parent.tagName) < 0 || parent.parentNode && "LI" === parent.parentNode.tagName;) {
          parent = parent.parentNode;
        }
        var model = self.node.openTagString(parent) + $(parent).html() + self.node.closeTagString(parent);
        model = model.replace(/<span id="fr-break"><\/span>/g, options);
        $(parent).replaceWith(model);
        self.$el.find("li:empty").remove();
      } else {
        if (sib && nn || !self.node.isEmpty(node, true)) {
          /** @type {string} */
          var px = "<br>";
          var n = el.parentNode;
          for (;n && "LI" != n.tagName;) {
            px = self.node.openTagString(n) + px + self.node.closeTagString(n);
            n = n.parentNode;
          }
          $(node).before("<li>" + px + "</li>");
          $(el).remove();
        } else {
          if (sib) {
            element = walk(node);
            /** @type {string} */
            var grape = $.FE.MARKERS + "<br>";
            var pn = el.parentNode;
            for (;pn && "LI" != pn.tagName;) {
              grape = self.node.openTagString(pn) + grape + self.node.closeTagString(pn);
              pn = pn.parentNode;
            }
            if (element.parentNode && "LI" == element.parentNode.tagName) {
              $(element.parentNode).after("<li>" + grape + "</li>");
            } else {
              if (withHours) {
                $(element).after("<" + withHours + ">" + grape + "</" + withHours + ">");
              } else {
                $(element).after(grape);
              }
            }
            $(node).remove();
          } else {
            element = walk(node);
            if (element.parentNode && "LI" == element.parentNode.tagName) {
              if (nn) {
                $(element.parentNode).before(self.node.openTagString(node) + $.FE.MARKERS + "<br></li>");
              } else {
                $(element.parentNode).after(self.node.openTagString(node) + $.FE.MARKERS + "<br></li>");
              }
            } else {
              if (withHours) {
                $(element).before("<" + withHours + ">" + $.FE.MARKERS + "<br></" + withHours + ">");
              } else {
                $(element).before($.FE.MARKERS + "<br>");
              }
            }
            $(node).remove();
          }
        }
      }
    }
    /**
     * @param {Node} el
     * @return {undefined}
     */
    function handleClick(el) {
      var parent = fn(el);
      /** @type {string} */
      var b = "";
      /** @type {Node} */
      var node = el;
      /** @type {string} */
      var c = "";
      /** @type {string} */
      var a = "";
      for (;node != parent;) {
        node = node.parentNode;
        /** @type {string} */
        var n = "A" == node.tagName && self.cursor.isAtEnd(el, node) ? "fr-to-remove" : "";
        c = self.node.openTagString($(node).clone().addClass(n).get(0)) + c;
        a = self.node.closeTagString(node) + a;
      }
      /** @type {string} */
      b = a + b + c + $.FE.MARKERS;
      $(el).replaceWith('<span id="fr-break"></span>');
      var p = self.node.openTagString(parent) + $(parent).html() + self.node.closeTagString(parent);
      p = p.replace(/<span id="fr-break"><\/span>/g, b);
      $(parent).replaceWith(p);
    }
    /**
     * @param {Node} el
     * @return {undefined}
     */
    function init(el) {
      var parent = fn(el);
      var result = $.FE.MARKERS;
      /** @type {string} */
      var digits = "";
      /** @type {Node} */
      var node = el;
      /** @type {boolean} */
      var i = false;
      for (;node != parent;) {
        node = node.parentNode;
        /** @type {string} */
        var n = "A" == node.tagName && self.cursor.isAtEnd(el, node) ? "fr-to-remove" : "";
        if (!i) {
          if (!(node == parent)) {
            if (!self.node.isBlock(node)) {
              /** @type {boolean} */
              i = true;
              digits += $.FE.INVISIBLE_SPACE;
            }
          }
        }
        digits = self.node.openTagString($(node).clone().addClass(n).get(0)) + digits;
        result += self.node.closeTagString(node);
      }
      var grape = digits + result;
      $(el).remove();
      $(parent).after(grape);
    }
    /**
     * @param {Node} el
     * @return {undefined}
     */
    function load(el) {
      var node = fn(el);
      var container = node.previousSibling;
      if (container) {
        container = $(container).find(self.html.blockTagsQuery()).get(-1) || container;
        $(el).replaceWith($.FE.MARKERS);
        var elements = self.node.contents(container);
        if (elements.length) {
          if ("BR" == elements[elements.length - 1].tagName) {
            $(elements[elements.length - 1]).remove();
          }
        }
        $(node).find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
          if (this.parentNode == node) {
            $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
          }
        });
        var first;
        var fragment = self.node.contents(node)[0];
        for (;fragment && !self.node.isList(fragment);) {
          first = fragment.nextSibling;
          $(container).append(fragment);
          fragment = first;
        }
        container = node.previousSibling;
        for (;fragment;) {
          first = fragment.nextSibling;
          $(container).append(fragment);
          fragment = first;
        }
        $(node).remove();
      } else {
        var element = walk(node);
        if ($(el).replaceWith($.FE.MARKERS), element.parentNode && "LI" == element.parentNode.tagName) {
          var sibling = element.previousSibling;
          if (self.node.isBlock(sibling)) {
            $(node).find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
              if (this.parentNode == node) {
                $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
              }
            });
            $(sibling).append($(node).html());
          } else {
            $(element).before($(node).html());
          }
        } else {
          var m = self.html.defaultTag();
          if (m && 0 === $(node).find(self.html.blockTagsQuery()).length) {
            $(element).before("<" + m + ">" + $(node).html() + "</" + m + ">");
          } else {
            $(element).before($(node).html());
            self.html.wrap();
          }
        }
        $(node).remove();
        if (0 === $(element).find("li").length) {
          $(element).remove();
        }
      }
    }
    /**
     * @param {Node} el
     * @return {?}
     */
    function create(el) {
      var parent;
      var node = fn(el);
      var cell = node.nextSibling;
      if (cell) {
        parent = self.node.contents(cell);
        if (parent.length) {
          if ("BR" == parent[0].tagName) {
            $(parent[0]).remove();
          }
        }
        $(cell).find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
          if (this.parentNode == cell) {
            $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
          }
        });
        var first;
        /** @type {Node} */
        var element = el;
        var fragment = self.node.contents(cell)[0];
        for (;fragment && !self.node.isList(fragment);) {
          first = fragment.nextSibling;
          $(element).after(fragment);
          element = fragment;
          fragment = first;
        }
        for (;fragment;) {
          first = fragment.nextSibling;
          $(node).append(fragment);
          fragment = first;
        }
        $(el).replaceWith($.FE.MARKERS);
        $(cell).remove();
      } else {
        var target = node;
        for (;!target.nextSibling && target != self.el;) {
          target = target.parentNode;
        }
        if (target == self.el) {
          return false;
        }
        if (target = target.nextSibling, self.node.isBlock(target)) {
          if ($.FE.NO_DELETE_TAGS.indexOf(target.tagName) < 0) {
            $(el).replaceWith($.FE.MARKERS);
            parent = self.node.contents(node);
            if (parent.length) {
              if ("BR" == parent[parent.length - 1].tagName) {
                $(parent[parent.length - 1]).remove();
              }
            }
            $(node).append($(target).html());
            $(target).remove();
          }
        } else {
          parent = self.node.contents(node);
          if (parent.length) {
            if ("BR" == parent[parent.length - 1].tagName) {
              $(parent[parent.length - 1]).remove();
            }
          }
          $(el).replaceWith($.FE.MARKERS);
          for (;target && (!self.node.isBlock(target) && "BR" != target.tagName);) {
            $(node).append($(target));
            target = target.nextSibling;
          }
        }
      }
    }
    return{
      /** @type {function (Node): undefined} */
      _startEnter : update,
      /** @type {function (Node): undefined} */
      _middleEnter : handleClick,
      /** @type {function (Node): undefined} */
      _endEnter : init,
      /** @type {function (Node): undefined} */
      _backspace : load,
      /** @type {function (Node): ?} */
      _del : create
    };
  };
  /** @type {Array} */
  $.FE.NO_DELETE_TAGS = ["TH", "TD", "TR", "TABLE", "FORM"];
  /** @type {Array} */
  $.FE.SIMPLE_ENTER_TAGS = ["TH", "TD", "LI", "DL", "DT", "FORM"];
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.cursor = function(self) {
    /**
     * @param {?} node
     * @return {?}
     */
    function process(node) {
      return!!node && (!!self.node.isBlock(node) || (node.nextSibling && (node.nextSibling.nodeType == Node.TEXT_NODE && 0 === node.nextSibling.textContent.replace(/\u200b/g, "").length) ? process(node.nextSibling) : !(node.nextSibling && (!node.previousSibling || ("BR" != node.nextSibling.tagName || node.nextSibling.nextSibling))) && process(node.parentNode)));
    }
    /**
     * @param {?} node
     * @return {?}
     */
    function clone(node) {
      return!!node && (!!self.node.isBlock(node) || (node.previousSibling && (node.previousSibling.nodeType == Node.TEXT_NODE && 0 === node.previousSibling.textContent.replace(/\u200b/g, "").length) ? clone(node.previousSibling) : !node.previousSibling && (!(node.previousSibling || !self.node.hasClass(node.parentNode, "fr-inner")) || clone(node.parentNode))));
    }
    /**
     * @param {Node} node
     * @param {?} element
     * @return {?}
     */
    function replace(node, element) {
      return!!node && (node != self.$wp.get(0) && (node.previousSibling && (node.previousSibling.nodeType == Node.TEXT_NODE && 0 === node.previousSibling.textContent.replace(/\u200b/g, "").length) ? replace(node.previousSibling, element) : !node.previousSibling && (node.parentNode == element || replace(node.parentNode, element))));
    }
    /**
     * @param {Node} node
     * @param {?} context
     * @return {?}
     */
    function fn(node, context) {
      return!!node && (node != self.$wp.get(0) && (node.nextSibling && (node.nextSibling.nodeType == Node.TEXT_NODE && 0 === node.nextSibling.textContent.replace(/\u200b/g, "").length) ? fn(node.nextSibling, context) : !(node.nextSibling && (!node.previousSibling || ("BR" != node.nextSibling.tagName || node.nextSibling.nextSibling))) && (node.parentNode == context || fn(node.parentNode, context))));
    }
    /**
     * @param {(Node|string)} node
     * @return {?}
     */
    function append(node) {
      return $(node).parentsUntil(self.$el, "LI").length > 0 && 0 === $(node).parentsUntil("LI", "TABLE").length;
    }
    /**
     * @param {string} name
     * @param {boolean} all
     * @return {?}
     */
    function func(name, all) {
      /** @type {RegExp} */
      var pattern = new RegExp("([\\uD83C-\\uDBFF\\uDC00-\\uDFFF\\u200D]+)" + (all ? "" : "$"), "i");
      var match = name.match(pattern);
      return match ? match[0].length : 1;
    }
    /**
     * @param {Object} el
     * @return {undefined}
     */
    function create(el) {
      /** @type {boolean} */
      var deepestParent = $(el).parentsUntil(self.$el, "BLOCKQUOTE").length > 0;
      var item = self.node.deepestParent(el, [], !deepestParent);
      if (item && "BLOCKQUOTE" == item.tagName) {
        var li = self.node.deepestParent(el, [$(el).parentsUntil(self.$el, "BLOCKQUOTE").get(0)]);
        if (li) {
          if (li.previousSibling) {
            item = li;
          }
        }
      }
      if (null !== item) {
        var children;
        var node = item.previousSibling;
        if (self.node.isBlock(item) && (self.node.isEditable(item) && (node && $.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0))) {
          if (self.node.isDeletable(node)) {
            $(node).remove();
            $(el).replaceWith($.FE.MARKERS);
          } else {
            if (self.node.isEditable(node)) {
              if (self.node.isBlock(node)) {
                if (self.node.isEmpty(node) && !self.node.isList(node)) {
                  $(node).remove();
                  $(el).after(self.opts.keepFormatOnDelete ? $.FE.INVISIBLE_SPACE : "");
                } else {
                  if (self.node.isList(node) && (node = $(node).find("li:last").get(0)), children = self.node.contents(node), children.length && ("BR" == children[children.length - 1].tagName && $(children[children.length - 1]).remove()), "BLOCKQUOTE" == node.tagName && "BLOCKQUOTE" != item.tagName) {
                    children = self.node.contents(node);
                    for (;children.length && self.node.isBlock(children[children.length - 1]);) {
                      node = children[children.length - 1];
                      children = self.node.contents(node);
                    }
                  } else {
                    if ("BLOCKQUOTE" != node.tagName && "BLOCKQUOTE" == item.tagName) {
                      children = self.node.contents(item);
                      for (;children.length && self.node.isBlock(children[0]);) {
                        item = children[0];
                        children = self.node.contents(item);
                      }
                    }
                  }
                  if (self.node.isEmpty(item)) {
                    $(el).remove();
                    self.selection.setAtEnd(node, self.opts.keepFormatOnDelete);
                  } else {
                    $(el).replaceWith($.FE.MARKERS);
                    $(node).append(item.innerHTML);
                  }
                  $(item).remove();
                }
              } else {
                $(el).replaceWith($.FE.MARKERS);
                if ("BLOCKQUOTE" == item.tagName && node.nodeType == Node.ELEMENT_NODE) {
                  $(node).remove();
                } else {
                  $(node).after(self.node.isEmpty(item) ? "" : $(item).html());
                  $(item).remove();
                  if ("BR" == node.tagName) {
                    $(node).remove();
                  }
                }
              }
            }
          }
        }
      }
    }
    /**
     * @param {Function} el
     * @return {?}
     */
    function walk(el) {
      /** @type {Function} */
      var node = el;
      for (;!node.previousSibling;) {
        if (node = node.parentNode, self.node.isElement(node)) {
          return false;
        }
      }
      node = node.previousSibling;
      var nodes;
      if (!self.node.isBlock(node) && self.node.isEditable(node)) {
        nodes = self.node.contents(node);
        for (;node.nodeType != Node.TEXT_NODE && (!self.node.isDeletable(node) && (nodes.length && self.node.isEditable(node)));) {
          node = nodes[nodes.length - 1];
          nodes = self.node.contents(node);
        }
        if (node.nodeType == Node.TEXT_NODE) {
          var value = node.textContent;
          var valueLength = value.length;
          if (self.opts.tabSpaces && value.length >= self.opts.tabSpaces) {
            if (0 === value.substr(value.length - self.opts.tabSpaces, value.length - 1).replace(/ /g, "").replace(new RegExp($.FE.UNICODE_NBSP, "g"), "").length) {
              /** @type {number} */
              valueLength = value.length - self.opts.tabSpaces;
            }
          }
          node.textContent = value.substring(0, valueLength - func(value));
          /** @type {boolean} */
          var keepFormatOnDelete = value.length != node.textContent.length;
          if (0 === node.textContent.length) {
            if (keepFormatOnDelete && self.opts.keepFormatOnDelete) {
              $(node).after($.FE.INVISIBLE_SPACE + $.FE.MARKERS);
            } else {
              if ((2 != node.parentNode.childNodes.length || node.parentNode != el.parentNode) && 1 != node.parentNode.childNodes.length || (self.node.isBlock(node.parentNode) || self.node.isElement(node.parentNode))) {
                $(node).after($.FE.MARKERS);
                if (self.node.isElement(node.parentNode)) {
                  if (!el.nextSibling) {
                    if (node.previousSibling) {
                      if ("BR" == node.previousSibling.tagName) {
                        $(el).after("<br>");
                      }
                    }
                  }
                }
                node.parentNode.removeChild(node);
              } else {
                $(node.parentNode).after($.FE.MARKERS);
                $(node.parentNode).remove();
              }
            }
          } else {
            $(node).after($.FE.MARKERS);
          }
        } else {
          if (self.node.isDeletable(node)) {
            $(node).after($.FE.MARKERS);
            $(node).remove();
          } else {
            if (el.nextSibling && ("BR" == el.nextSibling.tagName && (self.node.isVoid(node) && "BR" != node.tagName))) {
              $(el.nextSibling).remove();
              $(el).replaceWith($.FE.MARKERS);
            } else {
              if (false !== self.events.trigger("node.remove", [$(node)])) {
                $(node).after($.FE.MARKERS);
                $(node).remove();
              }
            }
          }
        }
      } else {
        if ($.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0 && (self.node.isEditable(node) || self.node.isDeletable(node))) {
          if (self.node.isDeletable(node)) {
            $(el).replaceWith($.FE.MARKERS);
            $(node).remove();
          } else {
            if (self.node.isEmpty(node) && !self.node.isList(node)) {
              $(node).remove();
              $(el).replaceWith($.FE.MARKERS);
            } else {
              if (self.node.isList(node)) {
                node = $(node).find("li:last").get(0);
              }
              nodes = self.node.contents(node);
              if (nodes) {
                if ("BR" == nodes[nodes.length - 1].tagName) {
                  $(nodes[nodes.length - 1]).remove();
                }
              }
              nodes = self.node.contents(node);
              for (;nodes && self.node.isBlock(nodes[nodes.length - 1]);) {
                node = nodes[nodes.length - 1];
                nodes = self.node.contents(node);
              }
              $(node).append($.FE.MARKERS);
              /** @type {Function} */
              var child = el;
              for (;!child.previousSibling;) {
                child = child.parentNode;
              }
              for (;child && ("BR" !== child.tagName && !self.node.isBlock(child));) {
                var lineSeparator = child;
                child = child.nextSibling;
                $(node).append(lineSeparator);
              }
              if (child) {
                if ("BR" == child.tagName) {
                  $(child).remove();
                }
              }
              $(el).remove();
            }
          }
        } else {
          if (el.nextSibling) {
            if ("BR" == el.nextSibling.tagName) {
              $(el.nextSibling).remove();
            }
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function update() {
      /** @type {boolean} */
      var v = false;
      var node = self.markers.insert();
      if (!node) {
        return true;
      }
      var parent = node.parentNode;
      for (;parent && !self.node.isElement(parent);) {
        if ("false" === parent.getAttribute("contenteditable")) {
          return $(node).replaceWith($.FE.MARKERS), self.selection.restore(), false;
        }
        if ("true" === parent.getAttribute("contenteditable")) {
          break;
        }
        parent = parent.parentNode;
      }
      self.el.normalize();
      var item = node.previousSibling;
      if (item) {
        var name = item.textContent;
        if (name) {
          if (name.length) {
            if (8203 == name.charCodeAt(name.length - 1)) {
              if (1 == name.length) {
                $(item).remove();
              } else {
                item.textContent = item.textContent.substr(0, name.length - func(name));
              }
            }
          }
        }
      }
      return process(node) ? v = walk(node) : clone(node) ? append(node) && replace(node, $(node).parents("li:first").get(0)) ? self.cursorLists._backspace(node) : create(node) : v = walk(node), $(node).remove(), reset(), self.html.fillEmptyBlocks(true), self.opts.htmlUntouched || (self.html.cleanEmptyTags(), self.clean.lists()), self.spaces.normalizeAroundCursor(), self.selection.restore(), v;
    }
    /**
     * @param {HTMLElement} selector
     * @return {undefined}
     */
    function test(selector) {
      /** @type {boolean} */
      var deepestParent = $(selector).parentsUntil(self.$el, "BLOCKQUOTE").length > 0;
      var elem = self.node.deepestParent(selector, [], !deepestParent);
      if (elem && "BLOCKQUOTE" == elem.tagName) {
        var el = self.node.deepestParent(selector, [$(selector).parentsUntil(self.$el, "BLOCKQUOTE").get(0)]);
        if (el) {
          if (el.nextSibling) {
            elem = el;
          }
        }
      }
      if (null !== elem) {
        var nodes;
        var node = elem.nextSibling;
        if (self.node.isBlock(elem) && ((self.node.isEditable(elem) || self.node.isDeletable(elem)) && (node && $.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0))) {
          if (self.node.isDeletable(node)) {
            $(node).remove();
            $(selector).replaceWith($.FE.MARKERS);
          } else {
            if (self.node.isBlock(node) && self.node.isEditable(node)) {
              if (self.node.isList(node)) {
                if (self.node.isEmpty(elem, true)) {
                  $(elem).remove();
                  $(node).find("li:first").prepend($.FE.MARKERS);
                } else {
                  var rule = $(node).find("li:first");
                  if ("BLOCKQUOTE" == elem.tagName) {
                    nodes = self.node.contents(elem);
                    if (nodes.length) {
                      if (self.node.isBlock(nodes[nodes.length - 1])) {
                        elem = nodes[nodes.length - 1];
                      }
                    }
                  }
                  if (0 === rule.find("ul, ol").length) {
                    $(selector).replaceWith($.FE.MARKERS);
                    rule.find(self.html.blockTagsQuery()).not("ol, ul, table").each(function() {
                      if (this.parentNode == rule.get(0)) {
                        $(this).replaceWith($(this).html() + (self.node.isEmpty(this) ? "" : "<br>"));
                      }
                    });
                    $(elem).append(self.node.contents(rule.get(0)));
                    rule.remove();
                    if (0 === $(node).find("li").length) {
                      $(node).remove();
                    }
                  }
                }
              } else {
                if (nodes = self.node.contents(node), nodes.length && ("BR" == nodes[0].tagName && $(nodes[0]).remove()), "BLOCKQUOTE" != node.tagName && "BLOCKQUOTE" == elem.tagName) {
                  nodes = self.node.contents(elem);
                  for (;nodes.length && self.node.isBlock(nodes[nodes.length - 1]);) {
                    elem = nodes[nodes.length - 1];
                    nodes = self.node.contents(elem);
                  }
                } else {
                  if ("BLOCKQUOTE" == node.tagName && "BLOCKQUOTE" != elem.tagName) {
                    nodes = self.node.contents(node);
                    for (;nodes.length && self.node.isBlock(nodes[0]);) {
                      node = nodes[0];
                      nodes = self.node.contents(node);
                    }
                  }
                }
                $(selector).replaceWith($.FE.MARKERS);
                $(elem).append(node.innerHTML);
                $(node).remove();
              }
            } else {
              $(selector).replaceWith($.FE.MARKERS);
              for (;node && ("BR" !== node.tagName && (!self.node.isBlock(node) && self.node.isEditable(node)));) {
                var current = node;
                node = node.nextSibling;
                $(elem).append(current);
              }
              if (node) {
                if ("BR" == node.tagName) {
                  if (self.node.isEditable(node)) {
                    $(node).remove();
                  }
                }
              }
            }
          }
        }
      }
    }
    /**
     * @param {Node} element
     * @return {?}
     */
    function load(element) {
      /** @type {Node} */
      var node = element;
      for (;!node.nextSibling;) {
        if (node = node.parentNode, self.node.isElement(node)) {
          return false;
        }
      }
      if (node = node.nextSibling, "BR" == node.tagName && self.node.isEditable(node)) {
        if (node.nextSibling) {
          if (self.node.isBlock(node.nextSibling) && self.node.isEditable(node.nextSibling)) {
            if (!($.FE.NO_DELETE_TAGS.indexOf(node.nextSibling.tagName) < 0)) {
              return void $(node).remove();
            }
            node = node.nextSibling;
            $(node.previousSibling).remove();
          }
        } else {
          if (process(node)) {
            if (append(element)) {
              self.cursorLists._del(element);
            } else {
              var normalizedRange = self.node.deepestParent(node);
              if (normalizedRange) {
                if (!self.node.isEmpty(self.node.blockParent(node)) || (self.node.blockParent(node).nextSibling && $.FE.NO_DELETE_TAGS.indexOf(self.node.blockParent(node).nextSibling.tagName)) < 0) {
                  $(node).remove();
                }
                test(element);
              }
            }
            return;
          }
        }
      }
      var nodes;
      if (!self.node.isBlock(node) && self.node.isEditable(node)) {
        nodes = self.node.contents(node);
        for (;node.nodeType != Node.TEXT_NODE && (nodes.length && (!self.node.isDeletable(node) && self.node.isEditable(node)));) {
          node = nodes[0];
          nodes = self.node.contents(node);
        }
        if (node.nodeType == Node.TEXT_NODE) {
          $(node).before($.FE.MARKERS);
          if (node.textContent.length) {
            node.textContent = node.textContent.substring(func(node.textContent, true), node.textContent.length);
          }
        } else {
          if (self.node.isDeletable(node)) {
            $(node).before($.FE.MARKERS);
            $(node).remove();
          } else {
            if (false !== self.events.trigger("node.remove", [$(node)])) {
              $(node).before($.FE.MARKERS);
              $(node).remove();
            }
          }
        }
        $(element).remove();
      } else {
        if ($.FE.NO_DELETE_TAGS.indexOf(node.tagName) < 0 && (self.node.isEditable(node) || self.node.isDeletable(node))) {
          if (self.node.isDeletable(node)) {
            $(element).replaceWith($.FE.MARKERS);
            $(node).remove();
          } else {
            if (self.node.isList(node)) {
              if (element.previousSibling) {
                $(node).find("li:first").prepend(element);
                self.cursorLists._backspace(element);
              } else {
                $(node).find("li:first").prepend($.FE.MARKERS);
                $(element).remove();
              }
            } else {
              if (nodes = self.node.contents(node), nodes && ("BR" == nodes[0].tagName && $(nodes[0]).remove()), nodes && "BLOCKQUOTE" == node.tagName) {
                var el = nodes[0];
                $(element).before($.FE.MARKERS);
                for (;el && "BR" != el.tagName;) {
                  var d = el;
                  el = el.nextSibling;
                  $(element).before(d);
                }
                if (el) {
                  if ("BR" == el.tagName) {
                    $(el).remove();
                  }
                }
              } else {
                $(element).after($(node).html()).after($.FE.MARKERS);
                $(node).remove();
              }
            }
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function start() {
      var child = self.markers.insert();
      if (!child) {
        return false;
      }
      if (self.el.normalize(), process(child)) {
        if (append(child)) {
          if (0 === $(child).parents("li:first").find("ul, ol").length) {
            self.cursorLists._del(child);
          } else {
            var container = $(child).parents("li:first").find("ul:first, ol:first").find("li:first");
            container = container.find(self.html.blockTagsQuery()).get(-1) || container;
            container.prepend(child);
            self.cursorLists._backspace(child);
          }
        } else {
          test(child);
        }
      } else {
        load(clone(child) ? child : child);
      }
      $(child).remove();
      reset();
      self.html.fillEmptyBlocks(true);
      if (!self.opts.htmlUntouched) {
        self.html.cleanEmptyTags();
        self.clean.lists();
      }
      self.spaces.normalizeAroundCursor();
      self.selection.restore();
    }
    /**
     * @return {undefined}
     */
    function reset() {
      var codeSegments = self.el.querySelectorAll("blockquote:empty");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        codeSegments[i].parentNode.removeChild(codeSegments[i]);
      }
    }
    /**
     * @return {undefined}
     */
    function done() {
      self.$el.find(".fr-to-remove").each(function() {
        var codeSegments = self.node.contents(this);
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          if (codeSegments[i].nodeType == Node.TEXT_NODE) {
            codeSegments[i].textContent = codeSegments[i].textContent.replace(/\u200B/g, "");
          }
        }
        $(this).replaceWith(this.innerHTML);
      });
    }
    /**
     * @param {Node} el
     * @param {boolean} type
     * @param {boolean} callback
     * @return {?}
     */
    function parse(el, type, callback) {
      var letter;
      var node = self.node.deepestParent(el, [], !callback);
      if (node && "BLOCKQUOTE" == node.tagName) {
        return fn(el, node) ? (letter = self.html.defaultTag(), letter ? $(node).after("<" + letter + ">" + $.FE.MARKERS + "<br></" + letter + ">") : $(node).after($.FE.MARKERS + "<br>"), $(el).remove(), false) : (remove(el, type, callback), false);
      }
      if (null == node) {
        letter = self.html.defaultTag();
        if (letter && self.node.isElement(el.parentNode)) {
          $(el).replaceWith("<" + letter + ">" + $.FE.MARKERS + "<br></" + letter + ">");
        } else {
          if (!el.previousSibling || ($(el.previousSibling).is("br") || el.nextSibling)) {
            $(el).replaceWith("<br>" + $.FE.MARKERS);
          } else {
            $(el).replaceWith("<br>" + $.FE.MARKERS + "<br>");
          }
        }
      } else {
        /** @type {Node} */
        var parent = el;
        /** @type {string} */
        var options = "";
        if (!(self.node.isBlock(node) && !type)) {
          /** @type {string} */
          options = "<br/>";
        }
        /** @type {string} */
        var pfx = "";
        /** @type {string} */
        var line = "";
        letter = self.html.defaultTag();
        /** @type {string} */
        var indent = "";
        /** @type {string} */
        var optsData = "";
        if (letter) {
          if (self.node.isBlock(node)) {
            /** @type {string} */
            indent = "<" + letter + ">";
            /** @type {string} */
            optsData = "</" + letter + ">";
            if (node.tagName == letter.toUpperCase()) {
              indent = self.node.openTagString($(node).clone().removeAttr("id").get(0));
            }
          }
        }
        do {
          if (parent = parent.parentNode, !type || (parent != node || type && !self.node.isBlock(node))) {
            if (pfx += self.node.closeTagString(parent), parent == node && self.node.isBlock(node)) {
              line = indent + line;
            } else {
              /** @type {string} */
              var n = "A" == parent.tagName && fn(el, parent) ? "fr-to-remove" : "";
              line = self.node.openTagString($(parent).clone().addClass(n).get(0)) + line;
            }
          }
        } while (parent != node);
        /** @type {string} */
        options = pfx + options + line + (el.parentNode == node && self.node.isBlock(node) ? "" : $.FE.INVISIBLE_SPACE) + $.FE.MARKERS;
        if (self.node.isBlock(node)) {
          if (!$(node).find("*:last").is("br")) {
            $(node).append("<br/>");
          }
        }
        $(el).after('<span id="fr-break"></span>');
        $(el).remove();
        if (!(node.nextSibling && !self.node.isBlock(node.nextSibling))) {
          if (!self.node.isBlock(node)) {
            $(node).after("<br>");
          }
        }
        var model;
        model = !type && self.node.isBlock(node) ? self.node.openTagString(node) + $(node).html() + optsData : self.node.openTagString(node) + $(node).html() + self.node.closeTagString(node);
        model = model.replace(/<span id="fr-break"><\/span>/g, options);
        $(node).replaceWith(model);
      }
    }
    /**
     * @param {Node} el
     * @param {boolean} name
     * @param {boolean} callback
     * @return {?}
     */
    function add(el, name, callback) {
      var quoted;
      var node = self.node.deepestParent(el, [], !callback);
      if (node && "TABLE" == node.tagName) {
        return $(node).find("td:first, th:first").prepend(el), add(el, name, callback);
      }
      if (node && "BLOCKQUOTE" == node.tagName) {
        if (replace(el, node)) {
          return quoted = self.html.defaultTag(), quoted ? $(node).before("<" + quoted + ">" + $.FE.MARKERS + "<br></" + quoted + ">") : $(node).before($.FE.MARKERS + "<br>"), $(el).remove(), false;
        }
        if (fn(el, node)) {
          parse(el, name, true);
        } else {
          remove(el, name, true);
        }
      }
      if (null == node) {
        quoted = self.html.defaultTag();
        if (quoted && self.node.isElement(el.parentNode)) {
          $(el).replaceWith("<" + quoted + ">" + $.FE.MARKERS + "<br></" + quoted + ">");
        } else {
          $(el).replaceWith("<br>" + $.FE.MARKERS);
        }
      } else {
        if (self.node.isBlock(node)) {
          if ("PRE" == node.tagName && (name = true), name) {
            $(el).remove();
            $(node).prepend("<br>" + $.FE.MARKERS);
          } else {
            if (self.node.isEmpty(node, true)) {
              return parse(el, name, callback);
            }
            if (self.opts.keepFormatOnDelete) {
              /** @type {Node} */
              var parent = el;
              var grape = $.FE.INVISIBLE_SPACE;
              for (;parent != node && !self.node.isElement(parent);) {
                parent = parent.parentNode;
                grape = self.node.openTagString(parent) + grape + self.node.closeTagString(parent);
              }
              $(node).before(grape);
            } else {
              $(node).before(self.node.openTagString($(node).clone().removeAttr("id").get(0)) + "<br>" + self.node.closeTagString(node));
            }
          }
        } else {
          $(node).before("<br>");
        }
        $(el).remove();
      }
    }
    /**
     * @param {Node} node
     * @param {boolean} keepData
     * @param {boolean} listener
     * @return {undefined}
     */
    function remove(node, keepData, listener) {
      var child = self.node.deepestParent(node, [], !listener);
      if (null == child) {
        if (self.html.defaultTag() && node.parentNode === self.el) {
          $(node).replaceWith("<" + self.html.defaultTag() + ">" + $.FE.MARKERS + "<br></" + self.html.defaultTag() + ">");
        } else {
          if (!(node.nextSibling && !self.node.isBlock(node.nextSibling))) {
            $(node).after("<br>");
          }
          $(node).replaceWith("<br>" + $.FE.MARKERS);
        }
      } else {
        /** @type {Node} */
        var element = node;
        /** @type {string} */
        var t = "";
        if ("PRE" == child.tagName) {
          /** @type {boolean} */
          keepData = true;
        }
        if (!(self.node.isBlock(child) && !keepData)) {
          /** @type {string} */
          t = "<br>";
        }
        /** @type {string} */
        var prefix = "";
        /** @type {string} */
        var name = "";
        do {
          var container = element;
          if (element = element.parentNode, "BLOCKQUOTE" == child.tagName && (self.node.isEmpty(container) && (!self.node.hasClass(container, "fr-marker") && ($(container).find(node).length > 0 && $(container).after(node)))), ("BLOCKQUOTE" != child.tagName || !fn(node, element) && !replace(node, element)) && (!keepData || (element != child || keepData && !self.node.isBlock(child)))) {
            prefix += self.node.closeTagString(element);
            /** @type {string} */
            var focusClass = "A" == element.tagName && fn(node, element) ? "fr-to-remove" : "";
            name = self.node.openTagString($(element).clone().addClass(focusClass).removeAttr("id").get(0)) + name;
          }
        } while (element != child);
        var drop = child == node.parentNode && self.node.isBlock(child) || node.nextSibling;
        if ("BLOCKQUOTE" == child.tagName) {
          if (node.previousSibling) {
            if (self.node.isBlock(node.previousSibling)) {
              if (node.nextSibling) {
                if ("BR" == node.nextSibling.tagName) {
                  $(node.nextSibling).after(node);
                  if (node.nextSibling) {
                    if ("BR" == node.nextSibling.tagName) {
                      $(node.nextSibling).remove();
                    }
                  }
                }
              }
            }
          }
          var enabled = self.html.defaultTag();
          /** @type {string} */
          t = prefix + t + (enabled ? "<" + enabled + ">" : "") + $.FE.MARKERS + "<br>" + (enabled ? "</" + enabled + ">" : "") + name;
        } else {
          /** @type {string} */
          t = prefix + t + name + (drop ? "" : $.FE.INVISIBLE_SPACE) + $.FE.MARKERS;
        }
        $(node).replaceWith('<span id="fr-break"></span>');
        var str = self.node.openTagString(child) + $(child).html() + self.node.closeTagString(child);
        str = str.replace(/<span id="fr-break"><\/span>/g, t);
        $(child).replaceWith(str);
      }
    }
    /**
     * @param {boolean} name
     * @return {?}
     */
    function set(name) {
      var el = self.markers.insert();
      if (!el) {
        return true;
      }
      self.el.normalize();
      /** @type {boolean} */
      var callback = false;
      if ($(el).parentsUntil(self.$el, "BLOCKQUOTE").length > 0) {
        /** @type {boolean} */
        name = false;
        /** @type {boolean} */
        callback = true;
      }
      if ($(el).parentsUntil(self.$el, "TD, TH").length) {
        /** @type {boolean} */
        callback = false;
      }
      if (process(el)) {
        if (!append(el) || (name || callback)) {
          parse(el, name, callback);
        } else {
          self.cursorLists._endEnter(el);
        }
      } else {
        if (clone(el)) {
          if (!append(el) || (name || callback)) {
            add(el, name, callback);
          } else {
            self.cursorLists._startEnter(el);
          }
        } else {
          if (!append(el) || (name || callback)) {
            remove(el, name, callback);
          } else {
            self.cursorLists._middleEnter(el);
          }
        }
      }
      done();
      self.html.fillEmptyBlocks(true);
      if (!self.opts.htmlUntouched) {
        self.html.cleanEmptyTags();
        self.clean.lists();
      }
      self.spaces.normalizeAroundCursor();
      self.selection.restore();
    }
    return{
      /** @type {function (boolean): ?} */
      enter : set,
      /** @type {function (): ?} */
      backspace : update,
      /** @type {function (): ?} */
      del : start,
      /** @type {function (Node, ?): ?} */
      isAtEnd : fn,
      /** @type {function (Node, ?): ?} */
      isAtStart : replace
    };
  };
  /** @type {number} */
  $.FE.ENTER_P = 0;
  /** @type {number} */
  $.FE.ENTER_DIV = 1;
  /** @type {number} */
  $.FE.ENTER_BR = 2;
  $.FE.KEYCODE = {
    BACKSPACE : 8,
    TAB : 9,
    ENTER : 13,
    SHIFT : 16,
    CTRL : 17,
    ALT : 18,
    ESC : 27,
    SPACE : 32,
    ARROW_LEFT : 37,
    ARROW_UP : 38,
    ARROW_RIGHT : 39,
    ARROW_DOWN : 40,
    DELETE : 46,
    ZERO : 48,
    ONE : 49,
    TWO : 50,
    THREE : 51,
    FOUR : 52,
    FIVE : 53,
    SIX : 54,
    SEVEN : 55,
    EIGHT : 56,
    NINE : 57,
    FF_SEMICOLON : 59,
    FF_EQUALS : 61,
    QUESTION_MARK : 63,
    A : 65,
    B : 66,
    C : 67,
    D : 68,
    E : 69,
    F : 70,
    G : 71,
    H : 72,
    I : 73,
    J : 74,
    K : 75,
    L : 76,
    M : 77,
    N : 78,
    O : 79,
    P : 80,
    Q : 81,
    R : 82,
    S : 83,
    T : 84,
    U : 85,
    V : 86,
    W : 87,
    X : 88,
    Y : 89,
    Z : 90,
    META : 91,
    NUM_ZERO : 96,
    NUM_ONE : 97,
    NUM_TWO : 98,
    NUM_THREE : 99,
    NUM_FOUR : 100,
    NUM_FIVE : 101,
    NUM_SIX : 102,
    NUM_SEVEN : 103,
    NUM_EIGHT : 104,
    NUM_NINE : 105,
    NUM_MULTIPLY : 106,
    NUM_PLUS : 107,
    NUM_MINUS : 109,
    NUM_PERIOD : 110,
    NUM_DIVISION : 111,
    F1 : 112,
    F2 : 113,
    F3 : 114,
    F4 : 115,
    F5 : 116,
    F6 : 117,
    F7 : 118,
    F8 : 119,
    F9 : 120,
    F10 : 121,
    F11 : 122,
    F12 : 123,
    FF_HYPHEN : 173,
    SEMICOLON : 186,
    DASH : 189,
    EQUALS : 187,
    COMMA : 188,
    HYPHEN : 189,
    PERIOD : 190,
    SLASH : 191,
    APOSTROPHE : 192,
    TILDE : 192,
    SINGLE_QUOTE : 222,
    OPEN_SQUARE_BRACKET : 219,
    BACKSLASH : 220,
    CLOSE_SQUARE_BRACKET : 221,
    IME : 229
  };
  $.extend($.FE.DEFAULTS, {
    enter : $.FE.ENTER_P,
    multiLine : true,
    tabSpaces : 0
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.keys = function(self) {
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function clickHandler(event) {
      if (self.opts.multiLine) {
        if (self.helpers.isIOS()) {
          oldtitle = self.snapshot.get();
        } else {
          event.preventDefault();
          event.stopPropagation();
          if (!self.selection.isCollapsed()) {
            self.selection.remove();
          }
          self.cursor.enter();
        }
      } else {
        event.preventDefault();
        event.stopPropagation();
      }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function cancel(event) {
      event.preventDefault();
      event.stopPropagation();
      if (self.opts.multiLine) {
        if (!self.selection.isCollapsed()) {
          self.selection.remove();
        }
        self.cursor.enter(true);
      }
    }
    /**
     * @return {undefined}
     */
    function initialize() {
      setTimeout(function() {
        self.events.disableBlur();
        self.events.focus();
      }, 0);
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function handleClick(event) {
      if (self.selection.isCollapsed()) {
        if (self.helpers.isIOS()) {
          oldtitle = self.snapshot.get();
        } else {
          self.cursor.backspace();
          event.preventDefault();
          event.stopPropagation();
        }
      } else {
        event.preventDefault();
        event.stopPropagation();
        self.selection.remove();
        self.html.fillEmptyBlocks();
      }
      self.placeholder.refresh();
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function stop(event) {
      event.preventDefault();
      event.stopPropagation();
      if ("" === self.selection.text()) {
        self.cursor.del();
      } else {
        self.selection.remove();
      }
      self.placeholder.refresh();
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function remove(event) {
      var offsetParent = self.selection.element();
      if (!self.helpers.isMobile() && (offsetParent && "A" == offsetParent.tagName)) {
        event.preventDefault();
        event.stopPropagation();
        if (!self.selection.isCollapsed()) {
          self.selection.remove();
        }
        var element = self.markers.insert();
        if (element) {
          var node = element.previousSibling;
          if (!element.nextSibling && (element.parentNode && "A" == element.parentNode.tagName)) {
            element.parentNode.insertAdjacentHTML("afterend", "&nbsp;" + $.FE.MARKERS);
            element.parentNode.removeChild(element);
          } else {
            if (node && (node.nodeType == Node.TEXT_NODE && (1 == node.textContent.length && 160 == node.textContent.charCodeAt(0)))) {
              /** @type {string} */
              node.textContent = node.textContent + " ";
            } else {
              element.insertAdjacentHTML("beforebegin", "&nbsp;");
            }
            element.outerHTML = $.FE.MARKERS;
          }
          self.selection.restore();
        }
      }
    }
    /**
     * @return {undefined}
     */
    function onSuccess() {
      if (self.browser.mozilla && (self.selection.isCollapsed() && !elem)) {
        var rng = self.selection.ranges(0);
        var node = rng.startContainer;
        var end = rng.startOffset;
        if (node) {
          if (node.nodeType == Node.TEXT_NODE) {
            if (end <= node.textContent.length) {
              if (end > 0) {
                if (32 == node.textContent.charCodeAt(end - 1)) {
                  self.selection.save();
                  self.spaces.normalize();
                  self.selection.restore();
                }
              }
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.selection.isFull()) {
        setTimeout(function() {
          var c = self.html.defaultTag();
          if (c) {
            self.$el.html("<" + c + ">" + $.FE.MARKERS + "<br/></" + c + ">");
          } else {
            self.$el.html($.FE.MARKERS + "<br/>");
          }
          self.selection.restore();
          self.placeholder.refresh();
          self.button.bulkRefresh();
          self.undo.saveStep();
        }, 0);
      }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function start(event) {
      if (self.opts.tabSpaces > 0) {
        if (self.selection.isCollapsed()) {
          self.undo.saveStep();
          event.preventDefault();
          event.stopPropagation();
          /** @type {string} */
          var caption = "";
          /** @type {number} */
          var tabSpaces = 0;
          for (;tabSpaces < self.opts.tabSpaces;tabSpaces++) {
            caption += "&nbsp;";
          }
          self.html.insert(caption);
          self.placeholder.refresh();
          self.undo.saveStep();
        } else {
          event.preventDefault();
          event.stopPropagation();
          if (event.shiftKey) {
            self.commands.outdent();
          } else {
            self.commands.indent();
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function uncaught() {
      /** @type {boolean} */
      elem = false;
    }
    /**
     * @return {undefined}
     */
    function highlightCode() {
      /** @type {boolean} */
      elem = false;
    }
    /**
     * @return {?}
     */
    function restoreScript() {
      return elem;
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function onKeyDown(event) {
      self.events.disableBlur();
      /** @type {null} */
      oldtitle = null;
      var key = event.which;
      if (16 === key) {
        return true;
      }
      if (which = key, key === $.FE.KEYCODE.IME) {
        return elem = true, true;
      }
      /** @type {boolean} */
      elem = false;
      var program = run(key) && !keyPress(event);
      /** @type {boolean} */
      var inverse = key == $.FE.KEYCODE.BACKSPACE || key == $.FE.KEYCODE.DELETE;
      if ((self.selection.isFull() && (!self.opts.keepFormatOnDelete && !self.placeholder.isVisible()) || inverse && (self.placeholder.isVisible() && self.opts.keepFormatOnDelete)) && (program || inverse)) {
        var n = self.html.defaultTag();
        if (n ? self.$el.html("<" + n + ">" + $.FE.MARKERS + "<br/></" + n + ">") : self.$el.html($.FE.MARKERS + "<br/>"), self.selection.restore(), !run(key)) {
          return event.preventDefault(), true;
        }
      }
      if (key == $.FE.KEYCODE.ENTER) {
        if (event.shiftKey) {
          cancel(event);
        } else {
          clickHandler(event);
        }
      } else {
        if (key === $.FE.KEYCODE.BACKSPACE && (event.metaKey || event.ctrlKey)) {
          initialize();
        } else {
          if (key != $.FE.KEYCODE.BACKSPACE || (keyPress(event) || event.altKey)) {
            if (key != $.FE.KEYCODE.DELETE || (keyPress(event) || (event.altKey || event.shiftKey))) {
              if (key == $.FE.KEYCODE.SPACE) {
                remove(event);
              } else {
                if (key == $.FE.KEYCODE.TAB) {
                  start(event);
                } else {
                  if (!keyPress(event)) {
                    if (!!run(event.which)) {
                      if (!self.selection.isCollapsed()) {
                        if (!event.ctrlKey) {
                          self.selection.remove();
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (self.placeholder.isVisible()) {
                event.preventDefault();
                event.stopPropagation();
              } else {
                stop(event);
              }
            }
          } else {
            if (self.placeholder.isVisible()) {
              event.preventDefault();
              event.stopPropagation();
            } else {
              handleClick(event);
            }
          }
        }
      }
      self.events.enableBlur();
    }
    /**
     * @param {?} node
     * @return {undefined}
     */
    function load(node) {
      var treeWalker = self.doc.createTreeWalker(node, NodeFilter.SHOW_TEXT, self.node.filter(function(elem) {
        return/\u200B/gi.test(elem.textContent);
      }), false);
      for (;treeWalker.nextNode();) {
        var res = treeWalker.currentNode;
        res.textContent = res.textContent.replace(/\u200B/gi, "");
      }
    }
    /**
     * @return {?}
     */
    function handler() {
      if (!self.$wp) {
        return true;
      }
      var top;
      if (self.opts.height || self.opts.heightMax) {
        top = self.position.getBoundingRect().top;
        if (self.helpers.isIOS() || self.helpers.isAndroid()) {
          top -= self.helpers.scrollTop();
        }
        if (self.opts.iframe) {
          top += self.$iframe.offset().top;
        }
        if (top > self.$wp.offset().top - self.helpers.scrollTop() + self.$wp.height() - 20) {
          self.$wp.scrollTop(top + self.$wp.scrollTop() - (self.$wp.height() + self.$wp.offset().top) + self.helpers.scrollTop() + 20);
        }
      } else {
        top = self.position.getBoundingRect().top;
        if (self.opts.toolbarBottom) {
          top += self.opts.toolbarStickyOffset;
        }
        if (self.helpers.isIOS() || self.helpers.isAndroid()) {
          top -= self.helpers.scrollTop();
        }
        if (self.opts.iframe) {
          top += self.$iframe.offset().top;
          top -= self.helpers.scrollTop();
        }
        top += self.opts.toolbarStickyOffset;
        if (top > self.o_win.innerHeight - 20) {
          $(self.o_win).scrollTop(top + self.helpers.scrollTop() - self.o_win.innerHeight + 20);
        }
        top = self.position.getBoundingRect().top;
        if (!self.opts.toolbarBottom) {
          top -= self.opts.toolbarStickyOffset;
        }
        if (self.helpers.isIOS() || self.helpers.isAndroid()) {
          top -= self.helpers.scrollTop();
        }
        if (self.opts.iframe) {
          top += self.$iframe.offset().top;
          top -= self.helpers.scrollTop();
        }
        if (top < self.$tb.height() + 20) {
          if (top >= 0) {
            $(self.o_win).scrollTop(top + self.helpers.scrollTop() - self.$tb.height() - 20);
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function create() {
      var attribute = self.selection.element();
      var node = self.node.blockParent(attribute);
      if (node && ("DIV" == node.tagName && self.selection.info(node).atStart)) {
        var div = self.html.defaultTag();
        if (node.previousSibling) {
          if ("DIV" != node.previousSibling.tagName) {
            if (div) {
              if ("div" != div) {
                self.selection.save();
                $(node).replaceWith("<" + div + ">" + node.innerHTML + "</" + div + ">");
                self.selection.restore();
              }
            }
          }
        }
      }
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function update(e) {
      if (0 === e.which && (which && (e.which = which)), self.helpers.isIOS() && (e && oldtitle)) {
        if (e.which == $.FE.KEYCODE.ENTER) {
          self.snapshot.restore(oldtitle);
          self.cursor.enter();
        } else {
          if (e.which == $.FE.KEYCODE.BACKSPACE) {
            var state = self.snapshot.get();
            self.snapshot.restore(oldtitle);
            self.cursor.backspace();
            if (self.el.innerHTML !== state.html) {
              self.snapshot.restore(state);
            }
          }
        }
      }
      if (self.helpers.isAndroid() && self.browser.mozilla) {
        return true;
      }
      if (elem) {
        return false;
      }
      if (!self.selection.isCollapsed()) {
        return true;
      }
      if (e && (e.which === $.FE.KEYCODE.META || e.which == $.FE.KEYCODE.CTRL)) {
        return true;
      }
      if (e && contains(e.which)) {
        return true;
      }
      if (e) {
        if (e.which == $.FE.KEYCODE.ENTER) {
          if (self.helpers.isIOS()) {
            create();
          }
        }
      }
      if (e) {
        if (e.which == $.FE.KEYCODE.ENTER || (e.which == $.FE.KEYCODE.BACKSPACE || e.which >= 37 && (e.which <= 40 && !self.browser.msie))) {
          handler();
        }
      }
      /**
       * @param {Element} field
       * @return {?}
       */
      var check = function(field) {
        if (!field) {
          return false;
        }
        var html = field.innerHTML;
        return!!((html = html.replace(/<span[^>]*? class\s*=\s*["']?fr-marker["']?[^>]+>\u200b<\/span>/gi, "")) && (/\u200B/.test(html) && html.replace(/\u200B/gi, "").length > 0));
      };
      /**
       * @param {HTMLElement} node
       * @return {?}
       */
      var update = function(node) {
        /** @type {RegExp} */
        var typePattern = /[\u3041-\u3096\u30A0-\u30FF\u4E00-\u9FFF\u3130-\u318F\uAC00-\uD7AF]/gi;
        return!self.helpers.isIOS() || 0 === ((node.textContent || "").match(typePattern) || []).length;
      };
      var id = self.selection.element();
      if (check(id)) {
        if (!self.node.hasClass(id, "fr-marker")) {
          if ("IFRAME" != id.tagName) {
            if (update(id)) {
              self.selection.save();
              load(id);
              self.selection.restore();
            }
          }
        }
      }
    }
    /**
     * @param {Object} event
     * @return {?}
     */
    function keyPress(event) {
      if (-1 != navigator.userAgent.indexOf("Mac OS X")) {
        if (event.metaKey && !event.altKey) {
          return true;
        }
      } else {
        if (event.ctrlKey && !event.altKey) {
          return true;
        }
      }
      return false;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    function contains(i) {
      if (i >= $.FE.KEYCODE.ARROW_LEFT && i <= $.FE.KEYCODE.ARROW_DOWN) {
        return true;
      }
    }
    /**
     * @param {?} keyCode
     * @return {?}
     */
    function run(keyCode) {
      if (keyCode >= $.FE.KEYCODE.ZERO && keyCode <= $.FE.KEYCODE.NINE) {
        return true;
      }
      if (keyCode >= $.FE.KEYCODE.NUM_ZERO && keyCode <= $.FE.KEYCODE.NUM_MULTIPLY) {
        return true;
      }
      if (keyCode >= $.FE.KEYCODE.A && keyCode <= $.FE.KEYCODE.Z) {
        return true;
      }
      if (self.browser.webkit && 0 === keyCode) {
        return true;
      }
      switch(keyCode) {
        case $.FE.KEYCODE.SPACE:
        ;
        case $.FE.KEYCODE.QUESTION_MARK:
        ;
        case $.FE.KEYCODE.NUM_PLUS:
        ;
        case $.FE.KEYCODE.NUM_MINUS:
        ;
        case $.FE.KEYCODE.NUM_PERIOD:
        ;
        case $.FE.KEYCODE.NUM_DIVISION:
        ;
        case $.FE.KEYCODE.SEMICOLON:
        ;
        case $.FE.KEYCODE.FF_SEMICOLON:
        ;
        case $.FE.KEYCODE.DASH:
        ;
        case $.FE.KEYCODE.EQUALS:
        ;
        case $.FE.KEYCODE.FF_EQUALS:
        ;
        case $.FE.KEYCODE.COMMA:
        ;
        case $.FE.KEYCODE.PERIOD:
        ;
        case $.FE.KEYCODE.SLASH:
        ;
        case $.FE.KEYCODE.APOSTROPHE:
        ;
        case $.FE.KEYCODE.SINGLE_QUOTE:
        ;
        case $.FE.KEYCODE.OPEN_SQUARE_BRACKET:
        ;
        case $.FE.KEYCODE.BACKSLASH:
        ;
        case $.FE.KEYCODE.CLOSE_SQUARE_BRACKET:
          return true;
        default:
          return false;
      }
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function keyDown(event) {
      var keyCode = event.which;
      if (keyPress(event) || (keyCode >= 37 && keyCode <= 40 || !run(keyCode) && (keyCode != $.FE.KEYCODE.DELETE && (keyCode != $.FE.KEYCODE.BACKSPACE && (keyCode != $.FE.KEYCODE.ENTER && keyCode != $.FE.KEYCODE.IME))))) {
        return true;
      }
      if (!tref) {
        suiteView = self.snapshot.get();
        if (!self.undo.canDo()) {
          self.undo.saveStep();
        }
      }
      clearTimeout(tref);
      /** @type {number} */
      tref = setTimeout(function() {
        /** @type {null} */
        tref = null;
        self.undo.saveStep();
      }, Math.max(250, self.opts.typingTimer));
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function onKeyPress(event) {
      var code = event.which;
      if (keyPress(event) || code >= 37 && code <= 40) {
        return true;
      }
      if (suiteView && tref) {
        self.undo.saveStep(suiteView);
        /** @type {null} */
        suiteView = null;
      } else {
        if (!(void 0 !== code && 0 !== code)) {
          if (!suiteView) {
            if (!tref) {
              self.undo.saveStep();
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function draw() {
      if (tref) {
        clearTimeout(tref);
        self.undo.saveStep();
        /** @type {null} */
        suiteView = null;
      }
    }
    /**
     * @param {Object} event
     * @return {?}
     */
    function isLeftClick(event) {
      var key = event.which;
      return keyPress(event) || key == $.FE.KEYCODE.F5;
    }
    /**
     * @param {HTMLElement} row
     * @return {?}
     */
    function getElement(row) {
      return(!row || "BR" != row.tagName) && (0 === (row.textContent || "").length && (row.querySelector && !row.querySelector(":scope > br")));
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function render(event) {
      var elements = self.el.childNodes;
      var e = self.html.defaultTag();
      return!(!event.target || event.target === self.el) || (0 === elements.length || void(self.$el.outerHeight() - event.offsetY <= 10 ? getElement(elements[elements.length - 1]) && (e ? self.$el.append("<" + e + ">" + $.FE.MARKERS + "<br></" + e + ">") : self.$el.append($.FE.MARKERS + "<br>"), self.selection.restore(), handler()) : event.offsetY <= 10 && (getElement(elements[0]) && (e ? self.$el.prepend("<" + e + ">" + $.FE.MARKERS + "<br></" + e + ">") : self.$el.prepend($.FE.MARKERS + "<br>"),
      self.selection.restore(), handler()))));
    }
    /**
     * @return {undefined}
     */
    function Editor() {
      if (self.events.on("keydown", keyDown), self.events.on("input", onSuccess), self.events.on("mousedown", highlightCode), self.events.on("keyup input", onKeyPress), self.events.on("keypress", uncaught), self.events.on("keydown", onKeyDown), self.events.on("keyup", update), self.events.on("html.inserted", update), self.events.on("cut", init), self.events.on("click", render), !self.browser.edge && self.el.msGetInputContext) {
        try {
          self.el.msGetInputContext().addEventListener("MSCandidateWindowShow", function() {
            /** @type {boolean} */
            elem = true;
          });
          self.el.msGetInputContext().addEventListener("MSCandidateWindowHide", function() {
            /** @type {boolean} */
            elem = false;
            update();
          });
        } catch (a) {
        }
      }
    }
    var which;
    var tref;
    var suiteView;
    /** @type {boolean} */
    var elem = false;
    /** @type {null} */
    var oldtitle = null;
    return{
      /** @type {function (): undefined} */
      _init : Editor,
      /** @type {function (Object): ?} */
      ctrlKey : keyPress,
      /** @type {function (?): ?} */
      isCharacter : run,
      /** @type {function (?): ?} */
      isArrow : contains,
      /** @type {function (): undefined} */
      forceUndo : draw,
      /** @type {function (): ?} */
      isIME : restoreScript,
      /** @type {function (Object): ?} */
      isBrowserAction : isLeftClick,
      /** @type {function (): ?} */
      positionCaret : handler
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.accessibility = function(self) {
    /**
     * @param {Object} args
     * @return {undefined}
     */
    function trigger(args) {
      if (args && args.length) {
        if (!args.data("blur-event-set")) {
          if (!args.parents(".fr-popup").length) {
            self.events.$on(args, "blur", function() {
              var scope = args.parents(".fr-toolbar, .fr-popup").data("instance") || self;
              if (scope.events.blurActive()) {
                scope.events.trigger("blur");
              }
              scope.events.enableBlur();
            }, true);
            args.data("blur-event-set", true);
          }
        }
        (args.parents(".fr-toolbar, .fr-popup").data("instance") || self).events.disableBlur();
        args.focus();
        /** @type {Object} */
        self.shared.$f_el = args;
      }
    }
    /**
     * @param {Object} target
     * @param {boolean} reverse
     * @return {?}
     */
    function select(target, reverse) {
      /** @type {string} */
      var point = reverse ? "last" : "first";
      var typePattern = target.find("button:visible:not(.fr-disabled), .fr-group span.fr-command:visible")[point]();
      if (typePattern.length) {
        return trigger(typePattern), true;
      }
    }
    /**
     * @param {Element} input
     * @return {?}
     */
    function reset(input) {
      return input.is("input, textarea") && destroy(), self.events.disableBlur(), input.focus(), true;
    }
    /**
     * @param {?} selector
     * @param {boolean} filter
     * @return {?}
     */
    function delegate(selector, filter) {
      var seconds = selector.find("input, textarea, button, select").filter(":visible").not(":disabled").filter(filter ? ":last" : ":first");
      if (seconds.length) {
        return reset(seconds);
      }
      if (self.shared.with_kb) {
        var environment = selector.find(".fr-active-item:visible:first");
        if (environment.length) {
          return reset(environment);
        }
        var input = selector.find("[tabIndex]:visible:first");
        if (input.length) {
          return reset(input);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function destroy() {
      if (0 === self.$el.find(".fr-marker").length) {
        if (self.core.hasFocus()) {
          self.selection.save();
        }
      }
    }
    /**
     * @param {Object} self
     * @return {undefined}
     */
    function callback(self) {
      if (self.$el.find(".fr-marker").length) {
        self.events.disableBlur();
        self.selection.restore();
        self.events.enableBlur();
      }
    }
    /**
     * @param {Object} component
     * @return {undefined}
     */
    function bindEvents(component) {
      var main = component.children().not(".fr-buttons");
      if (!main.data("mouseenter-event-set")) {
        self.events.$on(main, "mouseenter", "[tabIndex]", function(event) {
          var scope = component.data("instance") || self;
          if (!F) {
            return event.stopPropagation(), void event.preventDefault();
          }
          var check = main.find(":focus:first");
          if (check.length) {
            if (!check.is("input, button, textarea")) {
              scope.events.disableBlur();
              check.blur();
              scope.events.disableBlur();
              scope.events.focus();
            }
          }
        });
        main.data("mouseenter-event-set", true);
      }
      if (!delegate(main)) {
        if (self.shared.with_kb) {
          select(component.find(".fr-buttons"));
        }
      }
    }
    /**
     * @param {Object} element
     * @return {undefined}
     */
    function show(element) {
      if (!self.core.hasFocus()) {
        self.events.disableBlur();
        self.events.focus();
      }
      self.accessibility.saveSelection();
      self.events.disableBlur();
      self.$el.blur();
      self.selection.clear();
      self.events.disableBlur();
      if (self.shared.with_kb) {
        element.find(".fr-command[tabIndex], [tabIndex]").first().focus();
      } else {
        element.find("[tabIndex]:first").focus();
      }
    }
    /**
     * @return {?}
     */
    function render() {
      var rule = self.popups.areVisible();
      if (rule) {
        var component = rule.find(".fr-buttons");
        return component.find("button:focus, .fr-group span:focus").length ? !select(rule.data("instance").$tb) : !select(component);
      }
      return!select(self.$tb);
    }
    /**
     * @return {?}
     */
    function jQuery() {
      /** @type {null} */
      var $f_el = null;
      return self.shared.$f_el.is(".fr-dropdown.fr-active") ? $f_el = self.shared.$f_el : self.shared.$f_el.closest(".fr-dropdown-menu").prev().is(".fr-dropdown.fr-active") && ($f_el = self.shared.$f_el.closest(".fr-dropdown-menu").prev()), $f_el;
    }
    /**
     * @param {Object} selector
     * @param {boolean} deepDataAndEvents
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function click(selector, deepDataAndEvents, dataAndEvents) {
      if (self.shared.$f_el) {
        var close = jQuery();
        if (close) {
          self.button.click(close);
          self.shared.$f_el = close;
        }
        var match = selector.find("button:visible:not(.fr-disabled), .fr-group span.fr-command:visible");
        var i = match.index(self.shared.$f_el);
        if (0 === i && !dataAndEvents || i == match.length - 1 && dataAndEvents) {
          var m;
          if (deepDataAndEvents) {
            if (selector.parent().is(".fr-popup")) {
              /** @type {boolean} */
              m = !delegate(selector.parent().children().not(".fr-buttons"), !dataAndEvents);
            }
            if (false === m) {
              /** @type {null} */
              self.shared.$f_el = null;
            }
          }
          if (!(deepDataAndEvents && false === m)) {
            select(selector, !dataAndEvents);
          }
        } else {
          trigger($(match.get(i + (dataAndEvents ? 1 : -1))));
        }
        return false;
      }
    }
    /**
     * @param {Function} event
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function cancelEvent(event, deepDataAndEvents) {
      return click(event, deepDataAndEvents, true);
    }
    /**
     * @param {Function} element
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function validator(element, deepDataAndEvents) {
      return click(element, deepDataAndEvents);
    }
    /**
     * @param {boolean} dataAndEvents
     * @return {?}
     */
    function nav(dataAndEvents) {
      if (self.shared.$f_el) {
        var typePattern;
        if (self.shared.$f_el.is(".fr-dropdown.fr-active")) {
          return typePattern = dataAndEvents ? self.shared.$f_el.next().find(".fr-command:not(.fr-disabled)").first() : self.shared.$f_el.next().find(".fr-command:not(.fr-disabled)").last(), trigger(typePattern), false;
        }
        if (self.shared.$f_el.is("a.fr-command")) {
          return typePattern = dataAndEvents ? self.shared.$f_el.closest("li").nextAll(":visible:first").find(".fr-command:not(.fr-disabled)").first() : self.shared.$f_el.closest("li").prevAll(":visible:first").find(".fr-command:not(.fr-disabled)").first(), typePattern.length || (typePattern = dataAndEvents ? self.shared.$f_el.closest(".fr-dropdown-menu").find(".fr-command:not(.fr-disabled)").first() : self.shared.$f_el.closest(".fr-dropdown-menu").find(".fr-command:not(.fr-disabled)").last()), trigger(typePattern),
          false;
        }
      }
    }
    /**
     * @return {?}
     */
    function constructor() {
      return self.shared.$f_el && self.shared.$f_el.is(".fr-dropdown:not(.fr-active)") ? initialize() : nav(true);
    }
    /**
     * @return {?}
     */
    function has() {
      return nav();
    }
    /**
     * @return {?}
     */
    function initialize() {
      if (self.shared.$f_el) {
        if (self.shared.$f_el.hasClass("fr-dropdown")) {
          self.button.click(self.shared.$f_el);
        } else {
          if (self.shared.$f_el.is("button.fr-back")) {
            if (self.opts.toolbarInline) {
              self.events.disableBlur();
              self.events.focus();
            }
            var api = self.popups.areVisible(self);
            if (api) {
              /** @type {boolean} */
              self.shared.with_kb = false;
            }
            self.button.click(self.shared.$f_el);
            next(api);
          } else {
            if (self.events.disableBlur(), self.button.click(self.shared.$f_el), self.shared.$f_el.attr("data-popup")) {
              var prop = self.popups.areVisible(self);
              if (prop) {
                prop.data("popup-button", self.shared.$f_el);
              }
            } else {
              if (self.shared.$f_el.attr("data-modal")) {
                var enabled = self.modals.areVisible(self);
                if (enabled) {
                  enabled.data("modal-button", self.shared.$f_el);
                }
              }
            }
            /** @type {null} */
            self.shared.$f_el = null;
          }
        }
        return false;
      }
    }
    /**
     * @return {undefined}
     */
    function focus() {
      if (self.shared.$f_el) {
        self.events.disableBlur();
        self.shared.$f_el.blur();
        /** @type {null} */
        self.shared.$f_el = null;
      }
      if (false !== self.events.trigger("toolbar.focusEditor")) {
        self.events.disableBlur();
        self.events.focus();
      }
    }
    /**
     * @param {Object} args
     * @return {?}
     */
    function start(args) {
      if (self.shared.$f_el) {
        var close = jQuery();
        return close ? (self.button.click(close), trigger(close)) : args.parent().find(".fr-back:visible").length ? (self.shared.with_kb = false, self.opts.toolbarInline && (self.events.disableBlur(), self.events.focus()), self.button.exec(args.parent().find(".fr-back:visible:first")), next(args.parent())) : self.shared.$f_el.is("button, .fr-group span") && (args.parent().is(".fr-popup") ? (callback(self), self.shared.$f_el = null, false !== self.events.trigger("toolbar.esc") && (self.popups.hide(args.parent()),
        self.opts.toolbarInline && self.toolbar.showInline(null, true), next(args.parent()))) : focus()), false;
      }
    }
    /**
     * @param {Object} event
     * @param {Function} callback
     * @return {?}
     */
    function onKeyDown(event, callback) {
      var e = -1 != navigator.userAgent.indexOf("Mac OS X") ? event.metaKey : event.ctrlKey;
      var key = event.which;
      /** @type {boolean} */
      var result = false;
      return key != $.FE.KEYCODE.TAB || (e || (event.shiftKey || event.altKey)) ? key != $.FE.KEYCODE.ARROW_RIGHT || (e || (event.shiftKey || event.altKey)) ? key != $.FE.KEYCODE.TAB || (e || (!event.shiftKey || event.altKey)) ? key != $.FE.KEYCODE.ARROW_LEFT || (e || (event.shiftKey || event.altKey)) ? key != $.FE.KEYCODE.ARROW_UP || (e || (event.shiftKey || event.altKey)) ? key != $.FE.KEYCODE.ARROW_DOWN || (e || (event.shiftKey || event.altKey)) ? key != $.FE.KEYCODE.ENTER || (e || (event.shiftKey ||
      event.altKey)) ? key != $.FE.KEYCODE.ESC || (e || (event.shiftKey || event.altKey)) ? key != $.FE.KEYCODE.F10 || (e || (event.shiftKey || (!event.altKey || (result = render())))) : result = start(callback) : result = initialize() : result = constructor() : result = has() : result = validator(callback) : result = validator(callback, true) : result = cancelEvent(callback) : result = cancelEvent(callback, true), self.shared.$f_el || (void 0 !== result || (result = true)), !result && (self.keys.isBrowserAction(event) &&
      (result = true)), !!result || (event.preventDefault(), event.stopPropagation(), false);
    }
    /**
     * @param {Object} args
     * @return {undefined}
     */
    function init(args) {
      if (args) {
        if (args.length) {
          self.events.$on(args, "keydown", function(arg) {
            if (!$(arg.target).is("a.fr-command, button.fr-command, .fr-group span.fr-command")) {
              return true;
            }
            var route = args.parents(".fr-popup").data("instance") || (args.data("instance") || self);
            /** @type {boolean} */
            self.shared.with_kb = true;
            var type = route.accessibility.exec(arg, args);
            return self.shared.with_kb = false, type;
          }, true);
          self.events.$on(args, "mouseenter", "[tabIndex]", function(event) {
            var asset = args.parents(".fr-popup").data("instance") || (args.data("instance") || self);
            if (!F) {
              return event.stopPropagation(), void event.preventDefault();
            }
            var $destination = $(event.currentTarget);
            if (asset.shared.$f_el) {
              if (asset.shared.$f_el.not($destination)) {
                asset.accessibility.focusEditor();
              }
            }
          }, true);
        }
      }
    }
    /**
     * @param {number} n
     * @return {undefined}
     */
    function postLink(n) {
      var that = self.popups.get(n);
      var c = hasClass(n);
      init(that.find(".fr-buttons"));
      self.events.$on(that, "mouseenter", "tabIndex", c._tiMouseenter, true);
      self.events.$on(that.children().not(".fr-buttons"), "keydown", "[tabIndex]", c._tiKeydown, true);
      self.popups.onHide(n, function() {
        callback(that.data("instance") || self);
      });
      self.popups.onShow(n, function() {
        /** @type {boolean} */
        F = false;
        setTimeout(function() {
          /** @type {boolean} */
          F = true;
        }, 0);
      });
    }
    /**
     * @param {number} name
     * @return {?}
     */
    function hasClass(name) {
      var elem = self.popups.get(name);
      return{
        /**
         * @param {Event} e
         * @return {?}
         */
        _tiKeydown : function(e) {
          var that = elem.data("instance") || self;
          if (false === that.events.trigger("popup.tab", [e])) {
            return false;
          }
          var key = e.which;
          var t = elem.find(":focus:first");
          if ($.FE.KEYCODE.TAB == key) {
            e.preventDefault();
            var main = elem.children().not(".fr-buttons");
            var codeSegments = main.find("input, textarea, button, select").filter(":visible").not(".fr-no-touch input, .fr-no-touch textarea, .fr-no-touch button, .fr-no-touch select, :disabled").toArray();
            var i = codeSegments.indexOf(this) + (e.shiftKey ? -1 : 1);
            if (0 <= i && i < codeSegments.length) {
              return that.events.disableBlur(), $(codeSegments[i]).focus(), e.stopPropagation(), false;
            }
            var target = elem.find(".fr-buttons");
            if (target.length && select(target, !!e.shiftKey)) {
              return e.stopPropagation(), false;
            }
            if (delegate(main)) {
              return e.stopPropagation(), false;
            }
          } else {
            if ($.FE.KEYCODE.ENTER != key) {
              return $.FE.KEYCODE.ESC == key ? (e.preventDefault(), e.stopPropagation(), callback(that), that.popups.isVisible(name) && elem.find(".fr-back:visible").length ? (that.opts.toolbarInline && (that.events.disableBlur(), that.events.focus()), that.button.exec(elem.find(".fr-back:visible:first")), next(elem)) : that.popups.isVisible(name) && elem.find(".fr-dismiss:visible").length ? that.button.exec(elem.find(".fr-dismiss:visible:first")) : (that.popups.hide(name), that.opts.toolbarInline &&
              that.toolbar.showInline(null, true), next(elem)), false) : $.FE.KEYCODE.SPACE == key && (t.is(".fr-submit") || t.is(".fr-dismiss")) ? (e.preventDefault(), e.stopPropagation(), that.events.disableBlur(), that.button.exec(t), true) : that.keys.isBrowserAction(e) ? void e.stopPropagation() : t.is("input[type=text], textarea") ? void e.stopPropagation() : $.FE.KEYCODE.SPACE == key && (t.is(".fr-link-attr") || t.is("input[type=file]")) ? void e.stopPropagation() : (e.stopPropagation(), e.preventDefault(),
              false);
            }
            /** @type {null} */
            var arg = null;
            if (elem.find(".fr-submit:visible").length > 0) {
              arg = elem.find(".fr-submit:visible:first");
            } else {
              if (elem.find(".fr-dismiss:visible").length) {
                arg = elem.find(".fr-dismiss:visible:first");
              }
            }
            if (arg) {
              e.preventDefault();
              e.stopPropagation();
              that.events.disableBlur();
              that.button.exec(arg);
            }
          }
        },
        /**
         * @return {undefined}
         */
        _tiMouseenter : function() {
          remove(elem.data("instance") || self);
        }
      };
    }
    /**
     * @param {?} elem
     * @return {undefined}
     */
    function next(elem) {
      var typePattern = elem.data("popup-button");
      if (typePattern) {
        setTimeout(function() {
          trigger(typePattern);
          elem.data("popup-button", null);
        }, 0);
      }
    }
    /**
     * @param {MessageEvent} res
     * @return {undefined}
     */
    function onSuccess(res) {
      var typePattern = res.data("modal-button");
      if (typePattern) {
        setTimeout(function() {
          trigger(typePattern);
          res.data("modal-button", null);
        }, 0);
      }
    }
    /**
     * @return {?}
     */
    function UserInfo() {
      return null != self.shared.$f_el;
    }
    /**
     * @param {number} selector
     * @return {undefined}
     */
    function remove(selector) {
      var elem = self.popups.areVisible(selector);
      if (elem) {
        elem.data("popup-button", null);
      }
    }
    /**
     * @param {Event} event
     * @return {?}
     */
    function handler(event) {
      var d = -1 != navigator.userAgent.indexOf("Mac OS X") ? event.metaKey : event.ctrlKey;
      if (event.which == $.FE.KEYCODE.F10 && (!d && (!event.shiftKey && event.altKey))) {
        /** @type {boolean} */
        self.shared.with_kb = true;
        var api = self.popups.areVisible(self);
        /** @type {boolean} */
        var delegateNode = false;
        return api && (delegateNode = delegate(api.children().not(".fr-buttons"))), delegateNode || render(), self.shared.with_kb = false, event.preventDefault(), event.stopPropagation(), false;
      }
      return true;
    }
    /**
     * @return {undefined}
     */
    function setup() {
      if (self.$wp) {
        self.events.on("keydown", handler, true);
      } else {
        self.events.$on(self.$win, "keydown", handler, true);
      }
      self.events.on("mousedown", function(event) {
        remove(self);
        if (self.shared.$f_el) {
          callback(self);
          event.stopPropagation();
          self.events.disableBlur();
          /** @type {null} */
          self.shared.$f_el = null;
        }
      }, true);
      self.events.on("blur", function() {
        /** @type {null} */
        self.shared.$f_el = null;
        remove(self);
      }, true);
    }
    /** @type {boolean} */
    var F = true;
    return{
      /** @type {function (): undefined} */
      _init : setup,
      /** @type {function (number): undefined} */
      registerPopup : postLink,
      /** @type {function (Object): undefined} */
      registerToolbar : init,
      /** @type {function (Object): undefined} */
      focusToolbarElement : trigger,
      /** @type {function (Object, boolean): ?} */
      focusToolbar : select,
      /** @type {function (?, boolean): ?} */
      focusContent : delegate,
      /** @type {function (Object): undefined} */
      focusPopup : bindEvents,
      /** @type {function (Object): undefined} */
      focusModal : show,
      /** @type {function (): undefined} */
      focusEditor : focus,
      /** @type {function (?): undefined} */
      focusPopupButton : next,
      /** @type {function (MessageEvent): undefined} */
      focusModalButton : onSuccess,
      /** @type {function (): ?} */
      hasFocus : UserInfo,
      /** @type {function (Object, Function): ?} */
      exec : onKeyDown,
      /** @type {function (): undefined} */
      saveSelection : destroy,
      /** @type {function (Object): undefined} */
      restoreSelection : callback
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.format = function(self) {
    /**
     * @param {string} arr
     * @param {Object} a
     * @return {?}
     */
    function each(arr, a) {
      /** @type {string} */
      var msg = "<" + arr;
      var prefix;
      for (prefix in a) {
        if (a.hasOwnProperty(prefix)) {
          msg += " " + prefix + '="' + a[prefix] + '"';
        }
      }
      return msg += ">";
    }
    /**
     * @param {string} var_args
     * @return {?}
     */
    function format(var_args) {
      return "</" + var_args + ">";
    }
    /**
     * @param {string} object
     * @param {Object} view
     * @return {?}
     */
    function fn(object, view) {
      /** @type {string} */
      var result = object;
      var key;
      for (key in view) {
        if (view.hasOwnProperty(key)) {
          result += "id" == key ? "#" + view[key] : "class" == key ? "." + view[key] : "[" + key + '="' + view[key] + '"]';
        }
      }
      return result;
    }
    /**
     * @param {Object} el
     * @param {?} expr
     * @return {?}
     */
    function matches(el, expr) {
      return!(!el || el.nodeType != Node.ELEMENT_NODE) && (el.matches || (el.matchesSelector || (el.msMatchesSelector || (el.mozMatchesSelector || (el.webkitMatchesSelector || el.oMatchesSelector))))).call(el, expr);
    }
    /**
     * @param {?} node
     * @param {string} obj
     * @param {Object} opts
     * @return {?}
     */
    function walk(node, obj, opts) {
      if (node) {
        if (self.node.isBlock(node)) {
          return walk(node.firstChild, obj, opts), false;
        }
        var file = $(each(obj, opts)).insertBefore(node);
        var element = node;
        for (;element && (!$(element).is(".fr-marker") && (0 === $(element).find(".fr-marker").length && ("UL" != element.tagName && "OL" != element.tagName)));) {
          var template = element;
          element = element.nextSibling;
          file.append(template);
        }
        if (element) {
          if ($(element).find(".fr-marker").length || ("UL" == element.tagName || "OL" == element.tagName)) {
            walk(element.firstChild, obj, opts);
          }
        } else {
          var parent = file.get(0).parentNode;
          for (;parent && (!parent.nextSibling && !self.node.isElement(parent));) {
            parent = parent.parentNode;
          }
          if (parent) {
            var child = parent.nextSibling;
            if (child) {
              if (self.node.isBlock(child)) {
                walk(child.firstChild, obj, opts);
              } else {
                walk(child, obj, opts);
              }
            }
          }
        }
        if (file.is(":empty")) {
          file.remove();
        }
      }
    }
    /**
     * @param {string} obj
     * @param {Object} opts
     * @return {undefined}
     */
    function update(obj, opts) {
      var i;
      if (void 0 === opts && (opts = {}), opts.style && delete opts.style, self.selection.isCollapsed()) {
        self.markers.insert();
        self.$el.find(".fr-marker").replaceWith(each(obj, opts) + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + format(obj));
        self.selection.restore();
      } else {
        self.selection.save();
        walk(self.$el.find('.fr-marker[data-type="true"]').get(0).nextSibling, obj, opts);
        var codeSegments;
        do {
          codeSegments = self.$el.find(fn(obj, opts) + " > " + fn(obj, opts));
          /** @type {number} */
          i = 0;
          for (;i < codeSegments.length;i++) {
            codeSegments[i].outerHTML = codeSegments[i].innerHTML;
          }
        } while (codeSegments.length);
        self.el.normalize();
        var resultItems = self.el.querySelectorAll(".fr-marker");
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          var page = $(resultItems[i]);
          if (true === page.data("type")) {
            if (matches(page.get(0).nextSibling, fn(obj, opts))) {
              page.next().prepend(page);
            }
          } else {
            if (matches(page.get(0).previousSibling, fn(obj, opts))) {
              page.prev().append(page);
            }
          }
        }
        self.selection.restore();
      }
    }
    /**
     * @param {Object} el
     * @param {string} type
     * @param {Object} n
     * @param {boolean} isXML
     * @return {?}
     */
    function find(el, type, n, isXML) {
      if (!isXML) {
        /** @type {boolean} */
        var h = false;
        if (true === el.data("type")) {
          for (;self.node.isFirstSibling(el.get(0)) && (!el.parent().is(self.$el) && (!el.parent().is("ol") && !el.parent().is("ul")));) {
            el.parent().before(el);
            /** @type {boolean} */
            h = true;
          }
        } else {
          if (false === el.data("type")) {
            for (;self.node.isLastSibling(el.get(0)) && (!el.parent().is(self.$el) && (!el.parent().is("ol") && !el.parent().is("ul")));) {
              el.parent().after(el);
              /** @type {boolean} */
              h = true;
            }
          }
        }
        if (h) {
          return true;
        }
      }
      if (el.parents(type).length || void 0 === type) {
        /** @type {string} */
        var c = "";
        /** @type {string} */
        var g = "";
        var $el = el.parent();
        if ($el.is(self.$el) || self.node.isBlock($el.get(0))) {
          return false;
        }
        for (;!self.node.isBlock($el.parent().get(0)) && (void 0 === type || void 0 !== type && !matches($el.get(0), fn(type, n)));) {
          c += self.node.closeTagString($el.get(0));
          g = self.node.openTagString($el.get(0)) + g;
          $el = $el.parent();
        }
        var b = el.get(0).outerHTML;
        el.replaceWith('<span id="mark"></span>');
        var m = $el.html().replace(/<span id="mark"><\/span>/, c + self.node.closeTagString($el.get(0)) + g + b + c + self.node.openTagString($el.get(0)) + g);
        return $el.replaceWith(self.node.openTagString($el.get(0)) + m + self.node.closeTagString($el.get(0))), true;
      }
      return false;
    }
    /**
     * @param {Node} simple
     * @param {number} obj
     * @param {string} value
     * @param {Object} opts
     * @return {?}
     */
    function parse(simple, obj, value, opts) {
      var codeSegments = self.node.contents(simple.get(0));
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i];
        if (self.node.hasClass(node, "fr-marker")) {
          /** @type {number} */
          obj = (obj + 1) % 2;
        } else {
          if (obj) {
            if ($(node).find(".fr-marker").length > 0) {
              obj = parse($(node), obj, value, opts);
            } else {
              var $el = $(node).find(value || "*");
              /** @type {number} */
              var index = $el.length - 1;
              for (;index >= 0;index--) {
                var el = $el[index];
                if (!self.node.isBlock(el)) {
                  if (!self.node.isVoid(el)) {
                    if (!(void 0 !== value && !matches(el, fn(value, opts)))) {
                      el.outerHTML = el.innerHTML;
                    }
                  }
                }
              }
              if (void 0 === value && (node.nodeType == Node.ELEMENT_NODE && (!self.node.isVoid(node) && !self.node.isBlock(node))) || matches(node, fn(value, opts))) {
                $(node).replaceWith(node.innerHTML);
              } else {
                if (void 0 === value) {
                  if (node.nodeType == Node.ELEMENT_NODE) {
                    if (self.node.isBlock(node)) {
                      self.node.clearAttributes(node);
                    }
                  }
                }
              }
            }
          } else {
            if ($(node).find(".fr-marker").length > 0) {
              obj = parse($(node), obj, value, opts);
            }
          }
        }
      }
      return obj;
    }
    /**
     * @param {string} obj
     * @param {Object} val
     * @return {undefined}
     */
    function load(obj, val) {
      if (void 0 === val) {
        val = {};
      }
      if (val.style) {
        delete val.style;
      }
      var tmpSet = self.selection.isCollapsed();
      self.selection.save();
      /** @type {boolean} */
      var f = true;
      for (;f;) {
        /** @type {boolean} */
        f = false;
        var codeSegments = self.$el.find(".fr-marker");
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          var input = $(codeSegments[i]);
          /** @type {null} */
          var grape = null;
          if (input.attr("data-cloned") || (tmpSet || (grape = input.clone().removeClass("fr-marker").addClass("fr-clone"), true === input.data("type") ? input.attr("data-cloned", true).after(grape) : input.attr("data-cloned", true).before(grape))), find(input, obj, val, tmpSet)) {
            /** @type {boolean} */
            f = true;
            break;
          }
        }
      }
      parse(self.$el, 0, obj, val);
      if (!tmpSet) {
        self.$el.find(".fr-marker").remove();
        self.$el.find(".fr-clone").removeClass("fr-clone").addClass("fr-marker");
      }
      if (tmpSet) {
        self.$el.find(".fr-marker").before($.FE.INVISIBLE_SPACE).after($.FE.INVISIBLE_SPACE);
      }
      self.html.cleanEmptyTags();
      self.el.normalize();
      self.selection.restore();
    }
    /**
     * @param {string} value
     * @param {Object} options
     * @return {undefined}
     */
    function toggle(value, options) {
      if (process(value, options)) {
        load(value, options);
      } else {
        update(value, options);
      }
    }
    /**
     * @param {?} elem
     * @param {string} type
     * @return {undefined}
     */
    function create(elem, type) {
      var $elem = $(elem);
      $elem.css(type, "");
      if ("" === $elem.attr("style")) {
        $elem.replaceWith($elem.html());
      }
    }
    /**
     * @param {?} elem
     * @param {string} name
     * @return {?}
     */
    function next(elem, name) {
      return 0 === $(elem).attr("style").indexOf(name + ":") || ($(elem).attr("style").indexOf(";" + name + ":") >= 0 || $(elem).attr("style").indexOf("; " + name + ":") >= 0);
    }
    /**
     * @param {string} key
     * @param {string} value
     * @return {undefined}
     */
    function initialize(key, value) {
      var i;
      var input;
      if (self.selection.isCollapsed()) {
        self.markers.insert();
        input = self.$el.find(".fr-marker");
        var div = input.parent();
        if (self.node.openTagString(div.get(0)) == '<span style="' + key + ": " + div.css(key) + ';">') {
          if (self.node.isEmpty(div.get(0))) {
            div.replaceWith('<span style="' + key + ": " + value + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
          } else {
            var _cache = {};
            /** @type {string} */
            _cache[key] = value;
            find(input, "span", _cache, true);
            input = self.$el.find(".fr-marker");
            if (value) {
              input.replaceWith('<span style="' + key + ": " + value + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
            } else {
              input.replaceWith($.FE.INVISIBLE_SPACE + $.FE.MARKERS);
            }
          }
          self.html.cleanEmptyTags();
        } else {
          if (self.node.isEmpty(div.get(0)) && div.is("span")) {
            input.replaceWith($.FE.MARKERS);
            div.css(key, value);
          } else {
            input.replaceWith('<span style="' + key + ": " + value + ';">' + $.FE.INVISIBLE_SPACE + $.FE.MARKERS + "</span>");
          }
        }
        self.selection.restore();
      } else {
        if (self.selection.save(), null == value || "color" == key && self.$el.find(".fr-marker").parents("u, a").length > 0) {
          var codeSegments = self.$el.find(".fr-marker");
          /** @type {number} */
          i = 0;
          for (;i < codeSegments.length;i++) {
            if (input = $(codeSegments[i]), true === input.data("type")) {
              for (;self.node.isFirstSibling(input.get(0)) && (!input.parent().is(self.$el) && (!self.node.isElement(input.parent().get(0)) && !self.node.isBlock(input.parent().get(0))));) {
                input.parent().before(input);
              }
            } else {
              for (;self.node.isLastSibling(input.get(0)) && (!input.parent().is(self.$el) && (!self.node.isElement(input.parent().get(0)) && !self.node.isBlock(input.parent().get(0))));) {
                input.parent().after(input);
              }
            }
          }
        }
        var vvar = self.$el.find('.fr-marker[data-type="true"]').get(0).nextSibling;
        var opts = {
          class : "fr-unprocessed"
        };
        if (value) {
          /** @type {string} */
          opts.style = key + ": " + value + ";";
        }
        walk(vvar, "span", opts);
        self.$el.find(".fr-marker + .fr-unprocessed").each(function() {
          $(this).prepend($(this).prev());
        });
        self.$el.find(".fr-unprocessed + .fr-marker").each(function() {
          $(this).prev().append(this);
        });
        if ((value || "").match(/\dem$/)) {
          self.$el.find("span.fr-unprocessed").removeClass("fr-unprocessed");
        }
        for (;self.$el.find("span.fr-unprocessed").length > 0;) {
          var $el = self.$el.find("span.fr-unprocessed:first").removeClass("fr-unprocessed");
          if ($el.parent().get(0).normalize(), $el.parent().is("span") && 1 == $el.parent().get(0).childNodes.length) {
            $el.parent().css(key, value);
            var element = $el;
            $el = $el.parent();
            element.replaceWith(element.html());
          }
          var elems = $el.find("span");
          /** @type {number} */
          i = elems.length - 1;
          for (;i >= 0;i--) {
            create(elems[i], key);
          }
          var elements = $el.parentsUntil(self.$el, "span[style]");
          /** @type {Array} */
          var result = [];
          /** @type {number} */
          i = elements.length - 1;
          for (;i >= 0;i--) {
            if (!next(elements[i], key)) {
              result.push(elements[i]);
            }
          }
          if (elements = elements.not(result), elements.length) {
            /** @type {string} */
            var name = "";
            /** @type {string} */
            var desc = "";
            /** @type {string} */
            var ret = "";
            /** @type {string} */
            var fmt = "";
            var node = $el.get(0);
            do {
              node = node.parentNode;
              $(node).addClass("fr-split");
              name += self.node.closeTagString(node);
              desc = self.node.openTagString($(node).clone().addClass("fr-split").get(0)) + desc;
              if (elements.get(0) != node) {
                ret += self.node.closeTagString(node);
                fmt = self.node.openTagString($(node).clone().addClass("fr-split").get(0)) + fmt;
              }
            } while (elements.get(0) != node);
            /** @type {string} */
            var text = name + self.node.openTagString($(elements.get(0)).clone().css(key, value || "").get(0)) + fmt + $el.css(key, "").get(0).outerHTML + ret + "</span>" + desc;
            $el.replaceWith('<span id="fr-break"></span>');
            var html = elements.get(0).outerHTML;
            $(elements.get(0)).replaceWith(html.replace(/<span id="fr-break"><\/span>/g, text));
          }
        }
        for (;self.$el.find(".fr-split:empty").length > 0;) {
          self.$el.find(".fr-split:empty").remove();
        }
        self.$el.find(".fr-split").removeClass("fr-split");
        self.$el.find('span[style=""]').removeAttr("style");
        self.$el.find('span[class=""]').removeAttr("class");
        self.html.cleanEmptyTags();
        $(self.$el.find("span").get().reverse()).each(function() {
          if (!(this.attributes && 0 !== this.attributes.length)) {
            $(this).replaceWith(this.innerHTML);
          }
        });
        self.el.normalize();
        var resultItems = self.$el.find("span[style] + span[style]");
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          var $field = $(resultItems[i]);
          var cl = $(resultItems[i]).prev();
          if ($field.get(0).previousSibling == cl.get(0)) {
            if (self.node.openTagString($field.get(0)) == self.node.openTagString(cl.get(0))) {
              $field.prepend(cl.html());
              cl.remove();
            }
          }
        }
        self.$el.find("span[style] span[style]").each(function() {
          if ($(this).attr("style").indexOf("font-size") >= 0) {
            var head = $(this).parents("span[style]");
            if (head.attr("style").indexOf("background-color") >= 0) {
              $(this).attr("style", $(this).attr("style") + ";" + head.attr("style"));
              find($(this), "span[style]", {}, false);
            }
          }
        });
        self.el.normalize();
        self.selection.restore();
      }
    }
    /**
     * @param {string} node
     * @return {undefined}
     */
    function handler(node) {
      initialize(node, null);
    }
    /**
     * @param {string} child
     * @param {Object} opts
     * @return {?}
     */
    function process(child, opts) {
      if (void 0 === opts) {
        opts = {};
      }
      if (opts.style) {
        delete opts.style;
      }
      var range = self.selection.ranges(0);
      var node = range.startContainer;
      if (node.nodeType == Node.ELEMENT_NODE && (node.childNodes.length > 0 && (node.childNodes[range.startOffset] && (node = node.childNodes[range.startOffset]))), !range.collapsed && (node.nodeType == Node.TEXT_NODE && range.startOffset == (node.textContent || "").length)) {
        for (;!self.node.isBlock(node.parentNode) && !node.nextSibling;) {
          node = node.parentNode;
        }
        if (node.nextSibling) {
          node = node.nextSibling;
        }
      }
      var element = node;
      for (;element && (element.nodeType == Node.ELEMENT_NODE && !matches(element, fn(child, opts)));) {
        element = element.firstChild;
      }
      if (element && (element.nodeType == Node.ELEMENT_NODE && matches(element, fn(child, opts)))) {
        return true;
      }
      var el = node;
      if (el) {
        if (el.nodeType != Node.ELEMENT_NODE) {
          el = el.parentNode;
        }
      }
      for (;el && (el.nodeType == Node.ELEMENT_NODE && (el != self.el && !matches(el, fn(child, opts))));) {
        el = el.parentNode;
      }
      return!(!el || (el.nodeType != Node.ELEMENT_NODE || (el == self.el || !matches(el, fn(child, opts)))));
    }
    return{
      /** @type {function (string, Object): ?} */
      is : process,
      /** @type {function (string, Object): undefined} */
      toggle : toggle,
      /** @type {function (string, Object): undefined} */
      apply : update,
      /** @type {function (string, Object): undefined} */
      remove : load,
      /** @type {function (string, string): undefined} */
      applyStyle : initialize,
      /** @type {function (string): undefined} */
      removeStyle : handler
    };
  };
  $.extend($.FE.DEFAULTS, {
    indentMargin : 20
  });
  $.FE.COMMANDS = {
    bold : {
      title : "Bold",
      toggle : true,
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        var name = this.format.is("strong");
        elem.toggleClass("fr-active", name).attr("aria-pressed", name);
      }
    },
    italic : {
      title : "Italic",
      toggle : true,
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        var name = this.format.is("em");
        elem.toggleClass("fr-active", name).attr("aria-pressed", name);
      }
    },
    underline : {
      title : "Underline",
      toggle : true,
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        var name = this.format.is("u");
        elem.toggleClass("fr-active", name).attr("aria-pressed", name);
      }
    },
    strikeThrough : {
      title : "Strikethrough",
      toggle : true,
      /**
       * @param {?} cb
       * @return {undefined}
       */
      refresh : function(cb) {
        var value = this.format.is("s");
        cb.toggleClass("fr-active", value).attr("aria-pressed", value);
      }
    },
    subscript : {
      title : "Subscript",
      toggle : true,
      /**
       * @param {?} cb
       * @return {undefined}
       */
      refresh : function(cb) {
        var i = this.format.is("sub");
        cb.toggleClass("fr-active", i).attr("aria-pressed", i);
      }
    },
    superscript : {
      title : "Superscript",
      toggle : true,
      /**
       * @param {?} elem
       * @return {undefined}
       */
      refresh : function(elem) {
        var name = this.format.is("sup");
        elem.toggleClass("fr-active", name).attr("aria-pressed", name);
      }
    },
    outdent : {
      title : "Decrease Indent"
    },
    indent : {
      title : "Increase Indent"
    },
    undo : {
      title : "Undo",
      undo : false,
      forcedRefresh : true,
      disabled : true
    },
    redo : {
      title : "Redo",
      undo : false,
      forcedRefresh : true,
      disabled : true
    },
    insertHR : {
      title : "Insert Horizontal Line"
    },
    clearFormatting : {
      title : "Clear Formatting"
    },
    selectAll : {
      title : "Select All",
      undo : false
    }
  };
  /**
   * @param {string} action
   * @param {?} opt_attributes
   * @return {undefined}
   */
  $.FE.RegisterCommand = function(action, opt_attributes) {
    $.FE.COMMANDS[action] = opt_attributes;
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.commands = function(self) {
    /**
     * @param {string} o
     * @return {?}
     */
    function MAP(o) {
      return self.html.defaultTag() && (o = "<" + self.html.defaultTag() + ">" + o + "</" + self.html.defaultTag() + ">"), o;
    }
    /**
     * @param {string} arg
     * @param {Array} callback
     * @return {undefined}
     */
    function _init(arg, callback) {
      if (false !== self.events.trigger("commands.before", $.merge([arg], callback || []))) {
        var fn = $.FE.COMMANDS[arg] && $.FE.COMMANDS[arg].callback || first[arg];
        /** @type {boolean} */
        var hover = true;
        /** @type {boolean} */
        var accessibilityFocus = false;
        if ($.FE.COMMANDS[arg]) {
          if (void 0 !== $.FE.COMMANDS[arg].focus) {
            hover = $.FE.COMMANDS[arg].focus;
          }
          if (void 0 !== $.FE.COMMANDS[arg].accessibilityFocus) {
            accessibilityFocus = $.FE.COMMANDS[arg].accessibilityFocus;
          }
        }
        if (!self.core.hasFocus() && (hover && !self.popups.areVisible()) || !self.core.hasFocus() && (accessibilityFocus && self.accessibility.hasFocus())) {
          self.events.focus(true);
        }
        if ($.FE.COMMANDS[arg]) {
          if (false !== $.FE.COMMANDS[arg].undo) {
            if (self.$el.find(".fr-marker").length) {
              self.events.disableBlur();
              self.selection.restore();
            }
            self.undo.saveStep();
          }
        }
        if (fn) {
          fn.apply(self, $.merge([arg], callback || []));
        }
        self.events.trigger("commands.after", $.merge([arg], callback || []));
        if ($.FE.COMMANDS[arg]) {
          if (false !== $.FE.COMMANDS[arg].undo) {
            self.undo.saveStep();
          }
        }
      }
    }
    /**
     * @param {string} command
     * @param {string} name
     * @return {undefined}
     */
    function exec(command, name) {
      self.format.toggle(name);
    }
    /**
     * @param {number} expectedNumberOfNonCommentArgs
     * @return {undefined}
     */
    function update(expectedNumberOfNonCommentArgs) {
      self.selection.save();
      self.html.wrap(true, true, true, true);
      self.selection.restore();
      var j = self.selection.blocks();
      /** @type {number} */
      var i = 0;
      for (;i < j.length;i++) {
        if ("LI" != j[i].tagName && "LI" != j[i].parentNode.tagName) {
          var $this = $(j[i]);
          /** @type {string} */
          var type = "rtl" == self.opts.direction || "rtl" == $this.css("direction") ? "margin-right" : "margin-left";
          var animationDelay = self.helpers.getPX($this.css(type));
          $this.css(type, Math.max(animationDelay + expectedNumberOfNonCommentArgs * self.opts.indentMargin, 0) || "");
          $this.removeClass("fr-temp-div");
        }
      }
      self.selection.save();
      self.html.unwrap();
      self.selection.restore();
    }
    /**
     * @param {string} key
     * @return {?}
     */
    function keyMapper(key) {
      return function() {
        _init(key);
      };
    }
    /**
     * @return {undefined}
     */
    function init() {
      self.events.on("keydown", function(event) {
        var offsetParent = self.selection.element();
        if (offsetParent && ("HR" == offsetParent.tagName && !self.keys.isArrow(event.which))) {
          return event.preventDefault(), false;
        }
      });
      self.events.on("keyup", function(event) {
        var node = self.selection.element();
        if (node && "HR" == node.tagName) {
          if (event.which == $.FE.KEYCODE.ARROW_LEFT || event.which == $.FE.KEYCODE.ARROW_UP) {
            if (node.previousSibling) {
              return self.node.isBlock(node.previousSibling) ? self.selection.setAtEnd(node.previousSibling) : $(node).before($.FE.MARKERS), self.selection.restore(), false;
            }
          } else {
            if ((event.which == $.FE.KEYCODE.ARROW_RIGHT || event.which == $.FE.KEYCODE.ARROW_DOWN) && node.nextSibling) {
              return self.node.isBlock(node.nextSibling) ? self.selection.setAtStart(node.nextSibling) : $(node).after($.FE.MARKERS), self.selection.restore(), false;
            }
          }
        }
      });
      self.events.on("mousedown", function(e) {
        if (e.target && "HR" == e.target.tagName) {
          return e.preventDefault(), e.stopPropagation(), false;
        }
      });
      self.events.on("mouseup", function() {
        var node = self.selection.element();
        if (node == self.selection.endElement()) {
          if (node) {
            if ("HR" == node.tagName) {
              if (node.nextSibling) {
                if (self.node.isBlock(node.nextSibling)) {
                  self.selection.setAtStart(node.nextSibling);
                } else {
                  $(node).after($.FE.MARKERS);
                }
              }
              self.selection.restore();
            }
          }
        }
      });
    }
    var first = {
      /**
       * @return {undefined}
       */
      bold : function() {
        exec("bold", "strong");
      },
      /**
       * @return {undefined}
       */
      subscript : function() {
        if (self.format.is("sup")) {
          self.format.remove("sup");
        }
        exec("subscript", "sub");
      },
      /**
       * @return {undefined}
       */
      superscript : function() {
        if (self.format.is("sub")) {
          self.format.remove("sub");
        }
        exec("superscript", "sup");
      },
      /**
       * @return {undefined}
       */
      italic : function() {
        exec("italic", "em");
      },
      /**
       * @return {undefined}
       */
      strikeThrough : function() {
        exec("strikeThrough", "s");
      },
      /**
       * @return {undefined}
       */
      underline : function() {
        exec("underline", "u");
      },
      /**
       * @return {undefined}
       */
      undo : function() {
        self.undo.run();
      },
      /**
       * @return {undefined}
       */
      redo : function() {
        self.undo.redo();
      },
      /**
       * @return {undefined}
       */
      indent : function() {
        update(1);
      },
      /**
       * @return {undefined}
       */
      outdent : function() {
        update(-1);
      },
      /**
       * @return {undefined}
       */
      show : function() {
        if (self.opts.toolbarInline) {
          self.toolbar.showInline(null, true);
        }
      },
      /**
       * @return {undefined}
       */
      insertHR : function() {
        self.selection.remove();
        /** @type {string} */
        var args = "";
        if (self.core.isEmpty()) {
          /** @type {string} */
          args = "<br>";
          args = MAP(args);
        }
        self.html.insert('<hr id="fr-just">' + args);
        var context = self.$el.find("hr#fr-just");
        context.removeAttr("id");
        var f;
        if (0 === context.next().length) {
          var g = self.html.defaultTag();
          if (g) {
            context.after($("<" + g + ">").append("<br>"));
          } else {
            context.after("<br>");
          }
        }
        if (context.prev().is("hr")) {
          f = self.selection.setAfter(context.get(0), false);
        } else {
          if (context.next().is("hr")) {
            f = self.selection.setBefore(context.get(0), false);
          } else {
            if (!self.selection.setAfter(context.get(0), false)) {
              self.selection.setBefore(context.get(0), false);
            }
          }
        }
        if (!f) {
          if (!(void 0 === f)) {
            /** @type {string} */
            args = $.FE.MARKERS + "<br>";
            args = MAP(args);
            context.after(args);
          }
        }
        self.selection.restore();
      },
      /**
       * @return {undefined}
       */
      clearFormatting : function() {
        self.format.remove();
      },
      /**
       * @return {undefined}
       */
      selectAll : function() {
        self.doc.execCommand("selectAll", false, false);
      }
    };
    var where = {};
    var key;
    for (key in first) {
      if (first.hasOwnProperty(key)) {
        where[key] = keyMapper(key);
      }
    }
    return $.extend(where, {
      /** @type {function (string, Array): undefined} */
      exec : _init,
      /** @type {function (): undefined} */
      _init : init
    });
  };
  /**
   * @param {string} element
   * @return {?}
   */
  $.FE.MODULES.data = function(element) {
    /**
     * @param {string} str
     * @return {?}
     */
    function $(str) {
      return str;
    }
    /**
     * @param {(Array|number)} stack
     * @return {?}
     */
    function each(stack) {
      if (!stack) {
        return stack;
      }
      /** @type {string} */
      var obj = "";
      var offset = $("charCodeAt");
      var proto = $("fromCharCode");
      /** @type {number} */
      var i = chars.indexOf(stack[0]);
      /** @type {number} */
      var sp = 1;
      for (;sp < stack.length - 2;sp++) {
        var pdataCur = next(++i);
        var game = stack[offset](sp);
        /** @type {string} */
        var cDigit = "";
        for (;/[0-9-]/.test(stack[sp + 1]);) {
          cDigit += stack[++sp];
        }
        /** @type {number} */
        cDigit = parseInt(cDigit, 10) || 0;
        game = end(game, pdataCur, cDigit);
        game ^= i - 1 & 31;
        obj += String[proto](game);
      }
      return obj;
    }
    /**
     * @param {(number|string)} err
     * @return {?}
     */
    function next(err) {
      var haystack = err.toString();
      /** @type {number} */
      var offsetTop = 0;
      /** @type {number} */
      var i = 0;
      for (;i < haystack.length;i++) {
        offsetTop += parseInt(haystack.charAt(i), 10);
      }
      return offsetTop > 10 ? offsetTop % 9 + 1 : offsetTop;
    }
    /**
     * @param {number} index
     * @param {number} data
     * @param {?} num
     * @return {?}
     */
    function end(index, data, num) {
      /** @type {number} */
      var valid = Math.abs(num);
      for (;valid-- > 0;) {
        index -= data;
      }
      return num < 0 && (index += 123), index;
    }
    /**
     * @param {Object} element
     * @return {?}
     */
    function refresh(element) {
      return!(!element || ("block" === element.css("display") || (element.remove(), 0)));
    }
    /**
     * @return {?}
     */
    function done() {
      return refresh(scroller) || refresh(activeClassName);
    }
    /**
     * @return {?}
     */
    function render() {
      if (o > 10 && element.destroy(), !element.$box) {
        return false;
      }
      element.$wp.prepend(parse($(parse("NCKB1zwtPA9tqzajXC2c2A7B-16VD3spzJ1C9C3D5oOF2OB1NB1LD7VA5QF4TE3gytXB2A4C-8VA2AC4E1D3GB2EB2KC3KD1MF1juuSB1A8C6yfbmd1B2a1A5qdsdB2tivbC3CB1KC1CH1eLA2sTF1B4I4H-7B-21UB6b1F5bzzzyAB4JC3MG2hjdKC1JE6C1E1cj1pD-16pUE5B4prra2B5ZB3D3C3pxj1EA6A3rnJA2C-7I-7JD9D1E1wYH1F3sTB5TA2G4H4ZA22qZA5BB3mjcvcCC3JB1xillavC-21VE6PC5SI4YC5C8mb1A3WC3BD2B5aoDA2qqAE3A5D-17fOD1D5RD4WC10tE6OAZC3nF-7b1C4A4D3qCF2fgmapcromlHA2QA6a1E1D3e1A6C2bie2F4iddnIA7B2mvnwcIB5OA1DB2OLQA3PB10WC7WC5d1E3uI-7b1D5D6b1E4D2arlAA4EA1F-11srxI-7MB1D7PF1E5B4adB-21YD5vrZH3D3xAC4E1A2GF2CF2J-7yNC2JE1MI2hH-7QB1C6B5B-9bA-7XB13a1B5VievwpKB4LA3NF-10H-9I-8hhaC-16nqPG4wsleTD5zqYF3h1G2B7B4yvGE2Pi1H-7C-21OE6B1uLD1kI4WC1E7C5g1D-8fue1C8C6c1D4D3Hpi1CC4kvGC2E1legallyXB4axVA11rsA4A-9nkdtlmzBA2GD3A13A6CB1dabE1lezrUE6RD5TB4A-7f1C8c1B5d1D4D3tyfCD5C2D2=="))));
      scroller = element.$wp.find("> div:first");
      activeClassName = scroller.find("> a");
      if ("rtl" == element.opts.direction) {
        scroller.css("left", "auto").css("right", 0).setAttribute("direction", "rtl");
      }
      o++;
    }
    /**
     * @return {undefined}
     */
    function update() {
      var tokens = element.o_win.FEK;
      try {
        tokens = tokens || localStorage && localStorage.FEK;
      } catch (k) {
      }
      tokens = tokens || (element.opts.key || [""]);
      var url = parse($("ziRA1E3B9pA5B-11D-11xg1A3ZB5D1D4B-11ED2EG2pdeoC1clIH4wB-22yQD5uF4YE3E3A9=="));
      if ("string" == typeof tokens) {
        /** @type {Array} */
        tokens = [tokens];
      }
      /** @type {boolean} */
      element.ul = true;
      /** @type {number} */
      var i = 0;
      for (;i < tokens.length;i++) {
        var ea = parse(tokens[i]) || "";
        if (!(ea !== parse($(parse("mcVRDoB1BGILD7YFe1BTXBA7B6=="))) && (ea.indexOf(value, ea.length - value.length) < 0 && [parse("9qqG-7amjlwq=="), parse("KA3B3C2A6D1D5H5H1A3=="), parse("QzbzvxyB2yA-9m=="), parse("ji1kacwmgG5bc=="), parse("naamngiA3dA-16xtE-11C-9B1H-8sc==")].indexOf(value) < 0))) {
          /** @type {boolean} */
          element.ul = false;
          break;
        }
      }
      /** @type {Image} */
      var s = new Image;
      if (true === element.ul) {
        render();
        /** @type {string} */
        s.src = $(parse(url)) + "u";
      }
      element.events.on("contentChanged", function() {
        if (true === element.ul) {
          if (done()) {
            render();
          }
        }
      });
      element.events.on("destroy", function() {
        if (scroller) {
          if (scroller.length) {
            scroller.remove();
          }
        }
      }, true);
    }
    var scroller;
    var activeClassName;
    /** @type {string} */
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var value = function() {
      /** @type {number} */
      var a = 0;
      /** @type {string} */
      var value = document.domain;
      /** @type {Array.<string>} */
      var models = value.split(".");
      /** @type {string} */
      var name = "_gd" + (new Date).getTime();
      for (;a < models.length - 1 && -1 == document.cookie.indexOf(name + "=" + name);) {
        /** @type {string} */
        value = models.slice(-1 - ++a).join(".");
        /** @type {string} */
        document.cookie = name + "=" + name + ";domain=" + value + ";";
      }
      return document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=" + value + ";", (value || "").replace(/(^\.*)|(\.*$)/g, "");
    }();
    var parse = $(each);
    /** @type {number} */
    var o = 0;
    return{
      /** @type {function (): undefined} */
      _init : update
    };
  };
  $.extend($.FE.DEFAULTS, {
    pastePlain : false,
    pasteDeniedTags : ["colgroup", "col"],
    pasteDeniedAttrs : ["class", "id", "style"],
    pasteAllowedStyleProps : [],
    pasteAllowLocalImages : false
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.paste = function(self) {
    /**
     * @param {?} state
     * @param {?} styles
     * @return {undefined}
     */
    function done(state, styles) {
      try {
        self.win.localStorage.setItem("fr-copied-html", state);
        self.win.localStorage.setItem("fr-copied-text", styles);
      } catch (d) {
      }
    }
    /**
     * @param {Event} control
     * @return {undefined}
     */
    function initialize(control) {
      var value = self.html.getSelected();
      done(value, $("<div>").html(value).text());
      if ("cut" == control.type) {
        self.undo.saveStep();
        setTimeout(function() {
          self.selection.save();
          self.html.wrap();
          self.selection.restore();
          self.events.focus();
          self.undo.saveStep();
        }, 0);
      }
    }
    /**
     * @param {Object} e
     * @return {?}
     */
    function handler(e) {
      if (w) {
        return false;
      }
      if (e.originalEvent && (e = e.originalEvent), false === self.events.trigger("paste.before", [e])) {
        return e.preventDefault(), false;
      }
      if (r = self.$win.scrollTop(), e && (e.clipboardData && e.clipboardData.getData)) {
        /** @type {string} */
        var requestUrl = "";
        var copy = e.clipboardData.types;
        if (self.helpers.isArray(copy)) {
          /** @type {number} */
          var i = 0;
          for (;i < copy.length;i++) {
            requestUrl += copy[i] + ";";
          }
        } else {
          requestUrl = copy;
        }
        if (val = "", /text\/rtf/.test(requestUrl) && (ret = e.clipboardData.getData("text/rtf")), /text\/html/.test(requestUrl) ? val = e.clipboardData.getData("text/html") : /text\/rtf/.test(requestUrl) && self.browser.safari ? val = ret : /text\/plain/.test(requestUrl) && (!self.browser.mozilla && (val = self.html.escapeEntities(e.clipboardData.getData("text/plain")).replace(/\n/g, "<br>"))), "" !== val) {
          return update(), e.preventDefault && (e.stopPropagation(), e.preventDefault()), false;
        }
        /** @type {null} */
        val = null;
      }
      return init(), false;
    }
    /**
     * @param {Object} e
     * @return {?}
     */
    function next(e) {
      if (e.originalEvent && (e = e.originalEvent), e && (e.dataTransfer && e.dataTransfer.getData)) {
        /** @type {string} */
        var requestUrl = "";
        var copy = e.dataTransfer.types;
        if (self.helpers.isArray(copy)) {
          /** @type {number} */
          var i = 0;
          for (;i < copy.length;i++) {
            requestUrl += copy[i] + ";";
          }
        } else {
          requestUrl = copy;
        }
        if (val = "", /text\/rtf/.test(requestUrl) && (ret = e.dataTransfer.getData("text/rtf")), /text\/html/.test(requestUrl) ? val = e.dataTransfer.getData("text/html") : /text\/rtf/.test(requestUrl) && self.browser.safari ? val = ret : /text\/plain/.test(requestUrl) && (!this.browser.mozilla && (val = self.html.escapeEntities(e.dataTransfer.getData("text/plain")).replace(/\n/g, "<br>"))), "" !== val) {
          self.keys.forceUndo();
          suiteView = self.snapshot.get();
          self.selection.remove();
          if (false !== self.markers.insertAtPoint(e)) {
            var gap = self.el.querySelector(".fr-marker");
            return $(gap).replaceWith($.FE.MARKERS), update(), e.preventDefault && (e.stopPropagation(), e.preventDefault()), false;
          }
        } else {
          /** @type {null} */
          val = null;
        }
      }
    }
    /**
     * @return {undefined}
     */
    function init() {
      self.selection.save();
      self.events.disableBlur();
      /** @type {null} */
      val = null;
      if (wrapper) {
        wrapper.html("");
        if (self.browser.edge) {
          if (self.opts.iframe) {
            self.$el.append(wrapper);
          }
        }
      } else {
        wrapper = $('<div contenteditable="true" style="position: fixed; top: 0; left: -9999px; height: 100%; width: 0; word-break: break-all; overflow:hidden; z-index: 2147483647; line-height: 140%;" tabIndex="-1"></div>');
        if (self.browser.safari) {
          wrapper.css("top", self.$sc.scrollTop());
          self.$el.after(wrapper);
        } else {
          if (self.browser.edge && self.opts.iframe) {
            self.$el.append(wrapper);
          } else {
            self.$box.after(wrapper);
          }
        }
        self.events.on("destroy", function() {
          wrapper.remove();
        });
      }
      wrapper.focus();
      self.win.setTimeout(update, 1);
    }
    /**
     * @param {string} html
     * @return {?}
     */
    function load(html) {
      var i;
      html = html.replace(/<p(.*?)class="?'?MsoListParagraph"?'? ([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ul><li>$3</li></ul>");
      html = html.replace(/<p(.*?)class="?'?NumberedText"?'? ([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ol><li>$3</li></ol>");
      html = html.replace(/<p(.*?)class="?'?MsoListParagraphCxSpFirst"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ul><li$3>$5</li>");
      html = html.replace(/<p(.*?)class="?'?NumberedTextCxSpFirst"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<ol><li$3>$5</li>");
      html = html.replace(/<p(.*?)class="?'?MsoListParagraphCxSpMiddle"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>");
      html = html.replace(/<p(.*?)class="?'?NumberedTextCxSpMiddle"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>");
      html = html.replace(/<p(.*?)class="?'?MsoListBullet"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li>");
      html = html.replace(/<p(.*?)class="?'?MsoListParagraphCxSpLast"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li></ul>");
      html = html.replace(/<p(.*?)class="?'?NumberedTextCxSpLast"?'?([\s\S]*?)(level\d)?([\s\S]*?)>([\s\S]*?)<\/p>/gi, "<li$3>$5</li></ol>");
      html = html.replace(/<span([^<]*?)style="?'?mso-list:Ignore"?'?([\s\S]*?)>([\s\S]*?)<span/gi, "<span><span");
      html = html.replace(/\x3c!--\[if \!supportLists\]--\x3e([\s\S]*?)\x3c!--\[endif\]--\x3e/gi, "");
      html = html.replace(/<!\[if \!supportLists\]>([\s\S]*?)<!\[endif\]>/gi, "");
      html = html.replace(/(\n|\r| class=(")?Mso[a-zA-Z0-9]+(")?)/gi, " ");
      html = html.replace(/\x3c!--[\s\S]*?--\x3e/gi, "");
      html = html.replace(/<(\/)*(meta|link|span|\\?xml:|st1:|o:|font)(.*?)>/gi, "");
      /** @type {Array} */
      var badTags = ["style", "script", "applet", "embed", "noframes", "noscript"];
      /** @type {number} */
      i = 0;
      for (;i < badTags.length;i++) {
        /** @type {RegExp} */
        var regex = new RegExp("<" + badTags[i] + ".*?" + badTags[i] + "(.*?)>", "gi");
        html = html.replace(regex, "");
      }
      html = html.replace(/&nbsp;/gi, " ");
      html = html.replace(/<td([^>]*)><\/td>/g, "<td$1><br></td>");
      html = html.replace(/<th([^>]*)><\/th>/g, "<th$1><br></th>");
      var last;
      do {
        /** @type {string} */
        last = html;
        html = html.replace(/<[^\/>][^>]*><\/[^>]+>/gi, "");
      } while (html != last);
      html = html.replace(/<lilevel([^1])([^>]*)>/gi, '<li data-indent="true"$2>');
      html = html.replace(/<lilevel1([^>]*)>/gi, "<li$1>");
      html = self.clean.html(html, self.opts.pasteDeniedTags, self.opts.pasteDeniedAttrs);
      html = html.replace(/<a>(.[^<]+)<\/a>/gi, "$1");
      html = html.replace(/<br> */g, "<br>");
      var container = self.o_doc.createElement("div");
      /** @type {string} */
      container.innerHTML = html;
      var codeSegments = container.querySelectorAll("li[data-indent]");
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        var el = codeSegments[i];
        var parentElement = el.previousElementSibling;
        if (parentElement && "LI" == parentElement.tagName) {
          var canvasElement = parentElement.querySelector(":scope > ul, :scope > ol");
          if (!canvasElement) {
            /** @type {Element} */
            canvasElement = document.createElement("ul");
            parentElement.appendChild(canvasElement);
          }
          canvasElement.appendChild(el);
        } else {
          el.removeAttribute("data-indent");
        }
      }
      return self.html.cleanBlankSpaces(container), html = container.innerHTML;
    }
    /**
     * @param {string} xhtml
     * @return {?}
     */
    function create(xhtml) {
      var i;
      /** @type {null} */
      var el = null;
      var e = self.doc.createElement("div");
      /** @type {string} */
      e.innerHTML = xhtml;
      var codeSegments = e.querySelectorAll("p, div, h1, h2, h3, h4, h5, h6, pre, blockquote");
      /** @type {number} */
      i = 0;
      for (;i < codeSegments.length;i++) {
        el = codeSegments[i];
        /** @type {string} */
        el.outerHTML = "<" + (self.html.defaultTag() || "DIV") + ">" + el.innerHTML + "</" + (self.html.defaultTag() || "DIV") + ">";
      }
      codeSegments = e.querySelectorAll("*:not(" + "p, div, h1, h2, h3, h4, h5, h6, pre, blockquote, ul, ol, li, table, tbody, thead, tr, td, br, img".split(",").join("):not(") + ")");
      /** @type {number} */
      i = codeSegments.length - 1;
      for (;i >= 0;i--) {
        el = codeSegments[i];
        el.outerHTML = el.innerHTML;
      }
      /**
       * @param {Node} node
       * @return {undefined}
       */
      var walk = function(node) {
        var c = self.node.contents(node);
        /** @type {number} */
        var i = 0;
        for (;i < c.length;i++) {
          if (c[i].nodeType != Node.TEXT_NODE && c[i].nodeType != Node.ELEMENT_NODE) {
            c[i].parentNode.removeChild(c[i]);
          } else {
            walk(c[i]);
          }
        }
      };
      return walk(e), e.innerHTML;
    }
    /**
     * @return {undefined}
     */
    function update() {
      if (self.browser.edge) {
        if (self.opts.iframe) {
          self.$box.after(wrapper);
        }
      }
      if (!suiteView) {
        self.keys.forceUndo();
        suiteView = self.snapshot.get();
      }
      if (null === val) {
        val = wrapper.get(0).innerHTML;
        self.selection.restore();
        self.events.enableBlur();
      }
      var typePattern = val.match(/(class=\"?Mso|class=\'?Mso|class="?Xl|class='?Xl|class=Xl|style=\"[^\"]*\bmso\-|style=\'[^\']*\bmso\-|w:WordDocument)/gi);
      var index = self.events.chainTrigger("paste.beforeCleanup", val);
      if (index) {
        if ("string" == typeof index) {
          /** @type {string} */
          val = index;
        }
      }
      if (!typePattern || typePattern && false !== self.events.trigger("paste.wordPaste", [val])) {
        parse(val, typePattern);
      }
    }
    /**
     * @param {string} xhtml
     * @return {?}
     */
    function get(xhtml) {
      var element = self.doc.createElement("div");
      /** @type {string} */
      element.innerHTML = xhtml;
      /** @type {null} */
      var string = null;
      try {
        self.win.localStorage.getItem("fr-copied-html");
        string = self.win.localStorage.getItem("fr-copied-text");
      } catch (e) {
      }
      return!(!string || element.textContent.replace(/(\u00A0)/gi, " ").replace(/\r|\n/gi, "") != string.replace(/(\u00A0)/gi, " ").replace(/(\r|\n)+([ ]+[\r\n]+)*/gi, " "));
    }
    /**
     * @param {string} html
     * @param {?} args
     * @param {?} execResult
     * @return {undefined}
     */
    function parse(html, args, execResult) {
      var i;
      /** @type {null} */
      var elems = null;
      /** @type {null} */
      var elem = null;
      if (html.toLowerCase().indexOf("<body") >= 0) {
        html = html.replace(/[.\s\S\w\W<>]*<body[^>]*>[\s]*([.\s\S\w\W<>]*)[\s]*<\/body>[.\s\S\w\W<>]*/gi, "$1");
        html = html.replace(/ \n/g, " ").replace(/\n /g, " ").replace(/([^>])\n([^<])/g, "$1 $2");
      }
      /** @type {boolean} */
      var l = false;
      if (html.indexOf('id="docs-internal-guid') >= 0 && (html = html.replace(/^[\w\W\s\S]* id="docs-internal-guid[^>]*>([\w\W\s\S]*)<\/b>[\w\W\s\S]*$/g, "$1"), l = true), !args) {
        var name = get(html);
        var htmlAllowedStyleProps = self.opts.htmlAllowedStyleProps;
        self.opts.htmlAllowedStyleProps = name ? [".*"] : self.opts.pasteAllowedStyleProps;
        /** @type {boolean} */
        self.opts.htmlAllowComments = false;
        var index = name ? [] : self.opts.pasteDeniedTags;
        var pdataCur = name ? [] : self.opts.pasteDeniedAttrs;
        html = self.clean.html(html, index, pdataCur);
        self.opts.htmlAllowedStyleProps = htmlAllowedStyleProps;
        /** @type {boolean} */
        self.opts.htmlAllowComments = true;
        html = callback(html);
        html = html.replace(/\r|\n|\t/g, "");
        html = html.replace(/^ */g, "").replace(/ *$/g, "");
      }
      if (!!args) {
        if (!(self.wordPaste && execResult)) {
          html = html.replace(/^\n*/g, "").replace(/^ /g, "");
          if (0 === html.indexOf("<colgroup>")) {
            /** @type {string} */
            html = "<table>" + html + "</table>";
          }
          html = load(html);
          html = callback(html);
        }
      }
      if (self.opts.pastePlain) {
        html = create(html);
      }
      var json = self.events.chainTrigger("paste.afterCleanup", html);
      if ("string" == typeof json && (html = json), "" !== html) {
        var container = self.o_doc.createElement("div");
        /** @type {string} */
        container.innerHTML = html;
        self.spaces.normalize(container);
        var resultItems = container.getElementsByTagName("span");
        /** @type {number} */
        i = resultItems.length - 1;
        for (;i >= 0;i--) {
          var result = resultItems[i];
          if (0 === result.attributes.length) {
            result.outerHTML = result.innerHTML;
          }
        }
        var target = self.selection.element();
        /** @type {boolean} */
        var p = false;
        if (target && ($(target).parentsUntil(self.el, "ul, ol").length && (p = true)), p) {
          var children = container.children;
          if (1 == children.length) {
            if (["OL", "UL"].indexOf(children[0].tagName) >= 0) {
              children[0].outerHTML = children[0].innerHTML;
            }
          }
        }
        if (!l) {
          var codeSegments = container.getElementsByTagName("br");
          /** @type {number} */
          i = codeSegments.length - 1;
          for (;i >= 0;i--) {
            var node = codeSegments[i];
            if (self.node.isBlock(node.previousSibling)) {
              node.parentNode.removeChild(node);
            }
          }
        }
        if (self.opts.enter == $.FE.ENTER_BR) {
          elems = container.querySelectorAll("p, div");
          /** @type {number} */
          i = elems.length - 1;
          for (;i >= 0;i--) {
            elem = elems[i];
            if (0 === elem.attributes.length) {
              /** @type {string} */
              elem.outerHTML = elem.innerHTML + (elem.nextSibling && !self.node.isEmpty(elem) ? "<br>" : "");
            }
          }
        } else {
          if (self.opts.enter == $.FE.ENTER_DIV) {
            elems = container.getElementsByTagName("p");
            /** @type {number} */
            i = elems.length - 1;
            for (;i >= 0;i--) {
              elem = elems[i];
              /** @type {string} */
              elem.outerHTML = "<div>" + elem.innerHTML + "</div>";
            }
          } else {
            if (self.opts.enter == $.FE.ENTER_P) {
              if (container.childNodes.length) {
                if ("P" == container.childNodes[0].tagName) {
                  container.childNodes[0].outerHTML = container.childNodes[0].innerHTML;
                }
              }
            }
          }
        }
        html = container.innerHTML;
        self.html.insert(html, true);
      }
      save();
      self.undo.saveStep(suiteView);
      /** @type {null} */
      suiteView = null;
      self.undo.saveStep();
    }
    /**
     * @return {undefined}
     */
    function save() {
      self.events.trigger("paste.after");
    }
    /**
     * @return {?}
     */
    function intersect() {
      return ret;
    }
    /**
     * @param {string} html
     * @return {?}
     */
    function callback(html) {
      var i;
      var div = self.o_doc.createElement("div");
      /** @type {string} */
      div.innerHTML = html;
      var codeSegments = div.querySelectorAll("*:empty:not(td):not(th):not(iframe):not(svg):not(" + $.FE.VOID_ELEMENTS.join("):not(") + ")");
      for (;codeSegments.length;) {
        /** @type {number} */
        i = 0;
        for (;i < codeSegments.length;i++) {
          codeSegments[i].parentNode.removeChild(codeSegments[i]);
        }
        codeSegments = div.querySelectorAll("*:empty:not(td):not(th):not(iframe):not(svg):not(" + $.FE.VOID_ELEMENTS.join("):not(") + ")");
      }
      var resultItems = div.querySelectorAll(":scope > div:not([style]), td > div:not([style]), th > div:not([style]), li > div:not([style])");
      for (;resultItems.length;) {
        var el = resultItems[resultItems.length - 1];
        if (self.html.defaultTag() && "div" != self.html.defaultTag()) {
          if (el.querySelector(self.html.blockTagsQuery())) {
            el.outerHTML = el.innerHTML;
          } else {
            /** @type {string} */
            el.outerHTML = "<" + self.html.defaultTag() + ">" + el.innerHTML + "</" + self.html.defaultTag() + ">";
          }
        } else {
          var fixes = el.querySelectorAll("*");
          if (!fixes.length || "BR" !== fixes[fixes.length - 1].tagName && 0 === el.innerText.length) {
            /** @type {string} */
            el.outerHTML = el.innerHTML + "<br>";
          } else {
            el.outerHTML = el.innerHTML;
          }
        }
        resultItems = div.querySelectorAll(":scope > div:not([style]), td > div:not([style]), th > div:not([style]), li > div:not([style])");
      }
      resultItems = div.querySelectorAll("div:not([style])");
      for (;resultItems.length;) {
        /** @type {number} */
        i = 0;
        for (;i < resultItems.length;i++) {
          var result = resultItems[i];
          var content = result.innerHTML.replace(/\u0009/gi, "").trim();
          result.outerHTML = content;
        }
        resultItems = div.querySelectorAll("div:not([style])");
      }
      return div.innerHTML;
    }
    /**
     * @return {undefined}
     */
    function setup() {
      self.el.addEventListener("copy", initialize);
      self.el.addEventListener("cut", initialize);
      self.el.addEventListener("paste", handler, {
        capture : true
      });
      self.events.on("drop", next);
      if (self.browser.msie) {
        if (self.browser.version < 11) {
          self.events.on("mouseup", function(e) {
            if (2 == e.button) {
              setTimeout(function() {
                /** @type {boolean} */
                w = false;
              }, 50);
              /** @type {boolean} */
              w = true;
            }
          }, true);
          self.events.on("beforepaste", handler);
        }
      }
      self.events.on("destroy", setToolbarStates);
    }
    /**
     * @return {undefined}
     */
    function setToolbarStates() {
      self.el.removeEventListener("copy", initialize);
      self.el.removeEventListener("cut", initialize);
      self.el.removeEventListener("paste", handler);
    }
    var r;
    var val;
    var ret;
    var wrapper;
    var suiteView;
    /** @type {boolean} */
    var w = false;
    return{
      /** @type {function (): undefined} */
      _init : setup,
      /** @type {function (string): ?} */
      removeEmptyTags : callback,
      /** @type {function (): ?} */
      getRtfClipboard : intersect,
      /** @type {function (?, ?): undefined} */
      saveCopiedText : done,
      /** @type {function (string, ?, ?): undefined} */
      clean : parse
    };
  };
  $.extend($.FE.DEFAULTS, {
    shortcutsEnabled : [],
    shortcutsHint : true
  });
  $.FE.SHORTCUTS_MAP = {};
  /**
   * @param {number} dataAndEvents
   * @param {string} command
   * @param {string} aDefaultValue
   * @param {string} name
   * @param {boolean} recurring
   * @param {boolean} mayParseLabeledStatementInstead
   * @return {undefined}
   */
  $.FE.RegisterShortcut = function(dataAndEvents, command, aDefaultValue, name, recurring, mayParseLabeledStatementInstead) {
    $.FE.SHORTCUTS_MAP[(recurring ? "^" : "") + (mayParseLabeledStatementInstead ? "@" : "") + dataAndEvents] = {
      cmd : command,
      val : aDefaultValue,
      letter : name,
      shift : recurring,
      option : mayParseLabeledStatementInstead
    };
    $.FE.DEFAULTS.shortcutsEnabled.push(command);
  };
  $.FE.RegisterShortcut($.FE.KEYCODE.E, "show", null, "E", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.B, "bold", null, "B", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.I, "italic", null, "I", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.U, "underline", null, "U", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.S, "strikeThrough", null, "S", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.CLOSE_SQUARE_BRACKET, "indent", null, "]", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.OPEN_SQUARE_BRACKET, "outdent", null, "[", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.Z, "undo", null, "Z", false, false);
  $.FE.RegisterShortcut($.FE.KEYCODE.Z, "redo", null, "Z", true, false);
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.shortcuts = function(self) {
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @return {?}
     */
    function func(mayParseLabeledStatementInstead) {
      if (!self.opts.shortcutsHint) {
        return null;
      }
      if (!viewItems) {
        viewItems = {};
        var i;
        for (i in $.FE.SHORTCUTS_MAP) {
          if ($.FE.SHORTCUTS_MAP.hasOwnProperty(i)) {
            if (self.opts.shortcutsEnabled.indexOf($.FE.SHORTCUTS_MAP[i].cmd) >= 0) {
              viewItems[$.FE.SHORTCUTS_MAP[i].cmd + "." + ($.FE.SHORTCUTS_MAP[i].val || "")] = {
                shift : $.FE.SHORTCUTS_MAP[i].shift,
                option : $.FE.SHORTCUTS_MAP[i].option,
                letter : $.FE.SHORTCUTS_MAP[i].letter
              };
            }
          }
        }
      }
      var item = viewItems[mayParseLabeledStatementInstead];
      return item ? (self.helpers.isMac() ? String.fromCharCode(8984) : "Ctrl+") + (item.shift ? self.helpers.isMac() ? String.fromCharCode(8679) : "Shift+" : "") + (item.option ? self.helpers.isMac() ? String.fromCharCode(8997) : "Alt+" : "") + item.letter : null;
    }
    /**
     * @param {Event} e
     * @return {?}
     */
    function init(e) {
      if (!self.core.hasFocus()) {
        return true;
      }
      var key = e.which;
      var style = -1 != navigator.userAgent.indexOf("Mac OS X") ? e.metaKey : e.ctrlKey;
      if ("keyup" == e.type && (g && key != $.FE.KEYCODE.META)) {
        return g = false, false;
      }
      if ("keydown" == e.type) {
        /** @type {boolean} */
        g = false;
      }
      /** @type {string} */
      var name = (e.shiftKey ? "^" : "") + (e.altKey ? "@" : "") + key;
      if (style && $.FE.SHORTCUTS_MAP[name]) {
        var type = $.FE.SHORTCUTS_MAP[name].cmd;
        if (type && self.opts.shortcutsEnabled.indexOf(type) >= 0) {
          var chunk;
          var val = $.FE.SHORTCUTS_MAP[name].val;
          if (type && !val ? chunk = self.$tb.find('.fr-command[data-cmd="' + type + '"]') : type && (val && (chunk = self.$tb.find('.fr-command[data-cmd="' + type + '"][data-param1="' + val + '"]'))), chunk.length) {
            return e.preventDefault(), e.stopPropagation(), chunk.parents(".fr-toolbar").data("instance", self), "keydown" == e.type && (self.button.exec(chunk), g = true), false;
          }
          if (type && self.commands[type]) {
            return e.preventDefault(), e.stopPropagation(), "keydown" == e.type && (self.commands[type](), g = true), false;
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function setup() {
      self.events.on("keydown", init, true);
      self.events.on("keyup", init, true);
    }
    /** @type {null} */
    var viewItems = null;
    /** @type {boolean} */
    var g = false;
    return{
      /** @type {function (): undefined} */
      _init : setup,
      /** @type {function (number): ?} */
      get : func
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.snapshot = function(self) {
    /**
     * @param {Object} node
     * @return {?}
     */
    function processNode(node) {
      var nodes = node.parentNode.childNodes;
      /** @type {number} */
      var result = 0;
      /** @type {null} */
      var child = null;
      /** @type {number} */
      var i = 0;
      for (;i < nodes.length;i++) {
        if (child) {
          /** @type {boolean} */
          var f = nodes[i].nodeType === Node.TEXT_NODE && "" === nodes[i].textContent;
          /** @type {boolean} */
          var g = child.nodeType === Node.TEXT_NODE && nodes[i].nodeType === Node.TEXT_NODE;
          if (!f) {
            if (!g) {
              result++;
            }
          }
        }
        if (nodes[i] == node) {
          return result;
        }
        child = nodes[i];
      }
    }
    /**
     * @param {Function} childNode
     * @return {?}
     */
    function animate(childNode) {
      /** @type {Array} */
      var matched = [];
      if (!childNode.parentNode) {
        return[];
      }
      for (;!self.node.isElement(childNode);) {
        matched.push(processNode(childNode));
        childNode = childNode.parentNode;
      }
      return matched.reverse();
    }
    /**
     * @param {Object} node
     * @param {number} offset
     * @return {?}
     */
    function isSplitPoint(node, offset) {
      for (;node && node.nodeType === Node.TEXT_NODE;) {
        var parent = node.previousSibling;
        if (parent) {
          if (parent.nodeType == Node.TEXT_NODE) {
            offset += parent.textContent.length;
          }
        }
        node = parent;
      }
      return offset;
    }
    /**
     * @param {Object} range
     * @return {?}
     */
    function fn(range) {
      return{
        scLoc : animate(range.startContainer),
        scOffset : isSplitPoint(range.startContainer, range.startOffset),
        ecLoc : animate(range.endContainer),
        ecOffset : isSplitPoint(range.endContainer, range.endOffset)
      };
    }
    /**
     * @return {?}
     */
    function init() {
      var that = {};
      if (self.events.trigger("snapshot.before"), that.html = (self.$wp ? self.$el.html() : self.$oel.get(0).outerHTML).replace(/ style=""/g, ""), that.ranges = [], self.$wp && (self.selection.inEditor() && self.core.hasFocus())) {
        var codeSegments = self.selection.ranges();
        /** @type {number} */
        var i = 0;
        for (;i < codeSegments.length;i++) {
          that.ranges.push(fn(codeSegments[i]));
        }
      }
      return self.events.trigger("snapshot.after", [that]), that;
    }
    /**
     * @param {Array} codeSegments
     * @return {?}
     */
    function hide(codeSegments) {
      var el = self.el;
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        el = el.childNodes[codeSegments[i]];
      }
      return el;
    }
    /**
     * @param {Selection} sel
     * @param {?} node
     * @return {undefined}
     */
    function select(sel, node) {
      try {
        var textNode1 = hide(node.scLoc);
        var len = node.scOffset;
        var text2 = hide(node.ecLoc);
        var index = node.ecOffset;
        var range = self.doc.createRange();
        range.setStart(textNode1, len);
        range.setEnd(text2, index);
        sel.addRange(range);
      } catch (j) {
      }
    }
    /**
     * @param {?} event
     * @return {undefined}
     */
    function start(event) {
      if (self.$el.html() != event.html) {
        if (self.opts.htmlExecuteScripts) {
          self.$el.html(event.html);
        } else {
          self.el.innerHTML = event.html;
        }
      }
      var sel = self.selection.get();
      self.selection.clear();
      self.events.focus(true);
      /** @type {number} */
      var i = 0;
      for (;i < event.ranges.length;i++) {
        select(sel, event.ranges[i]);
      }
    }
    /**
     * @param {Object} data
     * @param {Object} opts
     * @return {?}
     */
    function parse(data, opts) {
      return data.html == opts.html && (!self.core.hasFocus() || JSON.stringify(data.ranges) == JSON.stringify(opts.ranges));
    }
    return{
      /** @type {function (): ?} */
      get : init,
      /** @type {function (?): undefined} */
      restore : start,
      /** @type {function (Object, Object): ?} */
      equal : parse
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.undo = function(self) {
    /**
     * @param {Event} e
     * @return {undefined}
     */
    function onKeyDown(e) {
      var key = e.which;
      if (self.keys.ctrlKey(e)) {
        if (90 == key) {
          if (e.shiftKey) {
            e.preventDefault();
          }
        }
        if (90 == key) {
          e.preventDefault();
        }
      }
    }
    /**
     * @return {?}
     */
    function undo() {
      return!(0 === self.undo_stack.length || self.undo_index <= 1);
    }
    /**
     * @return {?}
     */
    function promote() {
      return self.undo_index != self.undo_stack.length;
    }
    /**
     * @param {Object} obj
     * @return {?}
     */
    function post(obj) {
      if (!self.undo_stack || (self.undoing || self.el.querySelector(".fr-marker"))) {
        return false;
      }
      if (void 0 === obj) {
        obj = self.snapshot.get();
        if (!(self.undo_stack[self.undo_index - 1] && self.snapshot.equal(self.undo_stack[self.undo_index - 1], obj))) {
          clear();
          self.undo_stack.push(obj);
          self.undo_index++;
          if (obj.html != id) {
            self.events.trigger("contentChanged");
            id = obj.html;
          }
        }
      } else {
        clear();
        if (self.undo_index > 0) {
          /** @type {Object} */
          self.undo_stack[self.undo_index - 1] = obj;
        } else {
          self.undo_stack.push(obj);
          self.undo_index++;
        }
      }
    }
    /**
     * @return {?}
     */
    function clear() {
      if (!self.undo_stack || self.undoing) {
        return false;
      }
      for (;self.undo_stack.length > self.undo_index;) {
        self.undo_stack.pop();
      }
    }
    /**
     * @return {undefined}
     */
    function callback() {
      if (self.undo_index > 1) {
        /** @type {boolean} */
        self.undoing = true;
        var obj = self.undo_stack[--self.undo_index - 1];
        clearTimeout(self._content_changed_timer);
        self.snapshot.restore(obj);
        id = obj.html;
        self.popups.hideAll();
        self.toolbar.enable();
        self.events.trigger("contentChanged");
        self.events.trigger("commands.undo");
        /** @type {boolean} */
        self.undoing = false;
      }
    }
    /**
     * @return {undefined}
     */
    function render() {
      if (self.undo_index < self.undo_stack.length) {
        /** @type {boolean} */
        self.undoing = true;
        var obj = self.undo_stack[self.undo_index++];
        clearTimeout(self._content_changed_timer);
        self.snapshot.restore(obj);
        id = obj.html;
        self.popups.hideAll();
        self.toolbar.enable();
        self.events.trigger("contentChanged");
        self.events.trigger("commands.redo");
        /** @type {boolean} */
        self.undoing = false;
      }
    }
    /**
     * @return {undefined}
     */
    function reset() {
      /** @type {number} */
      self.undo_index = 0;
      /** @type {Array} */
      self.undo_stack = [];
    }
    /**
     * @return {undefined}
     */
    function uncaught() {
      /** @type {Array} */
      self.undo_stack = [];
    }
    /**
     * @return {undefined}
     */
    function init() {
      reset();
      self.events.on("initialized", function() {
        id = (self.$wp ? self.$el.html() : self.$oel.get(0).outerHTML).replace(/ style=""/g, "");
      });
      self.events.on("blur", function() {
        if (!self.el.querySelector(".fr-dragging")) {
          self.undo.saveStep();
        }
      });
      self.events.on("keydown", onKeyDown);
      self.events.on("destroy", uncaught);
    }
    /** @type {null} */
    var id = null;
    return{
      /** @type {function (): undefined} */
      _init : init,
      /** @type {function (): undefined} */
      run : callback,
      /** @type {function (): undefined} */
      redo : render,
      /** @type {function (): ?} */
      canDo : undo,
      /** @type {function (): ?} */
      canRedo : promote,
      /** @type {function (): ?} */
      dropRedo : clear,
      /** @type {function (): undefined} */
      reset : reset,
      /** @type {function (Object): ?} */
      saveStep : post
    };
  };
  /** @type {string} */
  $.FE.ICON_DEFAULT_TEMPLATE = "font_awesome";
  $.FE.ICON_TEMPLATES = {
    font_awesome : '<i class="fa fa-[NAME]" aria-hidden="true"></i>',
    text : '<span style="text-align: center;">[NAME]</span>',
    image : "<img src=[SRC] alt=[ALT] />",
    svg : '<svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">[PATH]</svg>'
  };
  $.FE.ICONS = {
    bold : {
      NAME : "bold"
    },
    italic : {
      NAME : "italic"
    },
    underline : {
      NAME : "underline"
    },
    strikeThrough : {
      NAME : "strikethrough"
    },
    subscript : {
      NAME : "subscript"
    },
    superscript : {
      NAME : "superscript"
    },
    color : {
      NAME : "tint"
    },
    outdent : {
      NAME : "outdent"
    },
    indent : {
      NAME : "indent"
    },
    undo : {
      NAME : "rotate-left"
    },
    redo : {
      NAME : "rotate-right"
    },
    insertHR : {
      NAME : "minus"
    },
    clearFormatting : {
      NAME : "eraser"
    },
    selectAll : {
      NAME : "mouse-pointer"
    }
  };
  /**
   * @param {?} i
   * @param {?} offsetPosition
   * @return {undefined}
   */
  $.FE.DefineIconTemplate = function(i, offsetPosition) {
    $.FE.ICON_TEMPLATES[i] = offsetPosition;
  };
  /**
   * @param {?} i
   * @param {?} offsetPosition
   * @return {undefined}
   */
  $.FE.DefineIcon = function(i, offsetPosition) {
    $.FE.ICONS[i] = offsetPosition;
  };
  /**
   * @return {?}
   */
  $.FE.MODULES.icon = function() {
    /**
     * @param {Node} b
     * @return {?}
     */
    function extend(b) {
      /** @type {null} */
      var a = null;
      var c = $.FE.ICONS[b];
      if (void 0 !== c) {
        var template = c.template || $.FE.ICON_DEFAULT_TEMPLATE;
        if (template) {
          if (template = $.FE.ICON_TEMPLATES[template]) {
            a = template.replace(/\[([a-zA-Z]*)\]/g, function(dataAndEvents, d) {
              return "NAME" == d ? c[d] || b : c[d];
            });
          }
        }
      }
      return a || b;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    function getTemplate(name) {
      var found = $.FE.ICONS[name];
      var ICON_DEFAULT_TEMPLATE = $.FE.ICON_DEFAULT_TEMPLATE;
      return void 0 !== found ? ICON_DEFAULT_TEMPLATE = found.template || $.FE.ICON_DEFAULT_TEMPLATE : ICON_DEFAULT_TEMPLATE;
    }
    return{
      /** @type {function (Node): ?} */
      create : extend,
      /** @type {function (?): ?} */
      getTemplate : getTemplate
    };
  };
  $.extend($.FE.DEFAULTS, {
    tooltips : true
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.tooltip = function(self) {
    /**
     * @return {undefined}
     */
    function toggle() {
      if (self.$tooltip) {
        self.$tooltip.removeClass("fr-visible").css("left", "-3000px").css("position", "fixed");
      }
    }
    /**
     * @param {Object} el
     * @param {boolean} rows
     * @return {?}
     */
    function render(el, rows) {
      if (el.data("title") || el.data("title", el.attr("title")), !el.data("title")) {
        return false;
      }
      if (!self.$tooltip) {
        init();
      }
      el.removeAttr("title");
      self.$tooltip.text(self.language.translate(el.data("title")));
      self.$tooltip.addClass("fr-visible");
      var meterPos = el.offset().left + (el.outerWidth() - self.$tooltip.outerWidth()) / 2;
      if (meterPos < 0) {
        /** @type {number} */
        meterPos = 0;
      }
      if (meterPos + self.$tooltip.outerWidth() > $(self.o_win).width()) {
        /** @type {number} */
        meterPos = $(self.o_win).width() - self.$tooltip.outerWidth();
      }
      if (void 0 === rows) {
        rows = self.opts.toolbarBottom;
      }
      var ratio = rows ? el.offset().top - self.$tooltip.height() : el.offset().top + el.outerHeight();
      self.$tooltip.css("position", "");
      self.$tooltip.css("left", meterPos);
      self.$tooltip.css("top", Math.ceil(ratio));
      if ("static" != $(self.o_doc).find("body:first").css("position")) {
        self.$tooltip.css("margin-left", -$(self.o_doc).find("body:first").offset().left);
        self.$tooltip.css("margin-top", -$(self.o_doc).find("body:first").offset().top);
      } else {
        self.$tooltip.css("margin-left", "");
        self.$tooltip.css("margin-top", "");
      }
    }
    /**
     * @param {Object} fn
     * @param {?} _name
     * @param {boolean} context
     * @return {undefined}
     */
    function add(fn, _name, context) {
      if (self.opts.tooltips) {
        if (!self.helpers.isMobile()) {
          self.events.$on(fn, "mouseenter", _name, function(ev) {
            if (!self.node.hasClass(ev.currentTarget, "fr-disabled")) {
              if (!self.edit.isDisabled()) {
                render($(ev.currentTarget), context);
              }
            }
          }, true);
          self.events.$on(fn, "mouseleave " + self._mousedown + " " + self._mouseup, _name, function() {
            toggle();
          }, true);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.opts.tooltips) {
        if (!self.helpers.isMobile()) {
          if (self.shared.$tooltip) {
            self.$tooltip = self.shared.$tooltip;
          } else {
            self.shared.$tooltip = $('<div class="fr-tooltip"></div>');
            self.$tooltip = self.shared.$tooltip;
            if (self.opts.theme) {
              self.$tooltip.addClass(self.opts.theme + "-theme");
            }
            $(self.o_doc).find("body:first").append(self.$tooltip);
          }
          self.events.on("shared.destroy", function() {
            self.$tooltip.html("").removeData().remove();
            /** @type {null} */
            self.$tooltip = null;
          }, true);
        }
      }
    }
    return{
      /** @type {function (): undefined} */
      hide : toggle,
      /** @type {function (Object, boolean): ?} */
      to : render,
      /** @type {function (Object, ?, boolean): undefined} */
      bind : add
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.button = function(self) {
    /**
     * @param {Array} arr
     * @param {string} v
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function fn(arr, v, deepDataAndEvents) {
      var ret = $();
      /** @type {number} */
      var i = 0;
      for (;i < arr.length;i++) {
        var selected = $(arr[i]);
        if (selected.is(v) && (ret = ret.add(selected)), deepDataAndEvents && selected.is(".fr-dropdown")) {
          var elems = selected.next().find(v);
          ret = ret.add(elems);
        }
      }
      return ret;
    }
    /**
     * @param {string} id
     * @param {boolean} deepDataAndEvents
     * @return {?}
     */
    function remove(id, deepDataAndEvents) {
      var name;
      var result = $();
      if (!id) {
        return result;
      }
      result = result.add(fn(item, id, deepDataAndEvents));
      result = result.add(fn(items, id, deepDataAndEvents));
      for (name in self.shared.popups) {
        if (self.shared.popups.hasOwnProperty(name)) {
          var set = self.shared.popups[name];
          var block = set.children().find(id);
          result = result.add(block);
        }
      }
      for (name in self.shared.modals) {
        if (self.shared.modals.hasOwnProperty(name)) {
          var modal = self.shared.modals[name];
          var todo = modal.$modal.find(id);
          result = result.add(todo);
        }
      }
      return result;
    }
    /**
     * @param {Object} t
     * @return {undefined}
     */
    function init(t) {
      var $this = t.next();
      var fr_active = self.node.hasClass(t.get(0), "fr-active");
      var n = remove(".fr-dropdown.fr-active").not(t);
      var _this = t.parents(".fr-toolbar, .fr-popup").data("instance") || self;
      if (_this.helpers.isIOS() && (!_this.el.querySelector(".fr-marker") && (_this.selection.save(), _this.selection.clear(), _this.selection.restore())), !fr_active) {
        var request = t.data("cmd");
        $this.find(".fr-command").removeClass("fr-active").attr("aria-selected", false);
        if ($.FE.COMMANDS[request]) {
          if ($.FE.COMMANDS[request].refreshOnShow) {
            $.FE.COMMANDS[request].refreshOnShow.apply(_this, [t, $this]);
          }
        }
        $this.css("left", t.offset().left - t.parent().offset().left - ("rtl" == self.opts.direction ? $this.width() - t.outerWidth() : 0));
        $this.addClass("test-height");
        var j = $this.outerHeight();
        $this.removeClass("test-height");
        $this.css("top", "").css("bottom", "");
        if (!self.opts.toolbarBottom && $this.offset().top + t.outerHeight() + j < $(self.o_doc).height()) {
          $this.css("top", t.position().top + t.outerHeight());
        } else {
          $this.css("bottom", self.$tb.height() - t.position().top);
        }
      }
      t.addClass("fr-blink").toggleClass("fr-active");
      if (t.hasClass("fr-active")) {
        $this.attr("aria-hidden", false);
        t.attr("aria-expanded", true);
      } else {
        $this.attr("aria-hidden", true);
        t.attr("aria-expanded", false);
      }
      setTimeout(function() {
        t.removeClass("fr-blink");
      }, 300);
      $this.css("margin-left", "");
      if ($this.offset().left + $this.outerWidth() > self.$sc.offset().left + self.$sc.width()) {
        $this.css("margin-left", -($this.offset().left + $this.outerWidth() - self.$sc.offset().left - self.$sc.width()));
      }
      n.removeClass("fr-active").attr("aria-expanded", false).next().attr("aria-hidden", true);
      n.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
      if (!(0 !== t.parents(".fr-popup").length)) {
        if (!self.opts.toolbarInline) {
          if (self.node.hasClass(t.get(0), "fr-active")) {
            self.$tb.css("zIndex", (self.opts.zIndex || 1) + 4);
          } else {
            self.$tb.css("zIndex", "");
          }
        }
      }
      var typePattern = $this.find("a.fr-command.fr-active:first");
      if (!self.helpers.isMobile()) {
        if (typePattern.length) {
          self.accessibility.focusToolbarElement(typePattern);
        } else {
          self.accessibility.focusToolbarElement(t);
        }
      }
    }
    /**
     * @param {Object} elem
     * @return {undefined}
     */
    function next(elem) {
      elem.addClass("fr-blink");
      setTimeout(function() {
        elem.removeClass("fr-blink");
      }, 500);
      var fn = elem.data("cmd");
      /** @type {Array} */
      var scripts = [];
      for (;void 0 !== elem.data("param" + (scripts.length + 1));) {
        scripts.push(elem.data("param" + (scripts.length + 1)));
      }
      var $active = remove(".fr-dropdown.fr-active");
      if ($active.length) {
        $active.removeClass("fr-active").attr("aria-expanded", false).next().attr("aria-hidden", true);
        $active.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
      }
      elem.parents(".fr-popup, .fr-toolbar").data("instance").commands.exec(fn, scripts);
    }
    /**
     * @param {Object} key
     * @return {undefined}
     */
    function callback(key) {
      next(key);
    }
    /**
     * @param {Object} map
     * @return {undefined}
     */
    function toggle(map) {
      var value = map.parents(".fr-popup, .fr-toolbar").data("instance");
      if (0 !== map.parents(".fr-popup").length || (map.data("popup") || value.popups.hideAll()), value.popups.areVisible() && !value.popups.areVisible(value)) {
        /** @type {number} */
        var i = 0;
        for (;i < $.FE.INSTANCES.length;i++) {
          if ($.FE.INSTANCES[i] != value) {
            if ($.FE.INSTANCES[i].popups) {
              if ($.FE.INSTANCES[i].popups.areVisible()) {
                $.FE.INSTANCES[i].$el.find(".fr-marker").remove();
              }
            }
          }
        }
        value.popups.hideAll();
      }
      if (self.node.hasClass(map.get(0), "fr-dropdown")) {
        init(map);
      } else {
        callback(map);
        if ($.FE.COMMANDS[map.data("cmd")]) {
          if (false !== $.FE.COMMANDS[map.data("cmd")].refreshAfterCallback) {
            value.button.bulkRefresh();
          }
        }
      }
    }
    /**
     * @param {Event} event
     * @return {undefined}
     */
    function fix(event) {
      toggle($(event.currentTarget));
    }
    /**
     * @param {Object} container
     * @return {undefined}
     */
    function activate(container) {
      var $active = container.find(".fr-dropdown.fr-active");
      if ($active.length) {
        $active.removeClass("fr-active").attr("aria-expanded", false).next().attr("aria-hidden", true);
        $active.parent(".fr-toolbar:not(.fr-inline)").css("zIndex", "");
      }
    }
    /**
     * @param {?} evt
     * @return {undefined}
     */
    function stopEvent(evt) {
      evt.preventDefault();
      evt.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    function killEvent(event) {
      if (event.stopPropagation(), !self.helpers.isMobile()) {
        return false;
      }
    }
    /**
     * @param {Object} root
     * @param {boolean} context
     * @return {undefined}
     */
    function replace(root, context) {
      self.events.bindClick(root, ".fr-command:not(.fr-disabled)", fix);
      self.events.$on(root, self._mousedown + " " + self._mouseup + " " + self._move, ".fr-dropdown-menu", stopEvent, true);
      self.events.$on(root, self._mousedown + " " + self._mouseup + " " + self._move, ".fr-dropdown-menu .fr-dropdown-wrapper", killEvent, true);
      var doc = root.get(0).ownerDocument;
      var statsTemplate = "defaultView" in doc ? doc.defaultView : doc.parentWindow;
      /**
       * @param {Event} e
       * @return {undefined}
       */
      var init = function(e) {
        if (!e || (e.type == self._mouseup && e.target != $("html").get(0) || "keydown" == e.type && (self.keys.isCharacter(e.which) && !self.keys.ctrlKey(e) || e.which == $.FE.KEYCODE.ESC))) {
          activate(root);
        }
      };
      self.events.$on($(statsTemplate), self._mouseup + " resize keydown", init, true);
      if (self.opts.iframe) {
        self.events.$on(self.$win, self._mouseup, init, true);
      }
      if (self.node.hasClass(root.get(0), "fr-popup")) {
        $.merge(items, root.find(".fr-btn").toArray());
      } else {
        $.merge(item, root.find(".fr-btn").toArray());
      }
      self.tooltip.bind(root, ".fr-btn, .fr-title", context);
    }
    /**
     * @param {string} event
     * @param {Object} node
     * @return {?}
     */
    function select(event, node) {
      /** @type {string} */
      var text = "";
      if (node.html) {
        if ("function" == typeof node.html) {
          text += node.html.call(self);
        } else {
          text += node.html;
        }
      } else {
        var options = node.options;
        if ("function" == typeof options) {
          options = options();
        }
        text += '<ul class="fr-dropdown-list" role="presentation">';
        var key;
        for (key in options) {
          if (options.hasOwnProperty(key)) {
            var delimiters = self.shortcuts.get(event + "." + key);
            /** @type {string} */
            delimiters = delimiters ? '<span class="fr-shortcut">' + delimiters + "</span>" : "";
            text += '<li role="presentation"><a class="fr-command" tabIndex="-1" role="option" data-cmd="' + event + '" data-param1="' + key + '" title="' + options[key] + '">' + self.language.translate(options[key]) + "</a></li>";
          }
        }
        text += "</ul>";
      }
      return text;
    }
    /**
     * @param {string} i
     * @param {Object} scope
     * @param {boolean} value
     * @return {?}
     */
    function postLink(i, scope, value) {
      if (self.helpers.isMobile() && false === scope.showOnMobile) {
        return "";
      }
      var a = scope.displaySelection;
      if ("function" == typeof a) {
        a = a(self);
      }
      var f;
      if (a) {
        var title = "function" == typeof scope.defaultSelection ? scope.defaultSelection(self) : scope.defaultSelection;
        /** @type {string} */
        f = '<span style="width:' + (scope.displaySelectionWidth || 100) + 'px">' + self.language.translate(title || scope.title) + "</span>";
      } else {
        f = self.icon.create(scope.icon || i);
        f += '<span class="fr-sr-only">' + (self.language.translate(scope.title) || "") + "</span>";
      }
      /** @type {string} */
      var s = scope.popup ? ' data-popup="true"' : "";
      /** @type {string} */
      var inner = scope.modal ? ' data-modal="true"' : "";
      var delimiters = self.shortcuts.get(i + ".");
      /** @type {string} */
      delimiters = delimiters ? " (" + delimiters + ")" : "";
      /** @type {string} */
      var cosAngle = i + "-" + self.id;
      /** @type {string} */
      var r11 = "dropdown-menu-" + cosAngle;
      /** @type {string} */
      var backlog = '<button id="' + cosAngle + '"type="button" tabIndex="-1" role="button"' + (scope.toggle ? ' aria-pressed="false"' : "") + ("dropdown" == scope.type ? ' aria-controls="' + r11 + '" aria-expanded="false" aria-haspopup="true"' : "") + (scope.disabled ? ' aria-disabled="true"' : "") + ' title="' + (self.language.translate(scope.title) || "") + delimiters + '" class="fr-command fr-btn' + ("dropdown" == scope.type ? " fr-dropdown" : "") + " fr-btn-" + self.icon.getTemplate(scope.icon) +
      (scope.displaySelection ? " fr-selection" : "") + (scope.back ? " fr-back" : "") + (scope.disabled ? " fr-disabled" : "") + (value ? "" : " fr-hidden") + '" data-cmd="' + i + '"' + s + inner + ">" + f + "</button>";
      if ("dropdown" == scope.type) {
        /** @type {string} */
        var buffer = '<div id="' + r11 + '" class="fr-dropdown-menu" role="listbox" aria-labelledby="' + cosAngle + '" aria-hidden="true"><div class="fr-dropdown-wrapper" role="presentation"><div class="fr-dropdown-content" role="presentation">';
        buffer += select(i, scope);
        buffer += "</div></div></div>";
        backlog += buffer;
      }
      return backlog;
    }
    /**
     * @param {Array} obj
     * @param {string} fullName
     * @return {?}
     */
    function parseName(obj, fullName) {
      /** @type {string} */
      var rows = "";
      /** @type {number} */
      var i = 0;
      for (;i < obj.length;i++) {
        var action = obj[i];
        var row = $.FE.COMMANDS[action];
        if (!(row && (void 0 !== row.plugin && self.opts.pluginsEnabled.indexOf(row.plugin) < 0))) {
          if (row) {
            /** @type {boolean} */
            var udataCur = void 0 === fullName || fullName.indexOf(action) >= 0;
            rows += postLink(action, row, udataCur);
          } else {
            if ("|" == action) {
              rows += '<div class="fr-separator fr-vs" role="separator" aria-orientation="vertical"></div>';
            } else {
              if ("-" == action) {
                rows += '<div class="fr-separator fr-hs" role="separator" aria-orientation="horizontal"></div>';
              }
            }
          }
        }
      }
      return rows;
    }
    /**
     * @param {Object} context
     * @return {undefined}
     */
    function handler(context) {
      var url;
      var suiteView = context.parents(".fr-popup, .fr-toolbar").data("instance") || self;
      var i = context.data("cmd");
      if (self.node.hasClass(context.get(0), "fr-dropdown")) {
        url = context.next();
      } else {
        context.removeClass("fr-active");
        if (context.attr("aria-pressed")) {
          context.attr("aria-pressed", false);
        }
      }
      if ($.FE.COMMANDS[i] && $.FE.COMMANDS[i].refresh) {
        $.FE.COMMANDS[i].refresh.apply(suiteView, [context, url]);
      } else {
        if (self.refresh[i]) {
          suiteView.refresh[i](context, url);
        }
      }
    }
    /**
     * @param {Array} objects
     * @return {?}
     */
    function render(objects) {
      var options = self.$tb ? self.$tb.data("instance") || self : self;
      if (false === self.events.trigger("buttons.refresh")) {
        return true;
      }
      setTimeout(function() {
        var e = options.selection.inEditor() && options.core.hasFocus();
        /** @type {number} */
        var i = 0;
        for (;i < objects.length;i++) {
          var obj = $(objects[i]);
          var request = obj.data("cmd");
          if (0 === obj.parents(".fr-popup").length) {
            if (e || $.FE.COMMANDS[request] && $.FE.COMMANDS[request].forcedRefresh) {
              options.button.refresh(obj);
            } else {
              if (!self.node.hasClass(obj.get(0), "fr-dropdown")) {
                obj.removeClass("fr-active");
                if (obj.attr("aria-pressed")) {
                  obj.attr("aria-pressed", false);
                }
              }
            }
          } else {
            if (obj.parents(".fr-popup").is(":visible")) {
              options.button.refresh(obj);
            }
          }
        }
      }, 0);
    }
    /**
     * @return {undefined}
     */
    function application() {
      render(item);
      render(items);
    }
    /**
     * @return {undefined}
     */
    function uncaught() {
      /** @type {Array} */
      item = [];
      /** @type {Array} */
      items = [];
    }
    /**
     * @return {undefined}
     */
    function onResize() {
      clearTimeout(tref);
      /** @type {number} */
      tref = setTimeout(application, 50);
    }
    /**
     * @return {undefined}
     */
    function constructor() {
      if (self.opts.toolbarInline) {
        self.events.on("toolbar.show", application);
      } else {
        self.events.on("mouseup", onResize);
        self.events.on("keyup", onResize);
        self.events.on("blur", onResize);
        self.events.on("focus", onResize);
        self.events.on("contentChanged", onResize);
        if (self.helpers.isMobile()) {
          self.events.$on(self.$doc, "selectionchange", application);
        }
      }
      self.events.on("shared.destroy", uncaught);
    }
    /** @type {Array} */
    var item = [];
    if (self.opts.toolbarInline || self.opts.toolbarContainer) {
      if (!self.shared.buttons) {
        /** @type {Array} */
        self.shared.buttons = [];
      }
      item = self.shared.buttons;
    }
    /** @type {Array} */
    var items = [];
    if (!self.shared.popup_buttons) {
      /** @type {Array} */
      self.shared.popup_buttons = [];
    }
    items = self.shared.popup_buttons;
    /** @type {null} */
    var tref = null;
    return{
      /** @type {function (): undefined} */
      _init : constructor,
      /** @type {function (Array, string): ?} */
      buildList : parseName,
      /** @type {function (Object, boolean): undefined} */
      bindCommands : replace,
      /** @type {function (Object): undefined} */
      refresh : handler,
      /** @type {function (): undefined} */
      bulkRefresh : application,
      /** @type {function (Object): undefined} */
      exec : next,
      /** @type {function (Object): undefined} */
      click : toggle,
      /** @type {function (Object): undefined} */
      hideActiveDropdowns : activate,
      /** @type {function (string, boolean): ?} */
      getButtons : remove
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.modals = function(self) {
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @return {?}
     */
    function eatExpressions(mayParseLabeledStatementInstead) {
      return special[mayParseLabeledStatementInstead];
    }
    /**
     * @param {string} ctxt
     * @param {string} namespace
     * @return {?}
     */
    function render(ctxt, namespace) {
      /** @type {string} */
      var statsTemplate = '<div tabIndex="-1" class="fr-modal' + (self.opts.theme ? " " + self.opts.theme + "-theme" : "") + '"><div class="fr-modal-wrapper">';
      return statsTemplate += '<div class="fr-modal-head">' + ctxt + '<i title="' + self.language.translate("Cancel") + '" class="fa fa-times fr-modal-close"></i></div>', statsTemplate += '<div tabIndex="-1" class="fr-modal-body">' + namespace + "</div>", statsTemplate += "</div></div>", $(statsTemplate);
    }
    /**
     * @param {string} type
     * @param {string} data
     * @param {string} options
     * @return {?}
     */
    function init(type, data, options) {
      if (self.shared.$overlay || (self.shared.$overlay = $('<div class="fr-overlay">').appendTo("body:first")), clone = self.shared.$overlay, self.opts.theme && clone.addClass(self.opts.theme + "-theme"), !special[type]) {
        var e = render(data, options);
        special[type] = {
          $modal : e,
          $head : e.find(".fr-modal-head"),
          $body : e.find(".fr-modal-body")
        };
        if (!self.helpers.isMobile()) {
          e.addClass("fr-desktop");
        }
        e.appendTo("body:first");
        self.events.bindClick(e, "i.fr-modal-close", function() {
          hide(type);
        });
        special[type].$body.css("margin-top", special[type].$head.outerHeight());
        self.events.$on(e, "keydown", function(event) {
          var key = event.which;
          return key == $.FE.KEYCODE.ESC ? (hide(type), self.accessibility.focusModalButton(e), false) : !(!$(event.currentTarget).is("input[type=text], textarea") && (key != $.FE.KEYCODE.ARROW_UP && (key != $.FE.KEYCODE.ARROW_DOWN && !self.keys.isBrowserAction(event)))) || (event.preventDefault(), event.stopPropagation(), false);
        }, true);
        hide(type, true);
      }
      return special[type];
    }
    /**
     * @return {undefined}
     */
    function onSuccess() {
      var i;
      for (i in special) {
        var instance = special[i];
        if (instance) {
          if (instance.$modal) {
            instance.$modal.removeData().remove();
          }
        }
      }
      if (clone) {
        clone.removeData().remove();
      }
      special = {};
    }
    /**
     * @param {string} type
     * @return {undefined}
     */
    function handler(type) {
      if (special[type]) {
        var instance = special[type].$modal;
        instance.data("instance", self);
        instance.show();
        clone.show();
        $(self.o_doc).find("body:first").addClass("prevent-scroll");
        if (self.helpers.isMobile()) {
          $(self.o_doc).find("body:first").addClass("fr-mobile");
        }
        instance.addClass("fr-active");
        self.accessibility.focusModal(instance);
      }
    }
    /**
     * @param {string} type
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    function hide(type, dataAndEvents) {
      if (special[type]) {
        var that = special[type].$modal;
        var scope = that.data("instance") || self;
        scope.events.enableBlur();
        that.hide();
        clone.hide();
        $(scope.o_doc).find("body:first").removeClass("prevent-scroll fr-mobile");
        that.removeClass("fr-active");
        if (!dataAndEvents) {
          self.accessibility.restoreSelection(scope);
          self.events.trigger("modals.hide");
        }
      }
    }
    /**
     * @param {?} type
     * @return {undefined}
     */
    function resize(type) {
      if (special[type]) {
        var options = special[type];
        var rule = options.$modal;
        var map = options.$body;
        var prevDays = $(self.o_win).height();
        var child = rule.find(".fr-modal-wrapper");
        var begin = child.outerHeight(true);
        /** @type {number} */
        var j = child.height() - (map.outerHeight(true) - map.height());
        /** @type {number} */
        var temp = prevDays - begin + j;
        var max = map.get(0).scrollHeight;
        /** @type {string} */
        var height = "auto";
        if (max > temp) {
          /** @type {number} */
          height = temp;
        }
        map.height(height);
      }
    }
    /**
     * @param {Object} type
     * @return {?}
     */
    function Event(type) {
      var root;
      if ("string" == typeof type) {
        if (!special[type]) {
          return;
        }
        root = special[type].$modal;
      } else {
        /** @type {Object} */
        root = type;
      }
      return root && (self.node.hasClass(root, "fr-active") && self.core.sameInstance(root)) || false;
    }
    /**
     * @param {number} value
     * @return {?}
     */
    function add(value) {
      var type;
      for (type in special) {
        if (special.hasOwnProperty(type) && (Event(type) && (void 0 === value || special[type].$modal.data("instance") == value))) {
          return special[type].$modal;
        }
      }
      return false;
    }
    /**
     * @return {undefined}
     */
    function execute() {
      self.events.on("shared.destroy", onSuccess, true);
    }
    if (!self.shared.modals) {
      self.shared.modals = {};
    }
    var clone;
    var special = self.shared.modals;
    return{
      /** @type {function (): undefined} */
      _init : execute,
      /** @type {function (number): ?} */
      get : eatExpressions,
      /** @type {function (string, string, string): ?} */
      create : init,
      /** @type {function (string): undefined} */
      show : handler,
      /** @type {function (string, boolean): undefined} */
      hide : hide,
      /** @type {function (?): undefined} */
      resize : resize,
      /** @type {function (Object): ?} */
      isVisible : Event,
      /** @type {function (number): ?} */
      areVisible : add
    };
  };
  $.FE.POPUP_TEMPLATES = {
    "text.edit" : "[_EDIT_]"
  };
  /**
   * @param {?} i
   * @param {?} offsetPosition
   * @return {undefined}
   */
  $.FE.RegisterTemplate = function(i, offsetPosition) {
    $.FE.POPUP_TEMPLATES[i] = offsetPosition;
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.popups = function(self) {
    /**
     * @param {string} i
     * @param {Object} container
     * @return {undefined}
     */
    function show(i, container) {
      if (!container.is(":visible")) {
        container = self.$sc;
      }
      if (!container.is(nodes[i].data("container"))) {
        nodes[i].data("container", container);
        container.append(nodes[i]);
      }
    }
    /**
     * @param {string} key
     * @param {?} x
     * @param {?} y
     * @param {number} allBindingsAccessor
     * @return {?}
     */
    function init(key, x, y, allBindingsAccessor) {
      if (remove(key) || (clear() && self.$el.find(".fr-marker").length > 0 ? (self.events.disableBlur(), self.selection.restore()) : (self.events.disableBlur(), self.events.focus(), self.events.enableBlur())), reset([key]), !nodes[key]) {
        return false;
      }
      var header = self.button.getButtons(".fr-dropdown.fr-active");
      header.removeClass("fr-active").attr("aria-expanded", false).parent(".fr-toolbar").css("zIndex", "");
      header.next().attr("aria-hidden", true);
      nodes[key].data("instance", self);
      if (self.$tb) {
        self.$tb.data("instance", self);
      }
      var _barWidth = nodes[key].outerWidth();
      var camelKey = remove(key);
      nodes[key].addClass("fr-active").removeClass("fr-hidden").find("input, textarea").removeAttr("disabled");
      var el = nodes[key].data("container");
      if (self.opts.toolbarInline) {
        if (el) {
          if (self.$tb) {
            if (el.get(0) == self.$tb.get(0)) {
              show(key, self.$sc);
              /** @type {number} */
              y = self.$tb.offset().top - self.helpers.getPX(self.$tb.css("margin-top"));
              x = self.$tb.offset().left + self.$tb.outerWidth() / 2 + (parseFloat(self.$tb.find(".fr-arrow").css("margin-left")) || 0) + self.$tb.find(".fr-arrow").outerWidth() / 2;
              if (self.node.hasClass(self.$tb.get(0), "fr-above")) {
                if (y) {
                  y += self.$tb.outerHeight();
                }
              }
              /** @type {number} */
              allBindingsAccessor = 0;
            }
          }
        }
      }
      el = nodes[key].data("container");
      if (!!self.opts.iframe) {
        if (!allBindingsAccessor) {
          if (!camelKey) {
            if (x) {
              x -= self.$iframe.offset().left;
            }
            if (y) {
              y -= self.$iframe.offset().top;
            }
          }
        }
      }
      if (el.is(self.$tb)) {
        self.$tb.css("zIndex", (self.opts.zIndex || 1) + 4);
      } else {
        nodes[key].css("zIndex", (self.opts.zIndex || 1) + 4);
      }
      if (x) {
        x -= _barWidth / 2;
      }
      if (self.opts.toolbarBottom) {
        if (el) {
          if (self.$tb) {
            if (el.get(0) == self.$tb.get(0)) {
              nodes[key].addClass("fr-above");
              if (y) {
                y -= nodes[key].outerHeight();
              }
            }
          }
        }
      }
      nodes[key].removeClass("fr-active");
      self.position.at(x, y, nodes[key], allBindingsAccessor || 0);
      nodes[key].addClass("fr-active");
      if (!camelKey) {
        self.accessibility.focusPopup(nodes[key]);
      }
      if (self.opts.toolbarInline) {
        self.toolbar.hide();
      }
      self.events.trigger("popups.show." + key);
      attr(key)._repositionPopup();
      resolve();
    }
    /**
     * @param {number} type
     * @param {Function} sender
     * @return {undefined}
     */
    function execute(type, sender) {
      self.events.on("popups.show." + type, sender);
    }
    /**
     * @param {string} keepData
     * @return {?}
     */
    function remove(keepData) {
      return nodes[keepData] && (self.node.hasClass(nodes[keepData], "fr-active") && self.core.sameInstance(nodes[keepData])) || false;
    }
    /**
     * @param {number} obj
     * @return {?}
     */
    function clear(obj) {
      var key;
      for (key in nodes) {
        if (nodes.hasOwnProperty(key) && (remove(key) && (void 0 === obj || nodes[key].data("instance") == obj))) {
          return nodes[key];
        }
      }
      return false;
    }
    /**
     * @param {string} name
     * @return {undefined}
     */
    function handler(name) {
      /** @type {null} */
      var $element = null;
      if ($element = "string" != typeof name ? name : nodes[name]) {
        if (self.node.hasClass($element, "fr-active")) {
          $element.removeClass("fr-active fr-above");
          self.events.trigger("popups.hide." + name);
          if (self.$tb) {
            if (self.opts.zIndex > 1) {
              self.$tb.css("zIndex", self.opts.zIndex + 1);
            } else {
              self.$tb.css("zIndex", "");
            }
          }
          self.events.disableBlur();
          $element.find("input, textarea, button").filter(":focus").blur();
          $element.find("input, textarea").attr("disabled", "disabled");
        }
      }
    }
    /**
     * @param {number} attr
     * @param {Function} fn
     * @return {undefined}
     */
    function attach(attr, fn) {
      self.events.on("popups.hide." + attr, fn);
    }
    /**
     * @param {number} mayParseLabeledStatementInstead
     * @return {?}
     */
    function parse(mayParseLabeledStatementInstead) {
      var rootNode = nodes[mayParseLabeledStatementInstead];
      if (rootNode && !rootNode.data("inst" + self.id)) {
        destroy(attr(mayParseLabeledStatementInstead), mayParseLabeledStatementInstead);
      }
      return rootNode;
    }
    /**
     * @param {string} event
     * @param {Function} one
     * @return {undefined}
     */
    function on(event, one) {
      self.events.on("popups.refresh." + event, one);
    }
    /**
     * @param {string} event
     * @return {undefined}
     */
    function onclick(event) {
      nodes[event].data("instance", self);
      self.events.trigger("popups.refresh." + event);
      var codeSegments = nodes[event].find(".fr-command");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var obj = $(codeSegments[i]);
        if (0 === obj.parents(".fr-dropdown-menu").length) {
          self.button.refresh(obj);
        }
      }
    }
    /**
     * @param {Array} evt
     * @return {undefined}
     */
    function reset(evt) {
      if (void 0 === evt) {
        /** @type {Array} */
        evt = [];
      }
      var key;
      for (key in nodes) {
        if (nodes.hasOwnProperty(key)) {
          if (evt.indexOf(key) < 0) {
            handler(key);
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function one() {
      /** @type {boolean} */
      self.shared.exit_flag = true;
    }
    /**
     * @return {undefined}
     */
    function resolve() {
      /** @type {boolean} */
      self.shared.exit_flag = false;
    }
    /**
     * @return {?}
     */
    function constructor() {
      return self.shared.exit_flag;
    }
    /**
     * @param {Object} path
     * @param {Object} context
     * @return {?}
     */
    function validate(path, context) {
      var fn = $.FE.POPUP_TEMPLATES[path];
      if ("function" == typeof fn) {
        fn = fn.apply(self);
      }
      var key;
      for (key in context) {
        if (context.hasOwnProperty(key)) {
          fn = fn.replace("[_" + key.toUpperCase() + "_]", context[key]);
        }
      }
      return fn;
    }
    /**
     * @param {Object} path
     * @param {?} expression
     * @return {?}
     */
    function initialize(path, expression) {
      var result = validate(path, expression);
      var root = $('<div class="fr-popup' + (self.helpers.isMobile() ? " fr-mobile" : " fr-desktop") + (self.opts.toolbarInline ? " fr-inline" : "") + '"><span class="fr-arrow"></span>' + result + "</div>");
      if (self.opts.theme) {
        root.addClass(self.opts.theme + "-theme");
      }
      if (self.opts.zIndex > 1) {
        self.$tb.css("z-index", self.opts.zIndex + 2);
      }
      if ("auto" != self.opts.direction) {
        root.removeClass("fr-ltr fr-rtl").addClass("fr-" + self.opts.direction);
      }
      root.find("input, textarea").attr("dir", self.opts.direction).attr("disabled", "disabled");
      var ui = $("body:first");
      return ui.append(root), root.data("container", ui), nodes[path] = root, self.button.bindCommands(root, false), root;
    }
    /**
     * @param {Object} name
     * @return {?}
     */
    function attr(name) {
      var node = nodes[name];
      return{
        /**
         * @return {undefined}
         */
        _windowResize : function() {
          var obj = node.data("instance") || self;
          if (!obj.helpers.isMobile()) {
            if (node.is(":visible")) {
              obj.events.disableBlur();
              obj.popups.hide(name);
              obj.events.enableBlur();
            }
          }
        },
        /**
         * @param {Event} event
         * @return {undefined}
         */
        _inputFocus : function(event) {
          var obj = node.data("instance") || self;
          var $el = $(event.currentTarget);
          if ($el.is("input:file") && $el.closest(".fr-layer").addClass("fr-input-focus"), event.preventDefault(), event.stopPropagation(), setTimeout(function() {
            obj.events.enableBlur();
          }, 100), obj.helpers.isMobile()) {
            var oldScrollTop = $(obj.o_win).scrollTop();
            setTimeout(function() {
              $(obj.o_win).scrollTop(oldScrollTop);
            }, 0);
          }
        },
        /**
         * @param {Event} ev
         * @return {undefined}
         */
        _inputBlur : function(ev) {
          var scope = node.data("instance") || self;
          var $el = $(ev.currentTarget);
          if ($el.is("input:file")) {
            $el.closest(".fr-layer").removeClass("fr-input-focus");
          }
          if (document.activeElement != this) {
            if ($(this).is(":visible")) {
              if (scope.events.blurActive()) {
                scope.events.trigger("blur");
              }
              scope.events.enableBlur();
            }
          }
        },
        /**
         * @param {Event} e
         * @return {undefined}
         */
        _editorKeydown : function(e) {
          var evt = node.data("instance") || self;
          if (!evt.keys.ctrlKey(e)) {
            if (!(e.which == $.FE.KEYCODE.ALT)) {
              if (!(e.which == $.FE.KEYCODE.ESC)) {
                if (remove(name) && node.find(".fr-back:visible").length) {
                  evt.button.exec(node.find(".fr-back:visible:first"));
                } else {
                  if (e.which != $.FE.KEYCODE.ALT) {
                    evt.popups.hide(name);
                  }
                }
              }
            }
          }
        },
        /**
         * @param {Event} e
         * @return {?}
         */
        _preventFocus : function(e) {
          var pdataOld = node.data("instance") || self;
          var el = e.originalEvent ? e.originalEvent.target || e.originalEvent.originalTarget : null;
          if (!("mouseup" == e.type)) {
            if (!$(el).is(":focus")) {
              pdataOld.events.disableBlur();
            }
          }
          if (!("mouseup" != e.type)) {
            if (!$(el).hasClass("fr-command")) {
              if (!($(el).parents(".fr-command").length > 0)) {
                self.button.hideActiveDropdowns(node);
              }
            }
          }
          if (self.browser.safari || self.browser.mozilla) {
            if ("mousedown" == e.type) {
              if ($(el).is("input[type=file]")) {
                pdataOld.events.disableBlur();
              }
            }
          }
          /** @type {string} */
          var filter = "input, textarea, button, select, label, .fr-command";
          if (el && (!$(el).is(filter) && 0 === $(el).parents(filter).length)) {
            return e.stopPropagation(), false;
          }
          if (el) {
            if ($(el).is(filter)) {
              e.stopPropagation();
            }
          }
          resolve();
        },
        /**
         * @return {undefined}
         */
        _editorMouseup : function() {
          if (node.is(":visible")) {
            if (constructor()) {
              if (node.find("input:focus, textarea:focus, button:focus, select:focus").filter(":visible").length > 0) {
                self.events.disableBlur();
              }
            }
          }
        },
        /**
         * @param {?} event
         * @return {?}
         */
        _windowMouseup : function(event) {
          if (!self.core.sameInstance(node)) {
            return true;
          }
          var scope = node.data("instance") || self;
          if (node.is(":visible")) {
            if (constructor()) {
              event.stopPropagation();
              scope.markers.remove();
              scope.popups.hide(name);
              resolve();
            }
          }
        },
        /**
         * @param {Event} e
         * @return {?}
         */
        _windowKeydown : function(e) {
          if (!self.core.sameInstance(node)) {
            return true;
          }
          var that = node.data("instance") || self;
          var key = e.which;
          if ($.FE.KEYCODE.ESC == key) {
            if (that.popups.isVisible(name) && that.opts.toolbarInline) {
              return e.stopPropagation(), that.popups.isVisible(name) && (node.find(".fr-back:visible").length ? (that.button.exec(node.find(".fr-back:visible:first")), that.accessibility.focusPopupButton(node)) : node.find(".fr-dismiss:visible").length ? that.button.exec(node.find(".fr-dismiss:visible:first")) : (that.popups.hide(name), that.toolbar.showInline(null, true), that.accessibility.FocusPopupButton(node))), false;
            }
            if (that.popups.isVisible(name)) {
              return node.find(".fr-back:visible").length ? (that.button.exec(node.find(".fr-back:visible:first")), that.accessibility.focusPopupButton(node)) : node.find(".fr-dismiss:visible").length ? that.button.exec(node.find(".fr-dismiss:visible:first")) : (that.popups.hide(name), that.accessibility.focusPopupButton(node)), false;
            }
          }
        },
        /**
         * @return {undefined}
         */
        _doPlaceholder : function() {
          if (0 === $(this).next().length) {
            if ($(this).attr("placeholder")) {
              $(this).after('<label for="' + $(this).attr("id") + '">' + $(this).attr("placeholder") + "</label>");
            }
          }
          $(this).toggleClass("fr-not-empty", "" !== $(this).val());
        },
        /**
         * @return {?}
         */
        _repositionPopup : function() {
          if (!self.opts.height && !self.opts.heightMax || self.opts.toolbarInline) {
            return true;
          }
          if (self.$wp && (remove(name) && node.parent().get(0) == self.$sc.get(0))) {
            /** @type {number} */
            var weeks = node.offset().top - self.$wp.offset().top;
            var max = self.$wp.outerHeight();
            if (self.node.hasClass(node.get(0), "fr-above")) {
              weeks += node.outerHeight();
            }
            if (weeks > max || weeks < 0) {
              node.addClass("fr-hidden");
            } else {
              node.removeClass("fr-hidden");
            }
          }
        }
      };
    }
    /**
     * @param {?} options
     * @param {number} name
     * @return {undefined}
     */
    function destroy(options, name) {
      self.events.on("mouseup", options._editorMouseup, true);
      if (self.$wp) {
        self.events.on("keydown", options._editorKeydown);
      }
      self.events.on("blur", function() {
        if (clear()) {
          self.markers.remove();
        }
        reset();
      });
      if (self.$wp) {
        if (!self.helpers.isMobile()) {
          self.events.$on(self.$wp, "scroll.popup" + name, options._repositionPopup);
        }
      }
      self.events.on("window.mouseup", options._windowMouseup, true);
      self.events.on("window.keydown", options._windowKeydown, true);
      nodes[name].data("inst" + self.id, true);
      self.events.on("destroy", function() {
        if (self.core.sameInstance(nodes[name])) {
          nodes[name].removeClass("fr-active").appendTo("body:first");
        }
      }, true);
    }
    /**
     * @param {Window} node
     * @param {?} data
     * @return {?}
     */
    function render(node, data) {
      var n = initialize(node, data);
      var tag = attr(node);
      return destroy(tag, node), self.events.$on(n, "mousedown mouseup touchstart touchend touch", "*", tag._preventFocus, true), self.events.$on(n, "focus", "input, textarea, button, select", tag._inputFocus, true), self.events.$on(n, "blur", "input, textarea, button, select", tag._inputBlur, true), self.accessibility.registerPopup(node), self.events.$on(n, "keydown keyup change input", "input, textarea", tag._doPlaceholder, true), self.helpers.isIOS() && self.events.$on(n, "touchend", "label",
      function() {
        $("#" + $(this).attr("for")).prop("checked", function(dataAndEvents, deepDataAndEvents) {
          return!deepDataAndEvents;
        });
      }, true), self.events.$on($(self.o_win), "resize", tag._windowResize, true), n;
    }
    /**
     * @return {undefined}
     */
    function onSuccess() {
      var nodeId;
      for (nodeId in nodes) {
        if (nodes.hasOwnProperty(nodeId)) {
          var node = nodes[nodeId];
          if (node) {
            node.html("").removeData().remove();
            /** @type {null} */
            nodes[nodeId] = null;
          }
        }
      }
      /** @type {Array} */
      nodes = [];
    }
    /**
     * @return {undefined}
     */
    function setup() {
      self.events.on("shared.destroy", onSuccess, true);
      self.events.on("window.mousedown", one);
      self.events.on("window.touchmove", resolve);
      self.events.on("mousedown", function(event) {
        if (clear()) {
          event.stopPropagation();
          self.$el.find(".fr-marker").remove();
          one();
          self.events.disableBlur();
        }
      });
    }
    if (!self.shared.popups) {
      self.shared.popups = {};
    }
    var nodes = self.shared.popups;
    return self.shared.exit_flag = false, {
      /** @type {function (): undefined} */
      _init : setup,
      /** @type {function (Window, ?): ?} */
      create : render,
      /** @type {function (number): ?} */
      get : parse,
      /** @type {function (string, ?, ?, number): ?} */
      show : init,
      /** @type {function (string): undefined} */
      hide : handler,
      /** @type {function (number, Function): undefined} */
      onHide : attach,
      /** @type {function (Array): undefined} */
      hideAll : reset,
      /** @type {function (string, Object): undefined} */
      setContainer : show,
      /** @type {function (string): undefined} */
      refresh : onclick,
      /** @type {function (string, Function): undefined} */
      onRefresh : on,
      /** @type {function (number, Function): undefined} */
      onShow : execute,
      /** @type {function (string): ?} */
      isVisible : remove,
      /** @type {function (number): ?} */
      areVisible : clear
    };
  };
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.position = function(self) {
    /**
     * @return {?}
     */
    function start() {
      var range = self.selection.ranges(0);
      var me = range.getBoundingClientRect();
      if (0 === me.top && (0 === me.left && 0 === me.width) || 0 === me.height) {
        /** @type {boolean} */
        var d = false;
        if (0 === self.$el.find(".fr-marker").length) {
          self.selection.save();
          /** @type {boolean} */
          d = true;
        }
        var item = self.$el.find(".fr-marker:first");
        item.css("display", "inline");
        item.css("line-height", "");
        var offset = item.offset();
        var r = item.outerHeight();
        item.css("display", "none");
        item.css("line-height", 0);
        me = {};
        me.left = offset.left;
        /** @type {number} */
        me.width = 0;
        me.height = r;
        /** @type {number} */
        me.top = offset.top - (self.helpers.isMobile() && !self.helpers.isIOS() ? 0 : self.helpers.scrollTop());
        /** @type {number} */
        me.right = 1;
        /** @type {number} */
        me.bottom = 1;
        /** @type {boolean} */
        me.ok = true;
        if (d) {
          self.selection.restore();
        }
      }
      return me;
    }
    /**
     * @param {Object} element
     * @param {number} r
     * @param {number} deepDataAndEvents
     * @return {?}
     */
    function move(element, r, deepDataAndEvents) {
      var g = element.outerHeight(true);
      if (!self.helpers.isMobile() && (self.$tb && element.parent().get(0) != self.$tb.get(0))) {
        var y1 = element.parent().offset().top;
        /** @type {number} */
        var e = r - g - (deepDataAndEvents || 0);
        if (element.parent().get(0) == self.$sc.get(0)) {
          y1 -= element.parent().position().top;
        }
        var toolbarHeight = self.$sc.get(0).clientHeight;
        if (y1 + r + g > self.$sc.offset().top + toolbarHeight && (element.parent().offset().top + e > 0 && e > 0)) {
          /** @type {number} */
          r = e;
          element.addClass("fr-above");
        } else {
          element.removeClass("fr-above");
        }
      }
      return r;
    }
    /**
     * @param {Object} slide
     * @param {number} _
     * @return {?}
     */
    function callback(slide, _) {
      var left = slide.outerWidth(true);
      return _ + left > self.$sc.get(0).clientWidth - 10 && (_ = self.$sc.get(0).clientWidth - left - 10), _ < 0 && (_ = 10), _;
    }
    /**
     * @param {Object} root
     * @return {undefined}
     */
    function render(root) {
      var elementRect = start();
      root.css({
        top : 0,
        left : 0
      });
      var olda = elementRect.top + elementRect.height;
      var distY = elementRect.left + elementRect.width / 2 - root.get(0).offsetWidth / 2 + self.helpers.scrollLeft();
      if (!self.opts.iframe) {
        olda += self.helpers.scrollTop();
      }
      position(distY, olda, root, elementRect.height);
    }
    /**
     * @param {?} x
     * @param {?} y
     * @param {Object} element
     * @param {number} deepDataAndEvents
     * @return {undefined}
     */
    function position(x, y, element, deepDataAndEvents) {
      var p = element.data("container");
      if (!!p) {
        if (!("BODY" === p.get(0).tagName && "static" == p.css("position"))) {
          if (x) {
            x -= p.offset().left;
          }
          if (y) {
            y -= p.offset().top;
          }
          if ("BODY" != p.get(0).tagName) {
            if (x) {
              x += p.get(0).scrollLeft;
            }
            if (y) {
              y += p.get(0).scrollTop;
            }
          } else {
            if ("absolute" == p.css("position")) {
              if (x) {
                x += p.position().left;
              }
              if (y) {
                y += p.position().top;
              }
            }
          }
        }
      }
      if (self.opts.iframe) {
        if (p) {
          if (self.$tb) {
            if (p.get(0) != self.$tb.get(0)) {
              if (x) {
                x += self.$iframe.offset().left;
              }
              if (y) {
                y += self.$iframe.offset().top;
              }
            }
          }
        }
      }
      var current = callback(element, x);
      if (x) {
        element.css("left", current);
        var li = element.data("fr-arrow");
        if (!li) {
          li = element.find(".fr-arrow");
          element.data("fr-arrow", li);
        }
        if (!li.data("margin-left")) {
          li.data("margin-left", self.helpers.getPX(li.css("margin-left")));
        }
        li.css("margin-left", x - current + li.data("margin-left"));
      }
      if (y) {
        element.css("top", move(element, y, deepDataAndEvents));
      }
    }
    /**
     * @param {?} selector
     * @return {undefined}
     */
    function init(selector) {
      var elem = $(selector);
      var e = elem.is(".fr-sticky-on");
      var check = elem.data("sticky-top");
      var currentValue = elem.data("sticky-scheduled");
      if (void 0 === check) {
        elem.data("sticky-top", 0);
        var $plum = $('<div class="fr-sticky-dummy" style="height: ' + elem.outerHeight() + 'px;"></div>');
        self.$box.prepend($plum);
      } else {
        self.$box.find(".fr-sticky-dummy").css("height", elem.outerHeight());
      }
      if (self.core.hasFocus() || self.$tb.find("input:visible:focus").length > 0) {
        var parentHeight = self.helpers.scrollTop();
        /** @type {number} */
        var value = Math.min(Math.max(parentHeight - self.$tb.parent().offset().top, 0), self.$tb.parent().outerHeight() - elem.outerHeight());
        if (value != check) {
          if (value != currentValue) {
            clearTimeout(elem.data("sticky-timeout"));
            elem.data("sticky-scheduled", value);
            if (elem.outerHeight() < parentHeight - self.$tb.parent().offset().top) {
              elem.addClass("fr-opacity-0");
            }
            elem.data("sticky-timeout", setTimeout(function() {
              var parentHeight = self.helpers.scrollTop();
              /** @type {number} */
              var value = Math.min(Math.max(parentHeight - self.$tb.parent().offset().top, 0), self.$tb.parent().outerHeight() - elem.outerHeight());
              if (value > 0) {
                if ("BODY" == self.$tb.parent().get(0).tagName) {
                  value += self.$tb.parent().position().top;
                }
              }
              if (value != check) {
                elem.css("top", Math.max(value, 0));
                elem.data("sticky-top", value);
                elem.data("sticky-scheduled", value);
              }
              elem.removeClass("fr-opacity-0");
            }, 100));
          }
        }
        if (!e) {
          elem.css("top", "0");
          elem.width(self.$tb.parent().width());
          elem.addClass("fr-sticky-on");
          self.$box.addClass("fr-sticky-box");
        }
      } else {
        clearTimeout($(selector).css("sticky-timeout"));
        elem.css("top", "0");
        elem.css("position", "");
        elem.width("");
        elem.data("sticky-top", 0);
        elem.removeClass("fr-sticky-on");
        self.$box.removeClass("fr-sticky-box");
      }
    }
    /**
     * @param {HTMLElement} element
     * @return {undefined}
     */
    function update(element) {
      if (element.offsetWidth) {
        var px;
        var e;
        var $this = $(element);
        var c = $this.outerHeight();
        var position = $this.data("sticky-position");
        var g = $("body" == self.opts.scrollableContainer ? self.o_win : self.opts.scrollableContainer).outerHeight();
        /** @type {number} */
        var i = 0;
        /** @type {number} */
        var dist = 0;
        if ("body" !== self.opts.scrollableContainer) {
          i = self.$sc.offset().top;
          /** @type {number} */
          dist = $(self.o_win).outerHeight() - i - g;
        }
        var f = "body" == self.opts.scrollableContainer ? self.helpers.scrollTop() : i;
        var m = $this.is(".fr-sticky-on");
        if (!$this.data("sticky-parent")) {
          $this.data("sticky-parent", $this.parent());
        }
        var child = $this.data("sticky-parent");
        var a = child.offset().top;
        var b = child.outerHeight();
        if ($this.data("sticky-offset") ? self.$box.find(".fr-sticky-dummy").css("height", c + "px") : ($this.data("sticky-offset", true), $this.after('<div class="fr-sticky-dummy" style="height: ' + c + 'px;"></div>')), !position) {
          /** @type {boolean} */
          var q = "auto" !== $this.css("top") || "auto" !== $this.css("bottom");
          if (!q) {
            $this.css("position", "fixed");
          }
          position = {
            top : self.node.hasClass($this.get(0), "fr-top"),
            bottom : self.node.hasClass($this.get(0), "fr-bottom")
          };
          if (!q) {
            $this.css("position", "");
          }
          $this.data("sticky-position", position);
          $this.data("top", self.node.hasClass($this.get(0), "fr-top") ? $this.css("top") : "auto");
          $this.data("bottom", self.node.hasClass($this.get(0), "fr-bottom") ? $this.css("bottom") : "auto");
        }
        /**
         * @return {?}
         */
        var some = function() {
          return a < f + px && a + b - c >= f + px;
        };
        /**
         * @return {?}
         */
        var lerp = function() {
          return a + c < f + g - e && a + b > f + g - e;
        };
        px = self.helpers.getPX($this.data("top"));
        e = self.helpers.getPX($this.data("bottom"));
        var program = position.top && (some() && self.helpers.isInViewPort(self.$sc.get(0)));
        var inverse = position.bottom && lerp();
        if (program || inverse) {
          $this.css("width", child.get(0).getBoundingClientRect().width + "px");
          if (!m) {
            $this.addClass("fr-sticky-on");
            $this.removeClass("fr-sticky-off");
            if ($this.css("top")) {
              if ("auto" != $this.data("top")) {
                $this.css("top", self.helpers.getPX($this.data("top")) + i);
              } else {
                $this.data("top", "auto");
              }
            }
            if ($this.css("bottom")) {
              if ("auto" != $this.data("bottom")) {
                $this.css("bottom", self.helpers.getPX($this.data("bottom")) + dist);
              } else {
                $this.css("bottom", "auto");
              }
            }
          }
        } else {
          if (!self.node.hasClass($this.get(0), "fr-sticky-off")) {
            $this.width("");
            $this.removeClass("fr-sticky-on");
            $this.addClass("fr-sticky-off");
            if ($this.css("top")) {
              if ("auto" != $this.data("top")) {
                if (position.top) {
                  $this.css("top", 0);
                }
              }
            }
            if ($this.css("bottom")) {
              if ("auto" != $this.data("bottom")) {
                if (position.bottom) {
                  $this.css("bottom", 0);
                }
              }
            }
          }
        }
      }
    }
    /**
     * @return {?}
     */
    function getBrowser() {
      /** @type {Element} */
      var elem = document.createElement("test");
      /** @type {(CSSStyleDeclaration|null)} */
      var options = elem.style;
      return options.cssText = "position:" + ["-webkit-", "-moz-", "-ms-", "-o-", ""].join("sticky; position:") + " sticky;", -1 !== options.position.indexOf("sticky") && (!self.helpers.isIOS() && (!self.helpers.isAndroid() && !self.browser.chrome));
    }
    /**
     * @return {undefined}
     */
    function link() {
      if (!getBrowser()) {
        if (self._stickyElements = [], self.helpers.isIOS()) {
          /**
           * @return {undefined}
           */
          var resize = function() {
            self.helpers.requestAnimationFrame()(resize);
            /** @type {number} */
            var i = 0;
            for (;i < self._stickyElements.length;i++) {
              init(self._stickyElements[i]);
            }
          };
          resize();
          self.events.$on($(self.o_win), "scroll", function() {
            if (self.core.hasFocus()) {
              /** @type {number} */
              var i = 0;
              for (;i < self._stickyElements.length;i++) {
                var $target = $(self._stickyElements[i]);
                var pos0 = $target.parent();
                var documentHeight = self.helpers.scrollTop();
                if ($target.outerHeight() < documentHeight - pos0.offset().top) {
                  $target.addClass("fr-opacity-0");
                  $target.data("sticky-top", -1);
                  $target.data("sticky-scheduled", -1);
                }
              }
            }
          }, true);
        } else {
          if ("body" !== self.opts.scrollableContainer) {
            self.events.$on($(self.opts.scrollableContainer), "scroll", visit, true);
          }
          self.events.$on($(self.o_win), "scroll", visit, true);
          self.events.$on($(self.o_win), "resize", visit, true);
          self.events.on("initialized", visit);
          self.events.on("focus", visit);
          self.events.$on($(self.o_win), "resize", "textarea", visit, true);
        }
      }
      self.events.on("destroy", function() {
        /** @type {Array} */
        self._stickyElements = [];
      });
    }
    /**
     * @return {undefined}
     */
    function visit() {
      if (self._stickyElements) {
        /** @type {number} */
        var i = 0;
        for (;i < self._stickyElements.length;i++) {
          update(self._stickyElements[i]);
        }
      }
    }
    /**
     * @param {Node} ui
     * @return {undefined}
     */
    function stop(ui) {
      ui.addClass("fr-sticky");
      if (self.helpers.isIOS()) {
        ui.addClass("fr-sticky-ios");
      }
      if (!getBrowser()) {
        ui.removeClass("fr-sticky");
        self._stickyElements.push(ui.get(0));
      }
    }
    /**
     * @return {undefined}
     */
    function action() {
      link();
    }
    return{
      /** @type {function (): undefined} */
      _init : action,
      /** @type {function (Object): undefined} */
      forSelection : render,
      /** @type {function (Node): undefined} */
      addSticky : stop,
      /** @type {function (): undefined} */
      refresh : visit,
      /** @type {function (?, ?, Object, number): undefined} */
      at : position,
      /** @type {function (): ?} */
      getBoundingRect : start
    };
  };
  /**
   * @param {Object} options
   * @return {?}
   */
  $.FE.MODULES.refresh = function(options) {
    /**
     * @param {Node} scope
     * @return {undefined}
     */
    function clear(scope) {
      fn(scope, !options.undo.canDo());
    }
    /**
     * @param {Node} v
     * @return {undefined}
     */
    function finish(v) {
      fn(v, !options.undo.canRedo());
    }
    /**
     * @param {Node} scope
     * @return {?}
     */
    function walk(scope) {
      if (options.node.hasClass(scope.get(0), "fr-no-refresh")) {
        return false;
      }
      var codeSegments = options.selection.blocks();
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        var node = codeSegments[i].previousSibling;
        for (;node && (node.nodeType == Node.TEXT_NODE && 0 === node.textContent.length);) {
          node = node.previousSibling;
        }
        if ("LI" != codeSegments[i].tagName || node) {
          return fn(scope, false), true;
        }
        fn(scope, true);
      }
    }
    /**
     * @param {Node} scope
     * @return {?}
     */
    function init(scope) {
      if (options.node.hasClass(scope.get(0), "fr-no-refresh")) {
        return false;
      }
      var j = options.selection.blocks();
      /** @type {number} */
      var i = 0;
      for (;i < j.length;i++) {
        /** @type {string} */
        var which = "rtl" == options.opts.direction || "rtl" == $(j[i]).css("direction") ? "margin-right" : "margin-left";
        if ("LI" == j[i].tagName || "LI" == j[i].parentNode.tagName) {
          return fn(scope, false), true;
        }
        if (options.helpers.getPX($(j[i]).css(which)) > 0) {
          return fn(scope, false), true;
        }
      }
      fn(scope, true);
    }
    /**
     * @param {Node} button
     * @param {boolean} recurring
     * @return {undefined}
     */
    function fn(button, recurring) {
      button.toggleClass("fr-disabled", recurring).attr("aria-disabled", recurring);
    }
    return{
      /** @type {function (Node): undefined} */
      undo : clear,
      /** @type {function (Node): undefined} */
      redo : finish,
      /** @type {function (Node): ?} */
      outdent : init,
      /** @type {function (Node): ?} */
      indent : walk
    };
  };
  $.extend($.FE.DEFAULTS, {
    editInPopup : false
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.textEdit = function(self) {
    /**
     * @return {undefined}
     */
    function reset() {
      /** @type {string} */
      var edit = '<div id="fr-text-edit-' + self.id + '" class="fr-layer fr-text-edit-layer"><div class="fr-input-line"><input type="text" placeholder="' + self.language.translate("Text") + '" tabIndex="1"></div><div class="fr-action-buttons"><button type="button" class="fr-command fr-submit" data-cmd="updateText" tabIndex="2">' + self.language.translate("Update") + "</button></div></div>";
      var pdataCur = {
        edit : edit
      };
      self.popups.create("text.edit", pdataCur);
    }
    /**
     * @return {undefined}
     */
    function init() {
      var value;
      var $page = self.popups.get("text.edit");
      value = "INPUT" === self.$el.prop("tagName") ? self.$el.attr("placeholder") : self.$el.text();
      $page.find("input").val(value).trigger("change");
      self.popups.setContainer("text.edit", self.$sc);
      self.popups.show("text.edit", self.$el.offset().left + self.$el.outerWidth() / 2, self.$el.offset().top + self.$el.outerHeight(), self.$el.outerHeight());
    }
    /**
     * @return {undefined}
     */
    function setup() {
      self.events.$on(self.$el, self._mouseup, function() {
        setTimeout(function() {
          init();
        }, 10);
      });
    }
    /**
     * @return {undefined}
     */
    function update() {
      var $page = self.popups.get("text.edit");
      var v = $page.find("input").val();
      if (0 === v.length) {
        v = self.opts.placeholderText;
      }
      if ("INPUT" === self.$el.prop("tagName")) {
        self.$el.attr("placeholder", v);
      } else {
        self.$el.text(v);
      }
      self.events.trigger("contentChanged");
      self.popups.hide("text.edit");
    }
    /**
     * @return {undefined}
     */
    function start() {
      if (self.opts.editInPopup) {
        reset();
        setup();
      }
    }
    return{
      /** @type {function (): undefined} */
      _init : start,
      /** @type {function (): undefined} */
      update : update
    };
  };
  $.FE.RegisterCommand("updateText", {
    focus : false,
    undo : false,
    /**
     * @return {undefined}
     */
    callback : function() {
      this.textEdit.update();
    }
  });
  $.extend($.FE.DEFAULTS, {
    toolbarBottom : false,
    toolbarButtons : ["fullscreen", "bold", "italic", "underline", "strikeThrough", "subscript", "superscript", "|", "fontFamily", "fontSize", "color", "inlineStyle", "paragraphStyle", "|", "paragraphFormat", "align", "formatOL", "formatUL", "outdent", "indent", "quote", "-", "insertLink", "insertImage", "insertVideo", "embedly", "insertFile", "insertTable", "|", "emoticons", "specialCharacters", "insertHR", "selectAll", "clearFormatting", "|", "print", "spellChecker", "help", "html", "|", "undo",
    "redo"],
    toolbarButtonsXS : ["bold", "italic", "fontFamily", "fontSize", "|", "undo", "redo"],
    toolbarButtonsSM : ["bold", "italic", "underline", "|", "fontFamily", "fontSize", "insertLink", "insertImage", "table", "|", "undo", "redo"],
    toolbarButtonsMD : null,
    toolbarContainer : null,
    toolbarInline : false,
    toolbarSticky : true,
    toolbarStickyOffset : 0,
    toolbarVisibleWithoutSelection : false
  });
  /**
   * @param {Object} self
   * @return {?}
   */
  $.FE.MODULES.toolbar = function(self) {
    /**
     * @param {Array} args
     * @param {Array} arg
     * @return {undefined}
     */
    function exec(args, arg) {
      /** @type {number} */
      var x = 0;
      for (;x < arg.length;x++) {
        if ("-" != arg[x]) {
          if ("|" != arg[x]) {
            if (args.indexOf(arg[x]) < 0) {
              args.push(arg[x]);
            }
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function render() {
      var list = $.merge([], done());
      exec(list, self.opts.toolbarButtonsXS || []);
      exec(list, self.opts.toolbarButtonsSM || []);
      exec(list, self.opts.toolbarButtonsMD || []);
      exec(list, self.opts.toolbarButtons);
      /** @type {number} */
      var i = list.length - 1;
      for (;i >= 0;i--) {
        if ("-" != list[i]) {
          if ("|" != list[i]) {
            if (list.indexOf(list[i]) < i) {
              list.splice(i, 1);
            }
          }
        }
      }
      var sorted = self.button.buildList(list, done());
      self.$tb.append(sorted);
      self.button.bindCommands(self.$tb);
    }
    /**
     * @return {?}
     */
    function done() {
      var objUid = self.helpers.screenSize();
      return map[objUid];
    }
    /**
     * @return {undefined}
     */
    function add() {
      var codeSegments = done();
      self.$tb.find(".fr-separator").remove();
      self.$tb.find("> .fr-command").addClass("fr-hidden");
      /** @type {number} */
      var i = 0;
      for (;i < codeSegments.length;i++) {
        if ("|" == codeSegments[i] || "-" == codeSegments[i]) {
          self.$tb.append(self.button.buildList([codeSegments[i]]));
        } else {
          var header = self.$tb.find('> .fr-command[data-cmd="' + codeSegments[i] + '"]');
          /** @type {null} */
          var option = null;
          if (self.node.hasClass(header.next().get(0), "fr-dropdown-menu")) {
            option = header.next();
          }
          header.removeClass("fr-hidden").appendTo(self.$tb);
          if (option) {
            option.appendTo(self.$tb);
          }
        }
      }
    }
    /**
     * @return {undefined}
     */
    function addListener() {
      self.events.$on($(self.o_win), "resize", add);
      self.events.$on($(self.o_win), "orientationchange", add);
    }
    /**
     * @param {Object} recurring
     * @param {boolean} dataAndEvents
     * @return {undefined}
     */
    function run(recurring, dataAndEvents) {
      setTimeout(function() {
        if ((!recurring || recurring.which != $.FE.KEYCODE.ESC) && (self.selection.inEditor() && (self.core.hasFocus() && (!self.popups.areVisible() && (self.opts.toolbarVisibleWithoutSelection || (!self.selection.isCollapsed() && !self.keys.isIME() || dataAndEvents)))))) {
          if (self.$tb.data("instance", self), false === self.events.trigger("toolbar.show", [recurring])) {
            return false;
          }
          self.$tb.show();
          if (!self.opts.toolbarContainer) {
            self.position.forSelection(self.$tb);
          }
          if (self.opts.zIndex > 1) {
            self.$tb.css("z-index", self.opts.zIndex + 1);
          } else {
            self.$tb.css("z-index", null);
          }
        }
      }, 0);
    }
    /**
     * @param {Object} event
     * @return {?}
     */
    function hide(event) {
      return!(!event || ("keydown" !== event.type || !self.keys.ctrlKey(event))) || (!!self.button.getButtons(".fr-dropdown.fr-active").next().find(self.o_doc.activeElement).length || void(false !== self.events.trigger("toolbar.hide") && self.$tb.hide()));
    }
    /**
     * @return {?}
     */
    function mousemove() {
      if (false === self.events.trigger("toolbar.show")) {
        return false;
      }
      self.$tb.show();
    }
    /**
     * @param {Event} e
     * @return {undefined}
     */
    function onKeyDown(e) {
      clearTimeout(timer);
      if (!(e && e.which == $.FE.KEYCODE.ESC)) {
        /** @type {number} */
        timer = setTimeout(run, self.opts.typingTimer);
      }
    }
    /**
     * @return {undefined}
     */
    function initialize() {
      self.events.on("window.mousedown", hide);
      self.events.on("keydown", hide);
      self.events.on("blur", hide);
      self.events.on("window.mouseup", run);
      if (self.helpers.isMobile()) {
        if (!self.helpers.isIOS()) {
          self.events.on("window.touchend", run);
          if (self.browser.mozilla) {
            setInterval(run, 200);
          }
        }
      } else {
        self.events.on("window.keyup", onKeyDown);
      }
      self.events.on("keydown", function(e) {
        if (e) {
          if (e.which == $.FE.KEYCODE.ESC) {
            hide();
          }
        }
      });
      self.events.on("keydown", function(evt) {
        if (evt.which == $.FE.KEYCODE.ALT) {
          return evt.stopPropagation(), false;
        }
      }, true);
      self.events.$on(self.$wp, "scroll.toolbar", run);
      self.events.on("commands.after", run);
      if (self.helpers.isMobile()) {
        self.events.$on(self.$doc, "selectionchange", onKeyDown);
        self.events.$on(self.$doc, "orientationchange", run);
      }
    }
    /**
     * @return {undefined}
     */
    function show() {
      if (self.opts.toolbarInline) {
        self.$sc.append(self.$tb);
        self.$tb.data("container", self.$sc);
        self.$tb.addClass("fr-inline");
        self.$tb.prepend('<span class="fr-arrow"></span>');
        initialize();
        /** @type {boolean} */
        self.opts.toolbarBottom = false;
      } else {
        if (self.opts.toolbarBottom && !self.helpers.isIOS()) {
          self.$box.append(self.$tb);
          self.$tb.addClass("fr-bottom");
          self.$box.addClass("fr-bottom");
        } else {
          /** @type {boolean} */
          self.opts.toolbarBottom = false;
          self.$box.prepend(self.$tb);
          self.$tb.addClass("fr-top");
          self.$box.addClass("fr-top");
        }
        self.$tb.addClass("fr-basic");
        if (self.opts.toolbarSticky) {
          if (self.opts.toolbarStickyOffset) {
            if (self.opts.toolbarBottom) {
              self.$tb.css("bottom", self.opts.toolbarStickyOffset);
            } else {
              self.$tb.css("top", self.opts.toolbarStickyOffset);
            }
          }
          self.position.addSticky(self.$tb);
        }
      }
    }
    /**
     * @return {undefined}
     */
    function onSuccess() {
      self.$tb.html("").removeData().remove();
      /** @type {null} */
      self.$tb = null;
    }
    /**
     * @return {undefined}
     */
    function activate() {
      self.$box.removeClass("fr-top fr-bottom fr-inline fr-basic");
      self.$box.find(".fr-sticky-dummy").remove();
    }
    /**
     * @return {undefined}
     */
    function init() {
      if (self.opts.theme) {
        self.$tb.addClass(self.opts.theme + "-theme");
      }
      if (self.opts.zIndex > 1) {
        self.$tb.css("z-index", self.opts.zIndex + 1);
      }
      if ("auto" != self.opts.direction) {
        self.$tb.removeClass("fr-ltr fr-rtl").addClass("fr-" + self.opts.direction);
      }
      if (self.helpers.isMobile()) {
        self.$tb.addClass("fr-mobile");
      } else {
        self.$tb.addClass("fr-desktop");
      }
      if (self.opts.toolbarContainer) {
        if (self.opts.toolbarInline) {
          initialize();
          hide();
        }
        if (self.opts.toolbarBottom) {
          self.$tb.addClass("fr-bottom");
        } else {
          self.$tb.addClass("fr-top");
        }
      } else {
        show();
      }
      doc = self.$tb.get(0).ownerDocument;
      u = "defaultView" in doc ? doc.defaultView : doc.parentWindow;
      render();
      addListener();
      self.accessibility.registerToolbar(self.$tb);
      self.events.$on(self.$tb, self._mousedown + " " + self._mouseup, function(e) {
        var offsetParent = e.originalEvent ? e.originalEvent.target || e.originalEvent.originalTarget : null;
        if (offsetParent && ("INPUT" != offsetParent.tagName && !self.edit.isDisabled())) {
          return e.stopPropagation(), e.preventDefault(), false;
        }
      }, true);
    }
    /**
     * @return {?}
     */
    function start() {
      if (self.$sc = $(self.opts.scrollableContainer).first(), !self.$wp) {
        return false;
      }
      if (self.opts.toolbarContainer) {
        if (self.shared.$tb) {
          self.$tb = self.shared.$tb;
          if (self.opts.toolbarInline) {
            initialize();
          }
        } else {
          self.shared.$tb = $('<div class="fr-toolbar"></div>');
          self.$tb = self.shared.$tb;
          $(self.opts.toolbarContainer).append(self.$tb);
          init();
          self.$tb.data("instance", self);
        }
        if (self.opts.toolbarInline) {
          self.$box.addClass("fr-inline");
        } else {
          self.$box.addClass("fr-basic");
        }
        self.events.on("focus", function() {
          self.$tb.data("instance", self);
        }, true);
        /** @type {boolean} */
        self.opts.toolbarInline = false;
      } else {
        if (self.opts.toolbarInline) {
          self.$box.addClass("fr-inline");
          if (self.shared.$tb) {
            self.$tb = self.shared.$tb;
            initialize();
          } else {
            self.shared.$tb = $('<div class="fr-toolbar"></div>');
            self.$tb = self.shared.$tb;
            init();
          }
        } else {
          self.$box.addClass("fr-basic");
          self.$tb = $('<div class="fr-toolbar"></div>');
          init();
          self.$tb.data("instance", self);
        }
      }
      self.events.on("destroy", activate, true);
      self.events.on(self.opts.toolbarInline || self.opts.toolbarContainer ? "shared.destroy" : "destroy", onSuccess, true);
    }
    /**
     * @return {undefined}
     */
    function createOption() {
      if (!x) {
        if (self.$tb) {
          self.$tb.find("> .fr-command").addClass("fr-disabled fr-no-refresh").attr("aria-disabled", true);
          /** @type {boolean} */
          x = true;
        }
      }
    }
    /**
     * @return {undefined}
     */
    function toggle() {
      if (x) {
        if (self.$tb) {
          self.$tb.find("> .fr-command").removeClass("fr-disabled fr-no-refresh").attr("aria-disabled", false);
          /** @type {boolean} */
          x = false;
        }
      }
      self.button.bulkRefresh();
    }
    var doc;
    var u;
    /** @type {Array} */
    var map = [];
    map[$.FE.XS] = self.opts.toolbarButtonsXS || self.opts.toolbarButtons;
    map[$.FE.SM] = self.opts.toolbarButtonsSM || self.opts.toolbarButtons;
    map[$.FE.MD] = self.opts.toolbarButtonsMD || self.opts.toolbarButtons;
    map[$.FE.LG] = self.opts.toolbarButtons;
    /** @type {null} */
    var timer = null;
    /** @type {boolean} */
    var x = false;
    return{
      /** @type {function (): ?} */
      _init : start,
      /** @type {function (Object): ?} */
      hide : hide,
      /** @type {function (): ?} */
      show : mousemove,
      /** @type {function (Object, boolean): undefined} */
      showInline : run,
      /** @type {function (): undefined} */
      disable : createOption,
      /** @type {function (): undefined} */
      enable : toggle
    };
  };
});
